//peisma/schema,prisma
// This is your Prisma schema file
// Docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String
  contactPerson String?  @map("contact_person")
  phone         String?
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  requestItems RequestItem[]

  @@map("suppliers")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  requestItems RequestItem[]

  @@map("customers")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String     @unique
  parentId Int?
  parent   Category?  @relation("CategoryToChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToChildren")

  products Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String?
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images       ProductImage[]
  requestItems RequestItem[]
  deliveries   Delivery[] // üî• —Å–≤—è–∑—å —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  filename  String
  path      String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model Request {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  notes     String?

  items RequestItem[]

  @@map("requests")
}

model RequestItem {
  id        Int      @id @default(autoincrement())
  requestId Int?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: SetNull)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  status            ItemStatus @default(CANDIDATE)
  quantity          Int        @default(1)
  deliveredQuantity Int        @default(0)
  isCompleted       Boolean    @default(false)
  pricePerUnit      Decimal    @default(0.00)

  supplierId Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // üî• —Å–≤—è–∑—å —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
  deliveries Delivery[]

  @@map("request_items")
}

enum ItemStatus {
  CANDIDATE // –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –∑–∞—è–≤–∫—É
  IN_REQUEST // –≤ –∑–∞—è–≤–∫–µ
  EXTRA // —ç–∫—Å—Ç—Ä–∞ –∑–∞—è–≤–∫–∞
}

model Delivery {
  id Int @id @default(autoincrement())

  // —Å–≤—è–∑—å —Å RequestItem
  requestItemId Int
  requestItem   RequestItem @relation(fields: [requestItemId], references: [id], onDelete: Cascade)

  deliveryDate DateTime @default(now()) @map("delivery_date")
  quantity     Int

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏
  status DeliveryStatus @default(PARTIAL)

  extraShipment Boolean @default(false) @map("extra_shipment")
  notes         String? @map("notes")

  // –ö—ç—à–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  supplierName String
  customerName String

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  requestDate  DateTime
  extraRequest Boolean  @default(false)
  pricePerUnit Decimal  @default(0.00)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("deliveries")
}

enum DeliveryStatus {
  PARTIAL // –ß–∞—Å—Ç–∏—á–Ω–æ
  OVER // –ü–µ—Ä–µ–ø–æ–ª—É—á–µ–Ω–æ
  FULL // –ü–æ–ª–Ω–æ—Å—Ç—å—é
  EXTRA // –≠–∫—Å—Ç—Ä–∞
}

model ProductUnit {
  id            Int      @id @default(autoincrement())
  serialNumber  String   @unique @map("serial_number")
  productId     Int
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  deliveryId    Int
  delivery      Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("product_units")
}