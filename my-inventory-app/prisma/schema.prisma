//peisma/schema,prisma
// This is your Prisma schema file
// Docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String
  contactPerson String?  @map("contact_person")
  phone         String?
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  requestItems RequestItem[]

  @@map("suppliers")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  requestItems RequestItem[]

  @@map("customers")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String     @unique
  parentId Int?
  parent   Category?  @relation("CategoryToChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToChildren")

  products Product[]

  @@map("categories")
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String?
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  brandId     Int? // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –±—Ä–µ–Ω–¥–æ–º
  brand       Brand?    @relation(fields: [brandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images       ProductImage[]
  requestItems RequestItem[]
  deliveries   Delivery[] // üî• —Å–≤—è–∑—å —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
  productUnits ProductUnit[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  filename  String
  path      String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model Request {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  notes     String?

  items RequestItem[]

  @@map("requests")
}

model RequestItem {
  id        Int      @id @default(autoincrement())
  requestId Int?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: SetNull)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  status            ItemStatus @default(CANDIDATE)
  quantity          Int        @default(1)
  deliveredQuantity Int        @default(0)
  isCompleted       Boolean    @default(false)
  pricePerUnit      Decimal    @default(0.00)

  supplierId Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // üî• —Å–≤—è–∑—å —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
  deliveries Delivery[]

  @@map("request_items")
}

enum ItemStatus {
  CANDIDATE // –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –∑–∞—è–≤–∫—É
  IN_REQUEST // –≤ –∑–∞—è–≤–∫–µ
  EXTRA // —ç–∫—Å—Ç—Ä–∞ –∑–∞—è–≤–∫–∞
}

model Delivery {
  id Int @id @default(autoincrement())

  // —Å–≤—è–∑—å —Å RequestItem
  requestItemId Int
  requestItem   RequestItem @relation(fields: [requestItemId], references: [id], onDelete: Restrict)

  deliveryDate DateTime @default(now()) @map("delivery_date")
  quantity     Int

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏
  status DeliveryStatus @default(PARTIAL)

  extraShipment Boolean @default(false) @map("extra_shipment")
  notes         String? @map("notes")

  // –ö—ç—à–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  supplierName String
  customerName String

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  requestDate  DateTime
  extraRequest Boolean  @default(false)
  pricePerUnit Decimal  @default(0.00)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productUnits ProductUnit[]

  @@map("deliveries")
}

enum DeliveryStatus {
  PARTIAL // –ß–∞—Å—Ç–∏—á–Ω–æ
  OVER // –ü–µ—Ä–µ–ø–æ–ª—É—á–µ–Ω–æ
  FULL // –ü–æ–ª–Ω–æ—Å—Ç—å—é
  EXTRA // –≠–∫—Å—Ç—Ä–∞
}

model ProductUnit {
  id           Int    @id @default(autoincrement())
  serialNumber String @unique @map("serial_number")

  // ===== –°–≤—è–∑–∏ =====
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  deliveryId Int?
  delivery   Delivery? @relation(fields: [deliveryId], references: [id], onDelete: Restrict)

  parentProductUnitId Int?
  parentProductUnit   ProductUnit?  @relation("ProductUnitChildren", fields: [parentProductUnitId], references: [id])
  childProductUnits   ProductUnit[] @relation("ProductUnitChildren")

  // ===== –î—É–±–ª–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Product =====
  productCode         String?  @map("product_code")
  productName         String?  @map("product_name")
  productDescription  String?  @map("product_description")
  productCategoryId   Int?     @map("product_category_id")
  productCategoryName String?  @map("product_category_name")
  productTags         Json?    @map("product_tags")
  requestPricePerUnit Decimal? @map("request_price_per_unit")

  // ===== –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –±—ã—Å—Ç—Ä—ã—Ö –≤—ã–±–æ—Ä–æ–∫ =====
  storeStock Int @default(0) @map("store_stock")
  inRequests Int @default(0) @map("in_requests")

  // ===== –°—Ç–∞—Ç—É—Å—ã =====
  statusCard    ProductUnitCardStatus
  statusProduct ProductUnitPhysicalStatus?
  isReturned    Boolean                    @default(false) // –í–æ–∑–≤—Ä–∞—Ç
  returnedAt    DateTime?                  @map("returned_at")

  // ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ =====
  salePrice    Float?    @map("sale_price") // —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
  soldAt       DateTime? @map("sold_at") // –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏
  isCredit     Boolean   @default(false) @map("is_credit") // –ø—Ä–æ–¥–∞–Ω–æ –≤ –¥–æ–ª–≥
  creditPaidAt DateTime? @map("credit_paid_at") // –∫–æ–≥–¥–∞ –ø–æ–≥–∞—Å–∏–ª–∏ –¥–æ–ª–≥

  // ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ =====
  buyerName  String? @map("buyer_name")
  buyerPhone String? @map("buyer_phone")

  // ===== –õ–æ–≥–∏ =====
  logs Json?

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  cashEvents CashEvent[]

  @@map("product_units")
}

enum ProductUnitCardStatus {
  CANDIDATE
  SPROUTED
  IN_REQUEST
  IN_DELIVERY
}

enum ProductUnitPhysicalStatus {
  IN_STORE
  SOLD
  CREDIT
  LOST
}

model CashDay {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique @map("date")
  isClosed  Boolean  @default(false) @map("is_closed")
  total     Float    @default(0.00) @map("total")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  events CashEvent[]

  @@map("cash_days")
}

model CashEvent {
  id            Int           @id @default(autoincrement())
  type          CashEventType @map("type")
  amount        Float         @map("amount")
  notes         String?       @map("notes")
  cashDayId     Int           @map("cash_day_id")
  cashDay       CashDay       @relation(fields: [cashDayId], references: [id], onDelete: Cascade)
  productUnitId Int?          @map("product_unit_id")
  productUnit   ProductUnit?  @relation(fields: [productUnitId], references: [id], onDelete: SetNull)
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("cash_events")
}

enum CashEventType {
  SALE // –ü—Ä–æ–¥–∞–∂–∞
  RETURN // –í–æ–∑–≤—Ä–∞—Ç
  PRICE_QUERY // –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
  ORDER // –ó–∞–∫–∞–∑
}
