// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Supplier {
  id   Int    @id @default(autoincrement())
  name String @unique

  productUnits ProductUnit[]

  @@map("suppliers")
}

model Customer {
  id    Int    @id @default(autoincrement())
  name  String
  phone String?
  notes String?

  productUnits ProductUnit[]

  @@map("customers")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  path     String    @unique // Добавляем это поле
  // Убираем parentId и связи
  products Product[]
  spines   Spine[]

  @@map("categories")
  @@index([path]) // Добавляем индекс
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String?
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  brandId     Int?
  brand       Brand?    @relation(fields: [brandId], references: [id])

  // Новое поле: привязка к Spine (Т.П.)
  spineId Int?
  spine   Spine? @relation(fields: [spineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images       ProductImage[]
  productUnits ProductUnit[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  filename  String
  path      String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductUnit {
  id           Int      @id @default(autoincrement())
  serialNumber String   @unique @map("serial_number")

  // Связь с Product
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Привязка к Spine (Т.П.)
  spineId Int?
  spine   Spine? @relation(fields: [spineId], references: [id])

  parentProductUnitId Int?
  parentProductUnit   ProductUnit? @relation("ProductUnitChildren", fields: [parentProductUnitId], references: [id])
  childProductUnits   ProductUnit[] @relation("ProductUnitChildren")

  // Дублируемые данные из Product
  productCode        String?   @map("product_code")
  productName        String?   @map("product_name")
  productDescription String?   @map("product_description")
  productCategoryId  Int?      @map("product_category_id")
  productCategoryName String?  @map("product_category_name")
  productTags        Json?     @map("product_tags")

  // ===== Новые поля для кандидатов и заявок =====
  quantityInCandidate Int?       @default(0) @map("quantity_in_candidate")
  createdAtCandidate  DateTime?               @map("created_at_candidate")
  quantityInRequest   Int?       @default(0) @map("quantity_in_request")
  createdAtRequest    DateTime?               @map("created_at_request")
  requestPricePerUnit Float?     @map("request_price_per_unit")

  // ===== Статусы =====
  statusCard    ProductUnitCardStatus
  statusProduct ProductUnitPhysicalStatus?
  isReturned    Boolean @default(false)
  returnedAt    DateTime? @map("returned_at")

  // ===== Информация о продаже =====
  salePrice    Float?    @map("sale_price")
  soldAt       DateTime? @map("sold_at")
  isCredit     Boolean   @default(false) @map("is_credit")
  creditPaidAt DateTime? @map("credit_paid_at")

  // Поставщик и заказчик
  supplierId Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Логи
  logs   ProductUnitLog[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_units")
  
  cashEvents CashEvent[]
}

enum ProductUnitCardStatus {
  CLEAR
  CANDIDATE
  SPROUTED
  IN_REQUEST
  IN_DELIVERY
  ARRIVED
}

enum ProductUnitPhysicalStatus {
  IN_STORE
  SOLD
  CREDIT
  LOST
}

model CashDay {
  id        Int       @id @default(autoincrement())
  date      DateTime  @unique @map("date")
  isClosed  Boolean   @default(false) @map("is_closed")
  total     Float     @default(0.00) @map("total")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  events CashEvent[]

  @@map("cash_days")
}

model CashEvent {
  id        Int           @id @default(autoincrement())
  type      CashEventType @map("type")
  amount    Float         @map("amount")
  notes     String?       @map("notes")
  cashDayId Int           @map("cash_day_id")
  cashDay   CashDay       @relation(fields: [cashDayId], references: [id], onDelete: Cascade)
  productUnitId Int?          @map("product_unit_id")
  productUnit   ProductUnit?  @relation(fields: [productUnitId], references: [id], onDelete: SetNull)
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("cash_events")
}

enum CashEventType {
  SALE
  RETURN
  PRICE_QUERY
  ORDER
}


// prisma/schema.prisma
model Spine {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  categoryId Int?
  category   Category?  @relation(fields: [categoryId], references: [id])
  imagePath  String?    // маленькая картинка (путь)
  
  // НОВОЕ ПОЛЕ - денормализованные данные по брендам
  brandData  Json?      @db.Json
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  products     Product[]
  productUnits ProductUnit[]

  @@map("spines")
}

model ProductUnitLog {
  id            Int         @id @default(autoincrement())
  productUnitId Int
  productUnit   ProductUnit @relation(fields: [productUnitId], references: [id], onDelete: Cascade)
  type          String?     // "STATUS_CHANGE", "REQUEST", "SYSTEM"
  message       String
  meta          Json?
  createdAt     DateTime    @default(now())

  @@map("product_unit_logs")
}