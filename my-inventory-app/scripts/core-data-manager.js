// scripts/core-data-manager.js
const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const prisma = new PrismaClient();
const CORE_DIR = path.join(process.cwd(), 'core-data');

// –¢–∞–±–ª–∏—Ü—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ —è–¥—Ä–æ
const CORE_TABLES = [
  'Supplier',
  'Customer', 
  'User',
  'Category',
  'Brand',
  'Spine',
  'Product',
  'ProductImage'
];

class CoreDataManager {
  // –≠–∫—Å–ø–æ—Ä—Ç —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  async exportCoreData(backupName = 'core-backup') {
    try {
      if (!fs.existsSync(CORE_DIR)) {
        fs.mkdirSync(CORE_DIR, { recursive: true });
      }

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const exportFile = `${backupName}-${timestamp}.json`;
      const exportPath = path.join(CORE_DIR, exportFile);

      console.log('üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö...');

      const coreData = {};

      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
      for (const table of CORE_TABLES) {
        console.log(`  üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${table}...`);
        
        try {
          const includeConfig = this.getIncludes(table);
          const data = await prisma[table.toLowerCase()].findMany({
            include: includeConfig
          });
          
          coreData[table] = data;
          console.log(`  ‚úÖ ${table}: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  ${table}: –æ—à–∏–±–∫–∞ - ${error.message}`);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      fs.writeFileSync(exportPath, JSON.stringify(coreData, null, 2), 'utf8');
      
      console.log('‚úÖ –Ø–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!');
      console.log(`üìÅ –§–∞–π–ª: ${exportFile}`);
      
      return exportFile;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      throw error;
    }
  }

  // –ò–º–ø–æ—Ä—Ç —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  async importCoreData(importFile, options = { clearExisting: false }) {
    try {
      const importPath = path.join(CORE_DIR, importFile);
      
      if (!fs.existsSync(importPath)) {
        throw new Error(`–§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${importFile}`);
      }

      console.log('üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö...');
      
      const coreData = JSON.parse(fs.readFileSync(importPath, 'utf8'));
      
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (options.clearExisting) {
        console.log('üóëÔ∏è  –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
        await this.clearCoreData();
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
      const importOrder = ['Supplier', 'Brand', 'Category', 'User', 'Customer', 'Spine', 'Product', 'ProductImage'];
      
      for (const table of importOrder) {
        if (coreData[table] && coreData[table].length > 0) {
          console.log(`  üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${table}...`);
          
          try {
            await this.importTableData(table, coreData[table]);
            console.log(`  ‚úÖ ${table}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${coreData[table].length} –∑–∞–ø–∏—Å–µ–π`);
          } catch (error) {
            console.log(`  ‚ùå ${table}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - ${error.message}`);
          }
        }
      }

      console.log('‚úÖ –Ø–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  async clearCoreData() {
    try {
      // –û—á–∏—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
      const clearOrder = ['ProductImage', 'Product', 'Spine', 'Customer', 'User', 'Category', 'Brand', 'Supplier'];
      
      for (const table of clearOrder) {
        console.log(`  üßπ –û—á–∏—â–∞–µ–º ${table}...`);
        await prisma[table.toLowerCase()].deleteMany({});
      }
      
      console.log('‚úÖ –Ø–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —è–¥—Ä–∞
  listCoreFiles() {
    if (!fs.existsSync(CORE_DIR)) return [];
    
    return fs.readdirSync(CORE_DIR)
      .filter(f => f.endsWith('.json'))
      .sort()
      .reverse()
      .map(file => {
        const filePath = path.join(CORE_DIR, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          size: this.formatFileSize(stats.size),
          date: stats.mtime.toLocaleString('ru-RU')
        };
      });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getIncludes(table) {
    const tableLower = table.toLowerCase();
    
    switch (tableLower) {
      case 'product':
        return {
          category: true,
          brand: true,
          spine: true,
          images: true
        };
      case 'spine':
        return {
          category: true
        };
      case 'productimage':
        return {
          product: true
        };
      default:
        return {};
    }
  }

  async importTableData(tableName, data) {
    const model = tableName.toLowerCase();
    
    for (const item of data) {
      try {
        // –£–±–∏—Ä–∞–µ–º ID —á—Ç–æ–±—ã –±–∞–∑–∞ —Å–∞–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–æ–≤—ã–µ
        const { id, ...cleanData } = item;
        
        await prisma[model].create({
          data: cleanData
        });
      } catch (error) {
        console.log(`    ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ ${tableName}: ${error.message}`);
      }
    }
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const manager = new CoreDataManager();
  const command = process.argv[2];

  switch (command) {
    case 'export':
      const name = process.argv[3] || 'core-backup';
      await manager.exportCoreData(name);
      break;
      
    case 'import':
      const file = process.argv[3];
      if (!file) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: npm run core:import <filename>');
        process.exit(1);
      }
      const clear = process.argv[4] === '--clear';
      await manager.importCoreData(file, { clearExisting: clear });
      break;
      
    case 'clear':
      await manager.clearCoreData();
      break;
      
    case 'list':
      const files = manager.listCoreFiles();
      if (files.length === 0) {
        console.log('üìÇ –§–∞–π–ª—ã —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      } else {
        console.log('üìÇ –§–∞–π–ª—ã —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
        files.forEach((file, index) => {
          console.log(`  ${index + 1}. ${file.name}`);
          console.log(`     üìä ${file.size} | üìÖ ${file.date}`);
        });
      }
      break;
      
    default:
      console.log(`
üéØ –ú–ï–ù–ï–î–ñ–ï–† –Ø–î–†–ê –î–ê–ù–ù–´–•

–ö–æ–º–∞–Ω–¥—ã:
  npm run core:export [name]    - –≠–∫—Å–ø–æ—Ä—Ç —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  npm run core:import <file>    - –ò–º–ø–æ—Ä—Ç —è–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  npm run core:import <file> --clear - –ò–º–ø–æ—Ä—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π
  npm run core:clear            - –û—á–∏—Å—Ç–∏—Ç—å —è–¥—Ä–æ –¥–∞–Ω–Ω—ã—Ö
  npm run core:list             - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —è–¥—Ä–∞

–ü—Ä–∏–º–µ—Ä:
  npm run core:export my-store
  npm run core:import my-store-2024-10-14T10-30-00Z.json --clear
      `);
  }
  
  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = CoreDataManager;