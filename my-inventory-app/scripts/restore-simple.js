const { restore } = require('pg-dump');
const fs = require('fs');
const path = require('path');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

async function restoreBackup(backupFile) {
  try {
    const dbUrl = process.env.DATABASE_URL;
    console.log('üîç Restoring backup to:', dbUrl);
    
    if (!dbUrl) {
      throw new Error('DATABASE_URL not found');
    }

    const backupDir = path.join(process.cwd(), 'backups');
    const backupPath = path.join(backupDir, backupFile);

    if (!fs.existsSync(backupPath)) {
      throw new Error(`Backup file not found: ${backupFile}`);
    }

    console.log('üìÑ Restoring from:', backupFile);

    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
    const content = fs.readFileSync(backupPath, 'utf8');
    const hasRussian = /[–∞-—è–ê-–Ø]/.test(content);
    console.log('üî§ Russian text in backup file:', hasRussian ? '‚úÖ YES' : '‚ùå NO');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å —è–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    await restore({
      connectionString: dbUrl,
      input: backupPath,
      encoding: 'utf8',  // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º UTF-8
      verbose: true
    });

    console.log('‚úÖ Backup restored successfully:', backupFile);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    const { Client } = require('pg');
    const client = new Client({ connectionString: dbUrl });
    await client.connect();
    
    const result = await client.query('SELECT name FROM categories WHERE name ~ \'[–∞-—è–ê-–Ø]\' LIMIT 3');
    console.log('üî§ Russian categories in database:', result.rows.length > 0 ? '‚úÖ YES' : '‚ùå NO');
    result.rows.forEach(row => console.log('   -', row.name));
    
    await client.end();
    
  } catch (error) {
    console.error('‚ùå Restore failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const backupFile = process.argv[2];
  if (!backupFile) {
    console.error('Usage: node restore-simple.js <backup-file>');
    console.error('Available backups:');
    
    const backupDir = path.join(process.cwd(), 'backups');
    if (fs.existsSync(backupDir)) {
      const files = fs.readdirSync(backupDir).filter(f => f.endsWith('.sql'));
      files.forEach(f => console.log('  -', f));
    }
    
    process.exit(1);
  }
  restoreBackup(backupFile).catch(console.error);
}

module.exports = { restoreBackup };