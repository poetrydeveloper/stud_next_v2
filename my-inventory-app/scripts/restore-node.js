const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
const unzipper = require('unzipper');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

async function restoreDatabase(backupFile) {
  let client;
  try {
    const dbUrl = process.env.DATABASE_URL;
    console.log('üîç DATABASE_URL:', dbUrl ? 'found' : 'not found');
    
    if (!dbUrl) {
      throw new Error('DATABASE_URL not found in environment variables');
    }

    const backupPath = path.join(process.cwd(), 'backups', backupFile);
    const tempDir = path.join(process.cwd(), 'backups', 'temp_restore');

    if (!fs.existsSync(backupPath)) {
      throw new Error(`Backup file not found: ${backupFile}`);
    }

    console.log('üîç Restoring database from:', backupFile);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });

    // –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
    console.log('üì¶ Extracting archive...');
    await new Promise((resolve, reject) => {
      fs.createReadStream(backupPath)
        .pipe(unzipper.Extract({ path: tempDir }))
        .on('close', resolve)
        .on('error', reject);
    });

    // –ù–∞—Ö–æ–¥–∏–º SQL —Ñ–∞–π–ª
    const files = fs.readdirSync(tempDir);
    const sqlFile = files.find(f => f.endsWith('.sql'));
    
    if (!sqlFile) {
      throw new Error('SQL file not found in archive');
    }

    const sqlPath = path.join(tempDir, sqlFile);
    console.log('üìÑ Found SQL file:', sqlFile);

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    const statements = sqlContent.split(';').filter(stmt => stmt.trim());

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    client = new Client({
      connectionString: dbUrl
    });
    await client.connect();
    console.log('‚úÖ Connected to database');

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL statements
    for (let i = 0; i < statements.length; i++) {
      const stmt = statements[i].trim();
      if (stmt && !stmt.startsWith('--')) {
        try {
          await client.query(stmt);
          console.log(`‚úÖ Executed statement ${i + 1}/${statements.length}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Warning on statement ${i + 1}:`, error.message);
        }
      }
    }

    console.log('‚úÖ Database restored successfully');

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.unlinkSync(sqlPath);
    fs.rmdirSync(tempDir);

    console.log('üéâ Database restoration completed');

  } catch (error) {
    console.error('‚ùå Restore failed:', error);
    throw error;
  } finally {
    if (client) {
      await client.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const backupFile = process.argv[2];
  if (!backupFile) {
    console.error('Usage: node restore-node.js <backup-file>');
    console.error('Available backups:');
    
    const backupDir = path.join(process.cwd(), 'backups');
    if (fs.existsSync(backupDir)) {
      const files = fs.readdirSync(backupDir).filter(f => f.endsWith('.zip'));
      files.forEach(f => console.log('  -', f));
    }
    
    process.exit(1);
  }
  restoreDatabase(backupFile).catch(console.error);
}

module.exports = { restoreDatabase };