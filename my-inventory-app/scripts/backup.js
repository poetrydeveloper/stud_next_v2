const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');
const archiver = require('archiver');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const execAsync = promisify(exec);

async function backupDatabase() {
  try {
    const dbUrl = process.env.DATABASE_URL;
    console.log('üîç DATABASE_URL:', dbUrl ? 'found' : 'not found');
    
    if (!dbUrl) {
      throw new Error('DATABASE_URL not found in environment variables. Check your .env file');
    }

    // –ü–∞—Ä—Å–∏–º URL –ë–î
    const url = new URL(dbUrl);
    const dbName = url.pathname.slice(1);
    const dbUser = url.username;
    const dbHost = url.hostname;
    const dbPort = url.port || '5432';
    const dbPassword = url.password;

    console.log('üìä Database info:', { dbHost, dbPort, dbName, dbUser });

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const backupDir = path.join(process.cwd(), 'backups');
    const tempDir = path.join(backupDir, 'temp');
    
    if (!fs.existsSync(backupDir)) fs.mkdirSync(backupDir, { recursive: true });
    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const sqlFilename = `backup-${timestamp}.sql`;
    const zipFilename = `backup-${timestamp}.zip`;
    
    const sqlPath = path.join(tempDir, sqlFilename);
    const zipPath = path.join(backupDir, zipFilename);

    console.log('üîç Creating database backup...');

    // –ö–æ–º–∞–Ω–¥–∞ pg_dump —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const env = { ...process.env, PGPASSWORD: dbPassword };
    const dumpCommand = `pg_dump --host=${dbHost} --port=${dbPort} --username=${dbUser} --dbname=${dbName} --file="${sqlPath}" --verbose`;

    console.log('üíª Executing:', dumpCommand);
    
    await execAsync(dumpCommand, { env });
    console.log('‚úÖ SQL dump created');

    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º SQL —Ñ–∞–π–ª
    await new Promise((resolve, reject) => {
      const output = fs.createWriteStream(zipPath);
      const archive = archiver('zip', { zlib: { level: 9 } });

      output.on('close', () => {
        console.log(`‚úÖ Archive created: ${zipPath} (${archive.pointer()} bytes)`);
        resolve();
      });

      archive.on('error', reject);
      archive.pipe(output);
      archive.file(sqlPath, { name: sqlFilename });
      archive.finalize();
    });

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SQL —Ñ–∞–π–ª
    fs.unlinkSync(sqlPath);
    fs.rmdirSync(tempDir);

    console.log(`üéâ Backup completed: ${zipFilename}`);
    return zipFilename;

  } catch (error) {
    console.error('‚ùå Backup failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  backupDatabase().catch(console.error);
}

module.exports = { backupDatabase };