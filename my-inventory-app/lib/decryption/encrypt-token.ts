// lib/decryption/encrypt-token.ts
import crypto from 'crypto';

/**
 * –®–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env
 */
export function encryptToken(token: string): { encryptedToken: string; iv: string; key: string } {
  try {
    console.log('üîê EncryptToken: –ù–∞—á–∞–ª–æ —à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞');
    
    const algorithm = 'aes-256-cbc';
    const key = crypto.randomBytes(32).toString('hex');
    const iv = crypto.randomBytes(16).toString('hex');
    
    const cipher = crypto.createCipheriv(
      algorithm, 
      Buffer.from(key, 'hex'), 
      Buffer.from(iv, 'hex')
    );
    
    let encrypted = cipher.update(token, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    const result = {
      encryptedToken: encrypted,
      iv: iv
    };
    
    console.log('‚úÖ EncryptToken: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!');
    console.log('üìÅ –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
    console.log(`ENCRYPTED_GITHUB_TOKEN=${JSON.stringify(result)}`);
    console.log(`ENCRYPTION_KEY=${key}`);
    
    return { encryptedToken: encrypted, iv, key };
  } catch (error) {
    console.error('‚ùå EncryptToken: –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
    throw new Error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: ' + error.message);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
 */
export function createEncryptedTokenCLI() {
  if (typeof window !== 'undefined') {
    console.log('‚ö†Ô∏è  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Node.js —Å—Ä–µ–¥–µ');
    return;
  }

  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω: ', (token) => {
    try {
      encryptToken(token);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
      rl.close();
    }
  });
}