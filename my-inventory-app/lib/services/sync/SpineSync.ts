//lib/services/sync/SpineSync.ts
import { PrismaClient } from '@prisma/client';
import { BaseSync } from './BaseSync';
import { generateValidSlug } from '@/lib/helpers/structure-helpers';

import { prisma } from '@/app/lib/prisma';

export class SpineSync extends BaseSync {
  async sync(name: string, parentPath: string = '', categoryId?: number) {
    let node_index: string;
    let createdDirPath: string | null = null;

    try {
      return await prisma.$transaction(async (tx) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
        if (parentPath) {
          console.log('üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Spine:', {
            parentPath,
            normalized: parentPath.replace(/\\/g, '/')
          });

          // –§–ò–ö–°: –∏—â–µ–º –ø–æ node_index –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
          const normalizedSearchPath = `structure/${parentPath.replace(/\\/g, '/')}`;
          
          const parentCategory = await tx.category.findFirst({
            where: {
              node_index: normalizedSearchPath
            }
          });
          
          if (!parentCategory) {
            throw new Error(`–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è Spine. –ò—Å–∫–∞–ª–∏: "${normalizedSearchPath}"`);
          }
          
          // –ï—Å–ª–∏ categoryId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          if (!categoryId) {
            categoryId = parentCategory.id;
          }
          
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è Spine:', parentCategory);
        }

        node_index = await this.structureService.createSpine(name, parentPath);
        createdDirPath = this.getFullPath(parentPath, `s_${generateValidSlug(name)}`);

        const dbRecord = await tx.spine.create({
          data: {
            name,
            slug: generateValidSlug(name),
            categoryId,
            node_index,
            human_path: this.generateHumanPath(node_index)
          }
        });

        console.log('üíæ –°–æ–∑–¥–∞–Ω Spine –≤ –ë–î:', dbRecord);

        return { node_index, dbRecord };
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ SpineSync:', error);
      await this.rollbackFileSystem(createdDirPath);
      throw error;
    }
  }

  protected generateValidSlug(text: string): string {
    return generateValidSlug(text);
  }
}