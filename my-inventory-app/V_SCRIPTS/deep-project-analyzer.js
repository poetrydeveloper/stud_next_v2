// –æ–±–∑–æ—Ä–Ω—ã–π_—Å–∫—Ä–∏–ø—Ç/deep-project-analyzer.js
const fs = require('fs');
const path = require('path');

class DeepProjectAnalyzer {
  constructor() {
    this.rootDir = path.resolve(__dirname, '..');
    this.analysis = {
      issues: [],
      warnings: [],
      recommendations: []
    };
  }

  // 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
  analyzeAllFiles() {
    console.log('üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const allFiles = this.findAllFiles(this.rootDir);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`);

    const structure = {
      prisma: allFiles.filter(f => f.relativePath.includes('prisma') || f.name.includes('.prisma')),
      api: allFiles.filter(f => f.relativePath.includes('/api/')),
      components: allFiles.filter(f => f.relativePath.includes('/components/')),
      pages: allFiles.filter(f => f.relativePath.includes('/app/') && f.name.match(/page\.(tsx|jsx|ts|js)$/)),
      lib: allFiles.filter(f => f.relativePath.includes('/lib/')),
      hooks: allFiles.filter(f => f.relativePath.includes('use') && f.name.endsWith('.ts')),
      types: allFiles.filter(f => f.name.includes('.d.ts') || f.relativePath.includes('types')),
      config: allFiles.filter(f => f.name.match(/package\.json|tsconfig|next\.config|\.env/)),
      other: allFiles.filter(f => 
        !f.relativePath.includes('/api/') &&
        !f.relativePath.includes('/components/') &&
        !f.relativePath.includes('/lib/') &&
        !f.relativePath.includes('/app/') &&
        !f.relativePath.includes('prisma') &&
        !f.name.match(/package\.json|tsconfig|next\.config|\.env/)
      )
    };

    return structure;
  }

  // 2. –ê–Ω–∞–ª–∏–∑ Prisma —Å—Ö–µ–º—ã
  analyzePrisma(files) {
    const prismaFile = files.find(f => f.name === 'schema.prisma');
    if (!prismaFile) {
      this.analysis.issues.push('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω schema.prisma —Ñ–∞–π–ª');
      return null;
    }

    const content = this.readFile(prismaFile.path);
    const models = content.match(/model\s+(\w+)\s*{([^}]+)}/g) || [];
    
    return {
      file: prismaFile.relativePath,
      models: models.length,
      modelNames: models.map(m => m.match(/model\s+(\w+)/)[1]),
      issues: this.checkPrismaIssues(content)
    };
  }

  checkPrismaIssues(content) {
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    if (content.includes('ProductUnit') && !content.includes('@relation')) {
      issues.push('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    if (content.includes('@unique') && !content.includes('@@index')) {
      issues.push('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    return issues;
  }

  // 3. –ê–Ω–∞–ª–∏–∑ API endpoints
  analyzeApiEndpoints(files) {
    const endpoints = files.map(file => {
      const content = this.readFile(file.path);
      return {
        path: file.relativePath,
        endpoint: this.extractEndpoint(file.relativePath),
        methods: this.extractMethods(content),
        functions: this.extractFunctions(content),
        imports: this.extractImports(content),
        issues: this.checkApiIssues(content, file.relativePath)
      };
    });

    return endpoints;
  }

  extractEndpoint(filePath) {
    return filePath
      .replace(/^app\/api\//, '/api/')
      .replace(/\/route\.(ts|js)$/, '')
      .replace(/\[([^\]]+)\]/g, ':$1');
  }

  extractMethods(content) {
    const methods = [];
    const methodPatterns = {
      GET: /export\s+async\s+function\s+GET/,
      POST: /export\s+async\s+function\s+POST/,
      PATCH: /export\s+async\s+function\s+PATCH/,
      PUT: /export\s+async\s+function\s+PUT/,
      DELETE: /export\s+async\s+function\s+DELETE/
    };

    for (const [method, pattern] of Object.entries(methodPatterns)) {
      if (pattern.test(content)) methods.push(method);
    }

    return methods;
  }

  extractFunctions(content) {
    const functions = [];
    const functionMatches = content.matchAll(/export\s+(async\s+)?function\s+(\w+)/g);
    
    for (const match of functionMatches) {
      functions.push(match[2]);
    }

    return functions;
  }

  extractImports(content) {
    const imports = [];
    const importMatches = content.matchAll(/from\s+['"]([^'"]+)['"]/g);
    
    for (const match of importMatches) {
      imports.push(match[1]);
    }

    return imports;
  }

  checkApiIssues(content, filePath) {
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    if (!content.includes('try') && !content.includes('catch')) {
      issues.push('‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (try/catch)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (content.includes('req.json()') && !content.includes('if (!') && !content.includes('required')) {
      issues.push('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if (content.includes('NextResponse.json') && !content.includes('status:')) {
      issues.push('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã HTTP —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—à–∏–±–æ–∫');
    }
    
    return issues;
  }

  // 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ React
  analyzeComponents(files) {
    return files.map(file => {
      const content = this.readFile(file.path);
      return {
        name: file.name.replace(/\.(tsx|jsx)$/, ''),
        path: file.relativePath,
        type: this.getComponentType(content),
        props: this.extractComponentProps(content),
        hooks: this.extractHooks(content),
        state: this.extractState(content),
        imports: this.extractImports(content),
        issues: this.checkComponentIssues(content, file.name)
      };
    });
  }

  getComponentType(content) {
    if (content.includes('export default function')) return 'Function Component';
    if (content.includes('export default class')) return 'Class Component';
    if (content.includes('"use client"')) return 'Client Component';
    if (content.includes('"use server"')) return 'Server Component';
    return 'Unknown';
  }

  extractComponentProps(content) {
    const props = [];
    const propMatches = content.matchAll(/(\w+)\s*:\s*(\w+)/g);
    
    for (const match of propMatches) {
      if (match[1] !== 'useState' && match[1] !== 'useEffect') {
        props.push(`${match[1]}: ${match[2]}`);
      }
    }

    return props.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  }

  extractHooks(content) {
    const hooks = [];
    const hookPatterns = [
      'useState', 'useEffect', 'useContext', 'useReducer', 
      'useCallback', 'useMemo', 'useRef', 'useRouter'
    ];

    for (const hook of hookPatterns) {
      if (content.includes(hook)) hooks.push(hook);
    }

    return hooks;
  }

  extractState(content) {
    const stateVars = [];
    const stateMatches = content.matchAll(/const\s+\[([^,\]]+)/g);
    
    for (const match of stateMatches) {
      stateVars.push(match[1]);
    }

    return stateVars;
  }

  checkComponentIssues(content, fileName) {
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—Å–æ–≤
    if (content.includes('interface') && !content.includes('?')) {
      issues.push('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤—Å–µ –ø—Ä–æ–ø—Å—ã optional');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –≤ map
    if (content.includes('.map(') && !content.includes('key=')) {
      issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç key props –≤ .map()');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    if (content.includes('onClick') && content.includes('async')) {
      issues.push('‚ö†Ô∏è Async —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
    }
    
    return issues;
  }

  // 5. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü
  analyzePages(files) {
    return files.map(file => {
      const content = this.readFile(file.path);
      return {
        route: this.extractPageRoute(file.relativePath),
        path: file.relativePath,
        components: this.extractPageComponents(content),
        hooks: this.extractHooks(content),
        dataFetching: this.checkDataFetching(content),
        issues: this.checkPageIssues(content)
      };
    });
  }

  extractPageRoute(filePath) {
    return filePath
      .replace(/^app\//, '/')
      .replace(/\/page\.(tsx|jsx)$/, '')
      .replace(/\[([^\]]+)\]/g, ':$1');
  }

  extractPageComponents(content) {
    const components = [];
    const importMatches = content.matchAll(/from\s+['"]([^'"]+)['"]/g);
    
    for (const match of importMatches) {
      const importPath = match[1];
      if (importPath.includes('/components/')) {
        const compName = importPath.split('/').pop();
        components.push(compName);
      }
    }

    return components;
  }

  checkDataFetching(content) {
    const methods = [];
    if (content.includes('fetch(')) methods.push('fetch');
    if (content.includes('useEffect')) methods.push('useEffect');
    if (content.includes('getServerSideProps')) methods.push('SSR');
    if (content.includes('getStaticProps')) methods.push('SSG');
    return methods;
  }

  checkPageIssues(content) {
    const issues = [];
    
    if (content.includes('useState') && content.includes('useEffect') && content.includes('fetch')) {
      issues.push('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Server Components –¥–ª—è data fetching');
    }
    
    return issues;
  }

  // 6. –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  findAllFiles(dir, results = []) {
    try {
      if (!fs.existsSync(dir)) return results;

      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        try {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory()) {
            if (!file.startsWith('.') && 
                !['node_modules', '.next', '.git', 'V_SCRIPTS'].includes(file)) {
              this.findAllFiles(filePath, results);
            }
          } else {
            results.push({
              path: filePath,
              relativePath: path.relative(this.rootDir, filePath),
              name: file,
              size: stat.size
            });
          }
        } catch (e) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤
        }
      }
    } catch (e) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    }
    
    return results;
  }

  readFile(filePath) {
    try {
      return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`;
    }
  }

  // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateFullReport() {
    console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...');
    
    const structure = this.analyzeAllFiles();
    
    let report = `# üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê - –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê–ú–ò\n\n`;
    report += `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;
    report += `–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.rootDir}\n\n`;

    // 1. Prisma —Å—Ö–µ–º–∞
    report += `## üóÑÔ∏è PRISMA –°–•–ï–ú–ê\n\n`;
    const prismaAnalysis = this.analyzePrisma(structure.prisma);
    if (prismaAnalysis) {
      report += `**–§–∞–π–ª:** ${prismaAnalysis.file}\n`;
      report += `**–ú–æ–¥–µ–ª–∏:** ${prismaAnalysis.models} (${prismaAnalysis.modelNames.join(', ')})\n`;
      if (prismaAnalysis.issues.length > 0) {
        report += `**–ü—Ä–æ–±–ª–µ–º—ã:**\n${prismaAnalysis.issues.map(i => `- ${i}\n`).join('')}`;
      }
    }
    report += `\n`;

    // 2. API Endpoints
    report += `## üöÄ API ENDPOINTS (${structure.api.length})\n\n`;
    const apiAnalysis = this.analyzeApiEndpoints(structure.api);
    apiAnalysis.forEach(api => {
      report += `### ${api.endpoint}\n`;
      report += `**–ú–µ—Ç–æ–¥—ã:** ${api.methods.join(', ')}\n`;
      report += `**–§—É–Ω–∫—Ü–∏–∏:** ${api.functions.join(', ')}\n`;
      report += `**–§–∞–π–ª:** ${api.path}\n`;
      if (api.issues.length > 0) {
        report += `**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:**\n${api.issues.map(i => `  - ${i}\n`).join('')}`;
      }
      report += `\n`;
    });

    // 3. React –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    report += `## ‚öõÔ∏è REACT –ö–û–ú–ü–û–ù–ï–ù–¢–´ (${structure.components.length})\n\n`;
    const componentsAnalysis = this.analyzeComponents(structure.components);
    componentsAnalysis.forEach(comp => {
      report += `### ${comp.name}\n`;
      report += `**–¢–∏–ø:** ${comp.type}\n`;
      report += `**–ü—É—Ç—å:** ${comp.path}\n`;
      if (comp.props.length > 0) {
        report += `**Props:** ${comp.props.slice(0, 5).join(', ')}${comp.props.length > 5 ? '...' : ''}\n`;
      }
      if (comp.hooks.length > 0) {
        report += `**Hooks:** ${comp.hooks.join(', ')}\n`;
      }
      if (comp.issues.length > 0) {
        report += `**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:**\n${comp.issues.map(i => `  - ${i}\n`).join('')}`;
      }
      report += `\n`;
    });

    // 4. –°—Ç—Ä–∞–Ω–∏—Ü—ã
    report += `## üìÑ –°–¢–†–ê–ù–ò–¶–´ (${structure.pages.length})\n\n`;
    const pagesAnalysis = this.analyzePages(structure.pages);
    pagesAnalysis.forEach(page => {
      report += `### ${page.route}\n`;
      report += `**–§–∞–π–ª:** ${page.path}\n`;
      if (page.components.length > 0) {
        report += `**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** ${page.components.join(', ')}\n`;
      }
      if (page.dataFetching.length > 0) {
        report += `**Data Fetching:** ${page.dataFetching.join(', ')}\n`;
      }
      if (page.issues.length > 0) {
        report += `**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:**\n${page.issues.map(i => `  - ${i}\n`).join('')}`;
      }
      report += `\n`;
    });

    // 5. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
    report += `## üõ†Ô∏è –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –ò –£–¢–ò–õ–ò–¢–´ (${structure.lib.length})\n\n`;
    structure.lib.forEach(lib => {
      report += `- **${lib.name}** - ${lib.relativePath}\n`;
    });
    report += `\n`;

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += `## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –í–´–í–û–î–´\n\n`;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (apiAnalysis.some(api => api.issues.length > 0)) {
      report += `### üîß API Improvements:\n`;
      report += `- –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö endpoints\n`;
      report += `- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n`;
      report += `- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ HTTP —Å—Ç–∞—Ç—É—Å—ã\n\n`;
    }

    if (componentsAnalysis.some(comp => comp.issues.length > 0)) {
      report += `### ‚öõÔ∏è Component Improvements:\n`;
      report += `- –î–æ–±–∞–≤–∏—Ç—å key props –≤ .map() —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥\n`;
      report += `- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É async —Å–æ–±—ã—Ç–∏–π\n`;
      report += `- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å re-renders\n\n`;
    }

    report += `### üéØ Next Steps:\n`;
    report += `1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (‚ùå)\n`;
    report += `2. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚ö†Ô∏è)\n`;
    report += `3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ user flows\n`;
    report += `4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const outputPath = path.join(__dirname, 'FULL_PROJECT_ANALYSIS.txt');
    fs.writeFileSync(outputPath, report, 'utf8');
    
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:', outputPath);
    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   Prisma: ${structure.prisma.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   API: ${structure.api.length} endpoints`);
    console.log(`   Components: ${structure.components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    console.log(`   Pages: ${structure.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    console.log(`   Lib: ${structure.lib.length} —É—Ç–∏–ª–∏—Ç`);

    return report;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new DeepProjectAnalyzer();
analyzer.generateFullReport();