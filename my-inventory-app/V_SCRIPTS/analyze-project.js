// –æ–±–∑–æ—Ä–Ω—ã–π_—Å–∫—Ä–∏–ø—Ç/analyze-project.js
const fs = require('fs');
const path = require('path');

class ProjectAnalyzer {
  constructor(rootDir = process.cwd()) {
    // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–∑ –ø–∞–ø–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
    this.rootDir = path.resolve(rootDir, '..');
    this.components = [];
    this.apiRoutes = [];
    this.pages = [];
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  findFiles(dir, pattern, results = []) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      if (!fs.existsSync(dir)) {
        console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dir}`);
        return results;
      }

      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        try {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
            if (!file.startsWith('.') && file !== 'node_modules' && file !== '.next' && file !== 'V_SCRIPTS') {
              this.findFiles(filePath, pattern, results);
            }
          } else if (pattern.test(file)) {
            results.push({
              path: filePath,
              relativePath: path.relative(this.rootDir, filePath),
              name: file,
              type: this.getFileType(filePath)
            });
          }
        } catch (fileError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, fileError.message);
        }
      }
    } catch (dirError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, dirError.message);
    }
    
    return results;
  }

  getFileType(filePath) {
    if (filePath.includes('/api/')) return 'api';
    if (filePath.includes('/components/')) return 'component';
    if (filePath.includes('/app/') && (filePath.endsWith('.tsx') || filePath.endsWith('.jsx'))) return 'page';
    if (filePath.includes('/lib/')) return 'lib';
    return 'other';
  }

  // –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
  readFileContent(filePath) {
    try {
      return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`;
    }
  }

  // –ü–æ–∏—Å–∫ README —Ñ–∞–π–ª–æ–≤
  findReadmeFiles() {
    return this.findFiles(this.rootDir, /readme_.*\.md$/i);
  }

  // –ê–Ω–∞–ª–∏–∑ API —Ä–æ—É—Ç–æ–≤
  analyzeApiRoutes() {
    const apiDir = path.join(this.rootDir, 'app', 'api');
    console.log(`üîç –ò—â–µ–º API –≤: ${apiDir}`);
    
    if (!fs.existsSync(apiDir)) {
      console.log('‚ùå –ü–∞–ø–∫–∞ API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return [];
    }

    const routes = this.findFiles(apiDir, /route\.(ts|js)$/);
    console.log(`üì° –ù–∞–π–¥–µ–Ω–æ API —Ä–æ—É—Ç–æ–≤: ${routes.length}`);
    
    return routes.map(route => {
      const content = this.readFileContent(route.path);
      return {
        ...route,
        methods: this.extractMethods(content),
        endpoints: this.extractEndpoints(route.relativePath),
        summary: this.generateApiSummary(content)
      };
    });
  }

  extractMethods(content) {
    const methods = [];
    if (content.includes('export async function GET')) methods.push('GET');
    if (content.includes('export async function POST')) methods.push('POST');
    if (content.includes('export async function PATCH')) methods.push('PATCH');
    if (content.includes('export async function PUT')) methods.push('PUT');
    if (content.includes('export async function DELETE')) methods.push('DELETE');
    return methods;
  }

  extractEndpoints(relativePath) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∫ —Ä–æ—É—Ç—É –≤ endpoint
    return relativePath
      .replace(/^app\/api\//, '/api/')
      .replace(/\/route\.(ts|js)$/, '')
      .replace(/\[([^\]]+)\]/g, ':$1');
  }

  generateApiSummary(content) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    if (content.includes('CANDIDATE') && content.includes('IN_REQUEST')) {
      return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏';
    }
    if (content.includes('SOLD') && content.includes('CREDIT')) {
      return '–ü—Ä–æ–¥–∞–∂–∏ –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏';
    }
    if (content.includes('IN_STORE') && content.includes('statusProduct')) {
      return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏';
    }
    if (content.includes('createRequest') || content.includes('RequestService')) {
      return '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã';
    }
    return 'API endpoint';
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  analyzeComponents() {
    const componentsDir = path.join(this.rootDir, 'app', 'components');
    console.log(`üîç –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤: ${componentsDir}`);
    
    if (!fs.existsSync(componentsDir)) {
      console.log('‚ùå –ü–∞–ø–∫–∞ components –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return [];
    }

    const components = this.findFiles(componentsDir, /\.(tsx|jsx)$/);
    console.log(`‚öõÔ∏è –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${components.length}`);
    
    return components.map(component => {
      const content = this.readFileContent(component.path);
      return {
        ...component,
        props: this.extractProps(content),
        hooks: this.extractHooks(content),
        summary: this.generateComponentSummary(content)
      };
    });
  }

  extractProps(content) {
    const propsMatch = content.match(/interface\s+(\w+Props)\s*{([^}]*)}/);
    if (!propsMatch) return [];
    
    const propsContent = propsMatch[2];
    const propLines = propsContent.split('\n')
      .filter(line => line.includes(':') && !line.includes('//'))
      .map(line => line.trim().split(':')[0].trim());
    
    return propLines;
  }

  extractHooks(content) {
    const hooks = [];
    if (content.includes('useState')) hooks.push('useState');
    if (content.includes('useEffect')) hooks.push('useEffect');
    if (content.includes('useContext')) hooks.push('useContext');
    if (content.includes('useRouter')) hooks.push('useRouter');
    return hooks;
  }

  generateComponentSummary(content) {
    if (content.includes('ProductUnit') && content.includes('statusCard')) {
      return '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏';
    }
    if (content.includes('CategoryTree') || content.includes('Spine')) {
      return '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π';
    }
    if (content.includes('Modal') && content.includes('Request')) {
      return '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫';
    }
    if (content.includes('Inventory') && content.includes('heatmap')) {
      return '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞—Ç–∫–æ–≤';
    }
    return 'React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç';
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
  analyze() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...');
    console.log(`üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.rootDir}`);
    
    this.readmeFiles = this.findReadmeFiles();
    this.apiRoutes = this.analyzeApiRoutes();
    this.components = this.analyzeComponents();
    
    // –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ app directory
    const appDir = path.join(this.rootDir, 'app');
    this.pages = this.findFiles(appDir, /page\.(tsx|jsx)$/);

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:');
    console.log(`   üìö README —Ñ–∞–π–ª–æ–≤: ${this.readmeFiles.length}`);
    console.log(`   üöÄ API —Ä–æ—É—Ç–æ–≤: ${this.apiRoutes.length}`);
    console.log(`   ‚öõÔ∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${this.components.length}`);
    console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${this.pages.length}`);

    return this;
  }
}

module.exports = ProjectAnalyzer;