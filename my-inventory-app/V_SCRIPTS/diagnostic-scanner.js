// –æ–±–∑–æ—Ä–Ω—ã–π_—Å–∫—Ä–∏–ø—Ç/diagnostic-scanner.js
const fs = require('fs');
const path = require('path');

class DiagnosticScanner {
  constructor() {
    this.rootDir = path.resolve(__dirname, '..');
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    console.log('üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', this.rootDir);
  }

  scanProjectStructure() {
    let report = `# üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê\n\n`;
    report += `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`;
    report += `–ö–æ—Ä–µ–Ω—å: ${this.rootDir}\n\n`;

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(this.rootDir)) {
      report += `‚ùå –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n`;
      return report;
    }

    report += `‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n`;

    // 2. –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    report += `## üìÇ –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–û–†–ù–ï–í–û–ô –î–ò–†–ï–ö–¢–û–†–ò–ò\n\n`;
    
    try {
      const rootItems = fs.readdirSync(this.rootDir);
      
      rootItems.forEach(item => {
        const itemPath = path.join(this.rootDir, item);
        const stat = fs.statSync(itemPath);
        
        if (stat.isDirectory()) {
          report += `üìÅ ${item}/\n`;
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–∂–Ω—ã—Ö –ø–∞–ø–æ–∫
          if (['app', 'components', 'api', 'lib', 'prisma'].includes(item)) {
            report += this.scanDirectoryContents(itemPath, 1);
          }
        } else {
          report += `üìÑ ${item}\n`;
        }
      });
    } catch (error) {
      report += `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}\n`;
    }

    // 3. –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞–ø–∫–∏
    report += `\n## üîé –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –ü–ê–ü–û–ö\n\n`;
    
    const keyFolders = [
      'app', 'app/api', 'app/components', 'app/lib', 'prisma',
      'components', 'pages', 'src', 'lib'
    ];

    keyFolders.forEach(folder => {
      const folderPath = path.join(this.rootDir, folder);
      if (fs.existsSync(folderPath)) {
        report += `‚úÖ –ù–∞–π–¥–µ–Ω–∞: ${folder}/\n`;
        report += this.scanDirectoryContents(folderPath, 2);
      } else {
        report += `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞: ${folder}/\n`;
      }
    });

    // 4. –ò—â–µ–º –≤—Å–µ .tsx, .ts, .jsx, .js —Ñ–∞–π–ª—ã
    report += `\n## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í\n\n`;
    
    const fileTypes = {
      '.tsx': this.findFilesByExtension('.tsx'),
      '.ts': this.findFilesByExtension('.ts'), 
      '.jsx': this.findFilesByExtension('.jsx'),
      '.js': this.findFilesByExtension('.js'),
      '.prisma': this.findFilesByExtension('.prisma'),
      '.md': this.findFilesByExtension('.md')
    };

    Object.entries(fileTypes).forEach(([ext, files]) => {
      report += `${ext}: ${files.length} —Ñ–∞–π–ª–æ–≤\n`;
      if (files.length > 0 && files.length <= 10) {
        files.slice(0, 5).forEach(file => {
          report += `  - ${file}\n`;
        });
        if (files.length > 5) report += `  - ... –∏ –µ—â–µ ${files.length - 5} —Ñ–∞–π–ª–æ–≤\n`;
      }
    });

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const outputPath = path.join(__dirname, 'PROJECT_STRUCTURE_DIAGNOSTIC.txt');
    fs.writeFileSync(outputPath, report, 'utf8');
    
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª:', outputPath);
    return report;
  }

  scanDirectoryContents(dirPath, maxDepth = 2, currentDepth = 0) {
    if (currentDepth >= maxDepth) return '';

    let contents = '';
    
    try {
      const items = fs.readdirSync(dirPath);
      
      items.forEach(item => {
        const itemPath = path.join(dirPath, item);
        const stat = fs.statSync(itemPath);
        
        const indent = '  '.repeat(currentDepth + 1);
        
        if (stat.isDirectory()) {
          contents += `${indent}üìÅ ${item}/\n`;
          if (currentDepth < maxDepth - 1) {
            contents += this.scanDirectoryContents(itemPath, maxDepth, currentDepth + 1);
          }
        } else {
          contents += `${indent}üìÑ ${item}\n`;
        }
      });
    } catch (error) {
      contents += `${'  '.repeat(currentDepth + 1)}‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}\n`;
    }
    
    return contents;
  }

  findFilesByExtension(extension) {
    const files = [];
    this._findFilesByExt(this.rootDir, extension, files);
    return files.map(f => path.relative(this.rootDir, f));
  }

  _findFilesByExt(dir, extension, results) {
    try {
      if (!fs.existsSync(dir)) return;

      const items = fs.readdirSync(dir);
      
      items.forEach(item => {
        try {
          const itemPath = path.join(dir, item);
          const stat = fs.statSync(itemPath);
          
          if (stat.isDirectory()) {
            if (!item.startsWith('.') && !['node_modules', '.next', '.git'].includes(item)) {
              this._findFilesByExt(itemPath, extension, results);
            }
          } else if (item.endsWith(extension)) {
            results.push(itemPath);
          }
        } catch (e) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
        }
      });
    } catch (e) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
const scanner = new DiagnosticScanner();
scanner.scanProjectStructure();