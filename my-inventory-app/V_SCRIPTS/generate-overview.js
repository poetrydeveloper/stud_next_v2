// –æ–±–∑–æ—Ä–Ω—ã–π_—Å–∫—Ä–∏–ø—Ç/generate-overview.js
const ProjectAnalyzer = require('./analyze-project');
const fs = require('fs');

class OverviewGenerator {
  constructor(analyzer) {
    this.analyzer = analyzer;
  }

  generate() {
    let overview = `# üìä –û–ë–ó–û–† –ü–†–û–ï–ö–¢–ê - –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê–ú–ò\n`;
    overview += `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n\n`;

    // 1. –°–≤–æ–¥–∫–∞ –ø–æ README —Ñ–∞–π–ª–∞–º
    overview += this.generateReadmeSection();
    
    // 2. API —Ä–æ—É—Ç—ã
    overview += this.generateApiSection();
    
    // 3. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    overview += this.generateComponentsSection();
    
    // 4. –°—Ç—Ä–∞–Ω–∏—Ü—ã
    overview += this.generatePagesSection();
    
    // 5. –û–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    overview += this.generateArchitectureSection();

    return overview;
  }

  generateReadmeSection() {
    let section = `## üìö README –§–ê–ô–õ–´ API\n\n`;
    
    this.analyzer.readmeFiles.forEach(readme => {
      const content = this.analyzer.readFileContent(readme.path);
      const title = content.split('\n')[0].replace('#', '').trim();
      
      section += `### ${readme.name}\n`;
      section += `**–ü—É—Ç—å:** ${readme.relativePath}\n`;
      section += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${title}\n\n`;
      
      // –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
      const lines = content.split('\n').slice(1, 6).filter(line => line.trim());
      if (lines.length > 0) {
        section += `**–ö—Ä–∞—Ç–∫–æ:** ${lines.join(' ').substring(0, 200)}...\n\n`;
      }
    });

    return section;
  }

  generateApiSection() {
    let section = `## üöÄ API –†–û–£–¢–´\n\n`;
    
    this.analyzer.apiRoutes.forEach(route => {
      section += `### ${route.endpoints}\n`;
      section += `**–ú–µ—Ç–æ–¥—ã:** ${route.methods.join(', ')}\n`;
      section += `**–¢–∏–ø:** ${route.summary}\n`;
      section += `**–ü—É—Ç—å:** ${route.relativePath}\n\n`;
      
      // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–¥–∞
      const keywords = this.extractKeywords(this.analyzer.readFileContent(route.path));
      if (keywords.length > 0) {
        section += `**–ö–ª—é—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${keywords.join(', ')}\n\n`;
      }
    });

    return section;
  }

  generateComponentsSection() {
    let section = `## ‚öõÔ∏è –ö–û–ú–ü–û–ù–ï–ù–¢–´\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–ø–∫–∞–º
    const componentsByFolder = {};
    this.analyzer.components.forEach(comp => {
      const folder = path.dirname(comp.relativePath).split('/').pop();
      if (!componentsByFolder[folder]) componentsByFolder[folder] = [];
      componentsByFolder[folder].push(comp);
    });

    Object.entries(componentsByFolder).forEach(([folder, components]) => {
      section += `### üìÅ ${folder}\n`;
      
      components.forEach(comp => {
        section += `#### ${comp.name}\n`;
        section += `**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** ${comp.summary}\n`;
        if (comp.props.length > 0) {
          section += `**Props:** ${comp.props.join(', ')}\n`;
        }
        if (comp.hooks.length > 0) {
          section += `**Hooks:** ${comp.hooks.join(', ')}\n`;
        }
        section += `**–ü—É—Ç—å:** ${comp.relativePath}\n\n`;
      });
    });

    return section;
  }

  generatePagesSection() {
    let section = `## üìÑ –°–¢–†–ê–ù–ò–¶–´\n\n`;
    
    this.analyzer.pages.forEach(page => {
      const content = this.analyzer.readFileContent(page.path);
      section += `### ${page.relativePath}\n`;
      
      // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const titleMatch = content.match(/<h1[^>]*>(.*?)<\/h1>/);
      if (titleMatch) {
        section += `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${titleMatch[1]}\n`;
      }
      
      // –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const imports = this.extractImports(content);
      if (imports.length > 0) {
        section += `**–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:** ${imports.join(', ')}\n`;
      }
      
      section += `\n`;
    });

    return section;
  }

  generateArchitectureSection() {
    let section = `## üèó –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´\n\n`;

    section += `### –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:\n`;
    section += `- **ProductUnit** - —Ç–æ–≤–∞—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç—å)\n`;
    section += `- **Product** - —Ç–æ–≤–∞—Ä (–∫–∞—Ç–∞–ª–æ–≥)\n`;
    section += `- **Category** - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n`;
    section += `- **Spine** - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n`;
    section += `- **Supplier** - –ø–æ—Å—Ç–∞–≤—â–∏–∫\n`;
    section += `- **Customer** - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å\n\n`;

    section += `### –°—Ç–∞—Ç—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å ProductUnit:\n`;
    section += `**Card Status:** CLEAR ‚Üí CANDIDATE ‚Üí IN_REQUEST ‚Üí IN_DELIVERY ‚Üí ARRIVED ‚Üí IN_STORE\n`;
    section += `**Physical Status:** IN_STORE ‚Üî SOLD/CREDIT (—Å –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏)\n\n`;

    section += `### –ö–ª—é—á–µ–≤—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã:\n`;
    section += `1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚Üí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ‚Üí –ó–∞—è–≤–∫–∞ ‚Üí –ü–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ü—Ä–æ–¥–∞–∂–∞\n`;
    section += `2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ SPROUTED —Ä–æ–¥–∏—Ç–µ–ª—è\n`;
    section += `3. –í–æ–∑–≤—Ä–∞—Ç—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏\n`;
    section += `4. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏\n\n`;

    return section;
  }

  extractKeywords(content) {
    const keywords = [
      'CANDIDATE', 'IN_REQUEST', 'SPROUTED', 'IN_STORE', 'SOLD', 'CREDIT',
      'createRequest', 'delivery', 'sale', 'return', 'revert', 'inventory',
      'heatmap', 'stock', 'supplier', 'customer', 'category', 'spine'
    ];
    
    return keywords.filter(keyword => 
      content.includes(keyword) || content.includes(keyword.toLowerCase())
    );
  }

  extractImports(content) {
    const importMatches = content.matchAll(/from\s+['"]([^'"]+)['"]/g);
    const imports = Array.from(importMatches).map(match => match[1]);
    
    return imports.filter(imp => 
      imp.includes('/components/') || imp.includes('@/components')
    ).map(imp => {
      const parts = imp.split('/');
      return parts[parts.length - 1];
    });
  }

  saveToFile(content, filename = 'project-overview.txt') {
    fs.writeFileSync(path.join(__dirname, filename), content, 'utf8');
    console.log(`‚úÖ –û–±–∑–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new ProjectAnalyzer();
analyzer.analyze();

const generator = new OverviewGenerator(analyzer);
const overview = generator.generate();
generator.saveToFile(overview);

console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–∑–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');