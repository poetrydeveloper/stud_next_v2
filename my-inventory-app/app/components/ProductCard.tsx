// app/components/ProductCard.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function ProductCard({ product }) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  console.log("üîÑ ProductCard —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è:", {
    productId: product.id,
    productName: product.name,
    spineId: product.spineId,
    spineName: product.spine?.name,
    hasSpine: !!product.spineId,
    category: product.category?.name,
    brand: product.brand?.name
  });

  const handleCreateUnit = async () => {
    console.log("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ProductUnit –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:", {
      productId: product.id,
      productName: product.name
    });
    
    setLoading(true);
    setError("");

    try {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...");
      const res = await fetch("/api/product-units/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ productId: product.id }),
      });

      console.log("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:", {
        status: res.status,
        statusText: res.statusText,
        ok: res.ok,
        url: res.url
      });

      const contentType = res.headers.get("content-type") || "";
      console.log("üìÑ Content-Type –æ—Ç–≤–µ—Ç–∞:", contentType);

      if (!contentType.includes("application/json")) {
        const textResponse = await res.text();
        console.error("‚ùå –û—Ç–≤–µ—Ç –Ω–µ JSON, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:", textResponse.substring(0, 200));
        throw new Error("Unexpected response, probably HTML (404 or redirect).");
      }

      const data = await res.json();
      console.log("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API:", data);

      if (!data.ok) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:", data.error);
        throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞");
      }

      console.log("‚úÖ –£—Å–ø–µ—Ö! ProductUnit —Å–æ–∑–¥–∞–Ω:", {
        unitId: data.data.id,
        serialNumber: data.data.serialNumber
      });
      
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ ProductUnit
      router.push(`/product-units/${data.data.id}`);
      
    } catch (err: any) {
      console.error("üí• –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ProductUnit:", {
        error: err.message,
        stack: err.stack
      });
      setError(err.message);
    } finally {
      console.log("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è");
      setLoading(false);
    }
  };

  const mainImage = product.images?.find((img) => img.isMain) || product.images?.[0];

  return (
    <div className="bg-white rounded shadow p-4 flex flex-col justify-between">
      {mainImage && (
        <img
          src={mainImage.path}
          alt={mainImage.filename}
          className="w-full h-40 object-cover rounded mb-2"
        />
      )}
      <h2 className="text-lg font-semibold">{product.name}</h2>
      <p>–ö–æ–¥: {product.code}</p>
      <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category?.name || "-"}</p>
      <p>–ë—Ä–µ–Ω–¥: {product.brand?.name || "-"}</p>
      <p>–°–ø–∞–π–Ω: {product.spine?.name || "-"}</p>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
      <div className="mt-2 p-2 bg-gray-100 rounded text-xs">
        <p>ID: {product.id} | SpineID: {product.spineId || "–Ω–µ—Ç"}</p>
        <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {product.images?.length || 0}</p>
      </div>

      {error && (
        <div className="mt-2 p-2 bg-red-100 border border-red-300 rounded">
          <p className="text-red-600 text-sm font-semibold">–û—à–∏–±–∫–∞:</p>
          <p className="text-red-600 text-sm">{error}</p>
        </div>
      )}

      <div className="mt-4 flex justify-between">
        <button
          onClick={handleCreateUnit}
          disabled={loading}
          className={`px-3 py-1 rounded text-sm ${
            loading 
              ? "bg-gray-400 cursor-not-allowed text-gray-700" 
              : "bg-purple-500 hover:bg-purple-600 text-white"
          }`}
        >
          {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞"}
        </button>

        <a
          href={`/products/${product.id}/edit`}
          className="text-yellow-600 text-sm hover:underline"
        >
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </a>
      </div>
    </div>
  );
}