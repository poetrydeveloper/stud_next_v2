// app/components/CandidateUnitsGrid.tsx
"use client";

import { CandidateUnit } from "@/types/product-unit";
import CandidateUnitCard from "./CandidateUnitCard";
import { SpineCardService } from "@/app/lib/spineCardService";

interface CandidateUnitsGridProps {
  units: CandidateUnit[];
  onRequestCreated?: () => void;
}

export default function CandidateUnitsGrid({ units, onRequestCreated }: CandidateUnitsGridProps) {
  console.log("üîç [GRID] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, units:", units?.length);

  if (!units || units.length === 0) return null;

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –° –£–°–ò–õ–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
  const handleAddToRequest = async (unitId: number, quantity: number, pricePerUnit: number) => {
    console.log("üéØ [GRID] === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–ö–ò ===");
    console.log("üéØ [GRID] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", { 
      unitId, 
      quantity, 
      pricePerUnit,
      typeOfPrice: typeof pricePerUnit,
      isNaN: isNaN(pricePerUnit),
      isFinite: isFinite(pricePerUnit)
    });
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–´ - –î–ï–¢–ê–õ–¨–ù–ê–Ø
    if (pricePerUnit === undefined) {
      console.error("‚ùå [GRID] –¶–µ–Ω–∞ = undefined!");
      SpineCardService.showNotification("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ (undefined)", true);
      return;
    }

    if (pricePerUnit === null) {
      console.error("‚ùå [GRID] –¶–µ–Ω–∞ = null!");
      SpineCardService.showNotification("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ (null)", true);
      return;
    }

    if (isNaN(pricePerUnit)) {
      console.error("‚ùå [GRID] –¶–µ–Ω–∞ = NaN!");
      SpineCardService.showNotification("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ —á–∏—Å–ª–æ (NaN)", true);
      return;
    }

    if (!isFinite(pricePerUnit)) {
      console.error("‚ùå [GRID] –¶–µ–Ω–∞ –Ω–µ –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ:", pricePerUnit);
      SpineCardService.showNotification("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ", true);
      return;
    }

    if (pricePerUnit <= 0) {
      console.error("‚ùå [GRID] –¶–µ–Ω–∞ <= 0:", pricePerUnit);
      SpineCardService.showNotification("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞", true);
      return;
    }

    if (quantity < 1) {
      console.error("‚ùå [GRID] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ:", quantity);
      SpineCardService.showNotification("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", true);
      return;
    }
    
    console.log("‚úÖ [GRID] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º SpineCardService...");
    
    try {
      console.log("üîÑ [GRID] –í—ã–∑—ã–≤–∞–µ–º SpineCardService.createRequest...");
      const result = await SpineCardService.createRequest(unitId, quantity, pricePerUnit);
      
      console.log("üì¶ [GRID] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç SpineCardService:", result);
      
      if (result.success) {
        console.log("‚úÖ [GRID] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        SpineCardService.showNotification(
          quantity === 1 
            ? "‚úÖ –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞" 
            : `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ ${quantity} –µ–¥–∏–Ω–∏—Ü —Å–æ–∑–¥–∞–Ω–∞`
        );
        
        if (onRequestCreated) {
          console.log("üîÑ [GRID] –í—ã–∑—ã–≤–∞–µ–º onRequestCreated callback...");
          onRequestCreated();
        }
      } else {
        console.error("‚ùå [GRID] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", result.error);
        SpineCardService.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`, true);
      }
    } catch (error: any) {
      console.error("üí• [GRID] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      SpineCardService.showNotification("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏", true);
    }
    
    console.log("üéØ [GRID] === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–ö–ò ===");
  };

  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-6 text-gray-900">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {units.map((unit) => (
          <CandidateUnitCard 
            key={unit.id} 
            unit={unit}
            onAddToRequest={handleAddToRequest}
          />
        ))}
      </div>
    </div>
  );
}