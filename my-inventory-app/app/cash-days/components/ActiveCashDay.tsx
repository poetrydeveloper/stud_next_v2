// app/cash-days/components/ActiveCashDay.tsx
"use client";
import { useState, useEffect } from "react";
import { CashDay } from './types';
import { cashDayApi } from './helpers/cashDayApi';
import ActiveCashDayHeader from './ActiveCashDayHeader';
import CashEventItem from './CashEventItem';
import NoCashDayState from './NoCashDayState';
import LoadingState from './LoadingState';

export default function ActiveCashDay() {
  const [cashDay, setCashDay] = useState<CashDay | null>(null);
  const [loading, setLoading] = useState(true);
  const [isOpening, setIsOpening] = useState(false);
  const [isClosing, setIsClosing] = useState(false);

  useEffect(() => {
    loadCurrentCashDay();
  }, []);

  const loadCurrentCashDay = async () => {
    try {
      const currentCashDay = await cashDayApi.getCurrent();
      setCashDay(currentCashDay);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Å–æ–≤–æ–≥–æ –¥–Ω—è:", error);
      setCashDay(null);
    } finally {
      setLoading(false);
    }
  };

  const openCashDay = async () => {
    try {
      setIsOpening(true);
      const success = await cashDayApi.open();
      if (success) {
        await loadCurrentCashDay();
      } else {
        alert("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω—è");
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    } finally {
      setIsOpening(false);
    }
  };

  const closeCashDay = async () => {
    if (!cashDay || !confirm("–ó–∞–∫—Ä—ã—Ç—å –∫–∞—Å—Å–æ–≤—ã–π –¥–µ–Ω—å? –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")) {
      return;
    }

    try {
      setIsClosing(true);
      const success = await cashDayApi.close(cashDay.id);
      if (success) {
        await loadCurrentCashDay();
        alert("–ö–∞—Å—Å–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–∫—Ä—ã—Ç!");
      } else {
        alert("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–Ω—è");
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    } finally {
      setIsClosing(false);
    }
  };

  const handleReturn = async (eventId: number, productUnitId: number, productName: string) => {
    const returnReason = prompt(`–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è "${productName}":`, "–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞");
    
    if (!returnReason) return;

    try {
      const success = await cashDayApi.returnProduct(productUnitId, returnReason);
      if (success) {
        alert("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!");
        await loadCurrentCashDay();
      } else {
        alert("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞");
    }
  };

  if (loading) {
    return <LoadingState />;
  }

  if (!cashDay) {
    return <NoCashDayState isOpening={isOpening} onOpen={openCashDay} />;
  }

  const calculatedTotal = cashDay.events.reduce((sum, event) => sum + event.amount, 0);

  return (
    <div className="space-y-6">
      <ActiveCashDayHeader
        cashDay={cashDay}
        calculatedTotal={calculatedTotal}
        isClosing={isClosing}
        onClose={closeCashDay}
        onReload={loadCurrentCashDay}
      />

      {/* –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è */}
      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
        <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">
            üìã –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–Ω—è ({cashDay.events.length})
          </h3>
        </div>

        <div className="divide-y divide-gray-200">
          {cashDay.events.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-4xl mb-2">üì≠</div>
              <p className="text-gray-500">–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
              <p className="text-sm text-gray-400 mt-1">
                –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–æ–¥–∞–∂—É
              </p>
            </div>
          ) : (
            cashDay.events
              .slice() // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
              .reverse() // –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (–Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
              .map((event) => (
                <CashEventItem
                  key={event.id}
                  event={event}
                  onReturn={handleReturn}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
}