// app/cash-days/components/ExportSalesButton.tsx
"use client";

import { useState } from "react";

interface ExportSalesButtonProps {
  cashDayId: number;
}

export default function ExportSalesButton({ cashDayId }: ExportSalesButtonProps) {
  const [exporting, setExporting] = useState(false);

  const exportToExcelFormat = async () => {
    try {
      setExporting(true);
      
      const response = await fetch("/api/cash-days/current/export");
      const result = await response.json();
      
      if (!result.ok) {
        alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + result.error);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ IN_STORE –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–æ—Å—Ç–∞—Ç–æ–∫"
      const inventoryResponse = await fetch("/api/product-units?status=IN_STORE");
      const inventoryData = await inventoryResponse.json();
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞
      const inventoryMap = new Map();
      if (inventoryData.ok) {
        inventoryData.data.forEach((unit: any) => {
          const code = unit.productCode || unit.product?.code;
          if (code) {
            inventoryMap.set(code, (inventoryMap.get(code) || 0) + 1);
          }
        });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const currentDate = new Date().toLocaleDateString('ru-RU');
      
      // –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
      let csvContent = `${currentDate}\t\t\t\t\t\t\t\n`;
      csvContent += "code\t–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\t\t\t\t—Ü.–ø—Ä.\t–æ—Å—Ç–∞—Ç–æ–∫\n";
      
      // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
      const salesData = result.data.sales.filter((sale: any) => sale.–∫–æ–¥ && sale.–Ω–æ–º–µ—Ä !== result.data.sales.length);
      
      salesData.forEach((sale: any) => {
        const –æ—Å—Ç–∞—Ç–æ–∫ = inventoryMap.get(sale.–∫–æ–¥) || 0;
        csvContent += `${sale.–∫–æ–¥}\t${sale.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ}\t\t\t\t${sale.—Ü–µ–Ω–∞}\t${–æ—Å—Ç–∞—Ç–æ–∫}\n`;
      });

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob(["\uFEFF" + csvContent], { type: "text/tab-separated-values;charset=utf-8;" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      
      const date = new Date().toISOString().split('T')[0];
      link.setAttribute("href", url);
      link.setAttribute("download", `–ø—Ä–æ–¥–∞–∂–∏_${date}.tsv`);
      link.style.visibility = "hidden";
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      alert(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${salesData.length} –ø—Ä–æ–¥–∞–∂`);
      
    } catch (error) {
      console.error("Export error:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ");
    } finally {
      setExporting(false);
    }
  };

  return (
    <button
      onClick={exportToExcelFormat}
      disabled={exporting}
      className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 transition-colors flex items-center space-x-2"
    >
      {exporting ? (
        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
      ) : (
        <span>üìä</span>
      )}
      <span>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ñ–æ—Ä–º–∞—Ç</span>
    </button>
  );
}