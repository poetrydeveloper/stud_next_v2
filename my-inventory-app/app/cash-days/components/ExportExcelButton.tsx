// app/cash-days/components/ExportExcelButton.tsx
"use client";

import { useState } from "react";
import * as XLSX from 'xlsx';

interface ExportExcelButtonProps {
  cashDayId: number;
}

export default function ExportExcelButton({ cashDayId }: ExportExcelButtonProps) {
  const [exporting, setExporting] = useState(false);

  const exportToExcel = async () => {
    try {
      setExporting(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
      const response = await fetch("/api/cash-days/current/export");
      const result = await response.json();

      if (!result.ok) {
        alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + result.error);
        return;
      }

      if (!result.data.sales || result.data.sales.length === 0) {
        alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ IN_STORE
      const inventoryResponse = await fetch("/api/product-units?status=IN_STORE");
      const inventoryData = await inventoryResponse.json();
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –æ—Å—Ç–∞—Ç–∫–æ–≤
      const inventoryMap = new Map();
      if (inventoryData.ok && inventoryData.data) {
        inventoryData.data.forEach((item: any) => {
          inventoryMap.set(item.code, item.count);
        });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
      const currentDate = new Date().toLocaleDateString('ru-RU');
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã - 6 –∫–æ–ª–æ–Ω–æ–∫: code, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, 4 –ø—É—Å—Ç—ã–µ, —Ü.–ø—Ä., –æ—Å—Ç–∞—Ç–æ–∫
      const headerRow = ['code', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '', '', '', '', '—Ü.–ø—Ä.', '–æ—Å—Ç–∞—Ç–æ–∫'];
      
      // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å)
      const salesData = result.data.sales.filter((sale: any) => 
        sale.–∫–æ–¥ && sale.–∫–æ–¥ !== '–ë–ï–ó_–ö–û–î–ê' && sale.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ !== '–ò–¢–û–ì–û:'
      );

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
      const excelData = [
        [currentDate], // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–∞—Ç–∞
        [], // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        headerRow, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (8 –∫–æ–ª–æ–Ω–æ–∫)
        ...salesData.map((sale: any) => [
          sale.–∫–æ–¥,                                    // A - code
          sale.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,                          // B - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
          '', '', '', '',                            // C,D,E,F - 4 –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
          sale.—Ü–µ–Ω–∞,                                  // G - —Ü.–ø—Ä. (–ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "—Ü.–ø—Ä.")
          inventoryMap.get(sale.–∫–æ–¥) || 0            // H - –æ—Å—Ç–∞—Ç–æ–∫ (–ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–æ—Å—Ç–∞—Ç–æ–∫")
        ])
      ];

      // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
      const wb = XLSX.utils.book_new();
      
      // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
      const ws = XLSX.utils.aoa_to_sheet(excelData);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
      const colWidths = [
        { wch: 15 }, // A - code
        { wch: 40 }, // B - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        { wch: 5 },  // C - –ø—É—Å—Ç–∞—è
        { wch: 5 },  // D - –ø—É—Å—Ç–∞—è
        { wch: 5 },  // E - –ø—É—Å—Ç–∞—è
        { wch: 5 },  // F - –ø—É—Å—Ç–∞—è
        { wch: 10 }, // G - —Ü.–ø—Ä.
        { wch: 10 }  // H - –æ—Å—Ç–∞—Ç–æ–∫
      ];
      ws['!cols'] = colWidths;

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
      XLSX.utils.book_append_sheet(wb, ws, "–ü—Ä–æ–¥–∞–∂–∏");

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
      const date = new Date().toISOString().split('T')[0];
      XLSX.writeFile(wb, `–ø—Ä–æ–¥–∞–∂–∏_${date}.xlsx`);
      
      alert(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${salesData.length} –ø—Ä–æ–¥–∞–∂ –≤ Excel`);
      
    } catch (error) {
      console.error("‚ùå Export error:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ");
    } finally {
      setExporting(false);
    }
  };

  return (
    <button
      onClick={exportToExcel}
      disabled={exporting}
      className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors flex items-center space-x-2"
    >
      {exporting ? (
        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
      ) : (
        <span>üìä</span>
      )}
      <span>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</span>
    </button>
  );
}