// app/cash-days/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { CashDay } from '@/app/lib/types/cash';
import CashDayCard from '@/app/components/CashDayCard';

export default function CashDaysPage() {
  const [cashDays, setCashDays] = useState<CashDay[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [creating, setCreating] = useState(false);

  const loadCashDays = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Å–æ–≤—ã—Ö –¥–Ω–µ–π...');
      
      const response = await fetch('/api/cash-days');
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
      setCashDays(data);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const createTodayCashDay = async () => {
    try {
      setCreating(true);
      setError(null);
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –¥–Ω—è...');
      
      const response = await fetch('/api/cash-days', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: new Date().toISOString().split('T')[0]
        })
      });

      console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', errorData);
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Å–æ–≤–æ–≥–æ –¥–Ω—è');
      }

      const newDay = await response.json();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–Ω—å:', newDay);
      await loadCashDays();
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω—è');
    } finally {
      setCreating(false);
    }
  };

  useEffect(() => {
    loadCashDays();
  }, []);

  const getTodayCashDay = () => {
    const today = new Date().toISOString().split('T')[0];
    return cashDays.find(day => day.date.startsWith(today) && !day.isClosed);
  };

  const todayCashDay = getTodayCashDay();

  if (loading) {
    return (
      <div className="p-6">
        <div className="text-center text-gray-500">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Å–æ–≤—ã—Ö –¥–Ω–µ–π...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
          <h3 className="text-red-800 font-semibold mb-2">–û—à–∏–±–∫–∞</h3>
          <p className="text-red-600">{error}</p>
        </div>
        <div className="flex gap-4">
          <button
            onClick={loadCashDays}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
          {!todayCashDay && (
            <button
              onClick={createTodayCashDay}
              disabled={creating}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:bg-gray-400"
            >
              {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å'}
            </button>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">–ö–∞—Å—Å–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª</h1>
        <div className="flex gap-4">
          {!todayCashDay && (
            <button
              onClick={createTodayCashDay}
              disabled={creating}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:bg-gray-400"
            >
              {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Å—Å–æ–≤—ã–π –¥–µ–Ω—å'}
            </button>
          )}
          <button
            onClick={loadCashDays}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å */}
      {todayCashDay && (
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4 text-green-600">–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å</h2>
          <CashDayCard cashDay={todayCashDay} />
        </div>
      )}

      {/* –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ */}
      <div>
        <h2 className="text-xl font-semibold mb-4">–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏</h2>
        <div className="grid gap-4">
          {cashDays
            .filter(day => !day.date.startsWith(new Date().toISOString().split('T')[0]) || day.isClosed)
            .map((cashDay) => (
              <CashDayCard key={cashDay.id} cashDay={cashDay} />
            ))}
        </div>
      </div>

      {cashDays.length === 0 && (
        <div className="text-center text-gray-500 py-8 border border-dashed border-gray-300 rounded-lg">
          <div className="text-2xl mb-2">üìã</div>
          <p className="text-lg font-medium mb-2">–ù–µ—Ç –∫–∞—Å—Å–æ–≤—ã—Ö –¥–Ω–µ–π</p>
          <p className="text-sm mb-4">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞—Å—Å–æ–≤—ã–π –¥–µ–Ω—å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
          <button
            onClick={createTodayCashDay}
            disabled={creating}
            className="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 disabled:bg-gray-400"
          >
            {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å'}
          </button>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {process.env.NODE_ENV === 'development' && cashDays.length > 0 && (
        <div className="mt-8 p-4 bg-gray-50 rounded-lg">
          <h3 className="text-sm font-medium text-gray-700 mb-2">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
          <p className="text-xs text-gray-600">
            –í—Å–µ–≥–æ –¥–Ω–µ–π: {cashDays.length} | 
            –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π: {todayCashDay ? '–¥–∞' : '–Ω–µ—Ç'} | 
            –ó–∞–∫—Ä—ã—Ç—ã—Ö: {cashDays.filter(d => d.isClosed).length}
          </p>
        </div>
      )}
    </div>
  );
}
