"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import VisualTree from "@/app/components/super_add/VisualTree";
import SuperAddWizard from "@/app/components/super_add/SuperAddWizard";
import { SelectedNode } from "../types/super-add";

export default function SuperAddPage() {
  const router = useRouter();
  const [selectedNode, setSelectedNode] = useState<SelectedNode | null>(null);
  const [showWizard, setShowWizard] = useState(false);
  const [wizardMode, setWizardMode] = useState<'category' | 'spine' | 'product' | null>(null);
  const [refreshTree, setRefreshTree] = useState(0); // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
  const handleCreateCategory = () => {
    setWizardMode('category');
    setShowWizard(true);
  };

  const handleCreateSpine = () => {
    if (!selectedNode || selectedNode.type !== 'category') {
      alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Spine");
      return;
    }
    setWizardMode('spine');
    setShowWizard(true);
  };

  const handleCreateProduct = () => {
    if (!selectedNode || (selectedNode.type !== 'category' && selectedNode.type !== 'spine')) {
      alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ Spine –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞");
      return;
    }
    setWizardMode('product');
    setShowWizard(true);
  };

  const handleWizardClose = () => {
    setShowWizard(false);
    setWizardMode(null);
  };

  const handleWizardSuccess = () => {
    setShowWizard(false);
    setWizardMode(null);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    setRefreshTree(prev => prev + 1);
    alert("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!");
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const handleNodeSelect = (node: SelectedNode) => {
    setSelectedNode(node);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–∑–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getSelectedNodeInfo = () => {
    if (!selectedNode) return null;

    const baseInfo = `–í—ã–±—Ä–∞–Ω–æ: ${selectedNode.name}`;
    
    switch (selectedNode.type) {
      case 'category':
        return `${baseInfo} (üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è)`;
      case 'spine':
        return `${baseInfo} (üî∑ Spine)`;
      case 'product':
        const productInfo = selectedNode.data as any;
        return `${baseInfo} (üü¢ –¢–æ–≤–∞—Ä${productInfo?.code ? ` - ${productInfo.code}` : ''})`;
      default:
        return baseInfo;
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">SUPER ADD</h1>
          <p className="text-gray-600 mt-2">
            –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          </p>
        </div>
        <button
          onClick={() => router.back()}
          className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
        >
          –ù–∞–∑–∞–¥
        </button>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="bg-white rounded-lg shadow-sm border p-4 mb-6">
        <div className="flex flex-wrap gap-3 items-center">
          <span className="font-medium text-gray-700">–°–æ–∑–¥–∞—Ç—å:</span>
          
          <button
            onClick={handleCreateCategory}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
          >
            üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—é
          </button>
          
          <button
            onClick={handleCreateSpine}
            className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors"
            disabled={!selectedNode || selectedNode.type !== 'category'}
          >
            üî∑ Spine
          </button>
          
          <button
            onClick={handleCreateProduct}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors"
            disabled={!selectedNode || selectedNode.type === 'product'}
          >
            üü¢ –¢–æ–≤–∞—Ä
          </button>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–∑–ª–µ */}
          {selectedNode && (
            <div className="ml-4 px-3 py-2 bg-yellow-100 border border-yellow-300 rounded text-sm">
              <div className="font-medium text-yellow-800">
                {getSelectedNodeInfo()}
              </div>
              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ node_index –µ—Å–ª–∏ –µ—Å—Ç—å */}
              {selectedNode.data?.node_index && (
                <div className="text-xs text-yellow-600 mt-1">
                  ID: {selectedNode.data.node_index}
                </div>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ */}
          <button
            onClick={() => setRefreshTree(prev => prev + 1)}
            className="ml-auto bg-gray-100 text-gray-700 px-3 py-2 rounded hover:bg-gray-200 transition-colors text-sm"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
          </button>
        </div>
      </div>

      {/* –í–∏–∑—É–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">–î–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</h2>
          <div className="text-sm text-gray-500">
            {selectedNode ? `–í—ã–±—Ä–∞–Ω: ${selectedNode.name}` : '–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π'}
          </div>
        </div>
        <VisualTree 
          key={refreshTree} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          onNodeSelect={handleNodeSelect}
          selectedNode={selectedNode}
        />
      </div>

      {/* –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è */}
      {showWizard && wizardMode && (
        <SuperAddWizard
          mode={wizardMode}
          selectedNode={selectedNode}
          onClose={handleWizardClose}
          onSuccess={handleWizardSuccess}
        />
      )}
    </div>
  );
}