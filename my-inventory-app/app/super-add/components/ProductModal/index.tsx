// app/super-add/components/ProductModal/index.tsx
'use client';

import { useState } from 'react';
import { ModalProps } from '../../types';
import { useBrandsSuppliers } from './hooks/useBrandsSuppliers';
import { useCreateEntities } from './hooks/useCreateEntities';
import { useImageUpload } from './hooks/useImageUpload';
import { ImageUploadSection } from './components/ImageUploadSection';

interface ProductModalProps extends ModalProps {
  selectedPath?: string; // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ü–†–û–ü–°
}

export default function ProductModal({ onClose, onSubmit, selectedPath }: ProductModalProps) {
  console.log('üîç ProductModal: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  const [code, setCode] = useState('');
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [brandId, setBrandId] = useState<number | ''>('');
  const [supplierId, setSupplierId] = useState<number | ''>('');
  const [newBrand, setNewBrand] = useState('');
  const [newSupplier, setNewSupplier] = useState('');
  const [loading, setLoading] = useState(false);
  const [creatingBrand, setCreatingBrand] = useState(false);
  const [creatingSupplier, setCreatingSupplier] = useState(false);
  const [errors, setErrors] = useState<{ 
    code?: string; 
    name?: string;
    newBrand?: string;
    newSupplier?: string;
  }>({});

  const { brands, suppliers, reload } = useBrandsSuppliers();
  const { createBrand, createSupplier } = useCreateEntities(reload);
  const { images, previewUrls, handleImageSelect, removeImage, clearImages } = useImageUpload();

  const handleCreateBrand = async () => {
    console.log('üîÑ ProductModal: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞');
    if (!newBrand.trim()) {
      setErrors(prev => ({ ...prev, newBrand: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞' }));
      return;
    }

    if (newBrand.trim().length < 2) {
      setErrors(prev => ({ ...prev, newBrand: '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' }));
      return;
    }

    setCreatingBrand(true);
    try {
      const createdBrandId = await createBrand(newBrand.trim());
      await reload();
      setBrandId(createdBrandId);
      setNewBrand('');
      setErrors(prev => ({ ...prev, newBrand: undefined }));
      console.log('‚úÖ ProductModal: –ë—Ä–µ–Ω–¥ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω');
    } catch (error) {
      console.error('‚ùå ProductModal: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞: ${error.message}`);
    } finally {
      setCreatingBrand(false);
    }
  };

  const handleCreateSupplier = async () => {
    console.log('üîÑ ProductModal: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
    if (!newSupplier.trim()) {
      setErrors(prev => ({ ...prev, newSupplier: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' }));
      return;
    }

    if (newSupplier.trim().length < 2) {
      setErrors(prev => ({ ...prev, newSupplier: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' }));
      return;
    }

    setCreatingSupplier(true);
    try {
      const createdSupplierId = await createSupplier(newSupplier.trim());
      await reload();
      setSupplierId(createdSupplierId);
      setNewSupplier('');
      setErrors(prev => ({ ...prev, newSupplier: undefined }));
      console.log('‚úÖ ProductModal: –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω');
    } catch (error) {
      console.error('‚ùå ProductModal: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${error.message}`);
    } finally {
      setCreatingSupplier(false);
    }
  };

  const validateForm = (): boolean => {
    console.log('üîÑ ProductModal: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã');
    const newErrors: typeof errors = {};
    
    if (!code.trim()) {
      newErrors.code = '–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (code.trim().length < 2) {
      newErrors.code = '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (name.trim().length < 2) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üîÑ ProductModal: –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã', {
        selectedPath, imagesCount: images.length
    });
    
    if (!validateForm()) return;

    // –ü–†–û–í–ï–†–ö–ê –ß–¢–û –í–´–ë–†–ê–ù SPINE
    if (!selectedPath) {
        alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ spine –≤ –¥–µ—Ä–µ–≤–µ!');
        return;
    }

    setLoading(true);
    try {
        // –ü–û–õ–£–ß–ê–ï–ú SPINE ID –ò–ó –í–´–ë–†–ê–ù–ù–û–ì–û –ü–£–¢–ò
        let spineId: number | undefined;
        
        // –ò—â–µ–º spine –ø–æ selectedPath
        const spineResponse = await fetch(`/api/structure/find-spine?path=${encodeURIComponent(selectedPath)}`);
        const spineData = await spineResponse.json();
        
        if (spineData.ok && spineData.data) {
        spineId = spineData.data.id;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω spine:', spineData.data);
        } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ spine –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ spine.');
        }

        // –°–æ–∑–¥–∞–µ–º FormData
        const formData = new FormData();
        formData.append('code', code.trim());
        formData.append('name', name.trim());
        formData.append('description', description.trim());
        formData.append('spineId', spineId.toString()); // ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
        
        if (brandId) formData.append('brandId', brandId.toString());
        if (supplierId) formData.append('supplierId', supplierId.toString());
        
        images.forEach(image => {
        formData.append('images', image);
        });

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ FormData —Å–æ spineId:', spineId);

        const response = await fetch('/api/products', {
        method: 'POST',
        body: formData,
        });

        const result = await response.json();
        
        if (!response.ok) {
        throw new Error(result.error || `HTTP error! status: ${response.status}`);
        }

        if (result.ok) {
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        clearImages();
        setCode('');
        setName('');
        setDescription('');
        setBrandId('');
        setSupplierId('');
        onClose();
        
        if (confirm(`–ü—Ä–æ–¥—É–∫—Ç "${name}" —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º?`)) {
            window.location.href = '/products';
        }
        } else {
        throw new Error(result.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        setLoading(false);
    }
    };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h3 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–¥—É–∫—Ç</h3>
        <form onSubmit={handleSubmit}>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ê—Ä—Ç–∏–∫—É–ª/–ö–æ–¥ *
              </label>
              <input
                type="text"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: FR75510"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 ${
                  errors.code 
                    ? 'border-red-500 focus:ring-red-500' 
                    : 'border-gray-300 focus:ring-purple-500'
                }`}
                autoFocus
              />
              {errors.code && (
                <p className="text-red-500 text-sm mt-1">{errors.code}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *
              </label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–ª—é—á —Ä–æ–∂–∫–æ–≤—ã–π 10–º–º"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 ${
                  errors.name 
                    ? 'border-red-500 focus:ring-red-500' 
                    : 'border-gray-300 focus:ring-purple-500'
                }`}
              />
              {errors.name && (
                <p className="text-red-500 text-sm mt-1">{errors.name}</p>
              )}
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
            />
          </div>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
          <ImageUploadSection
            images={images}
            previewUrls={previewUrls}
            onImageSelect={handleImageSelect}
            onRemoveImage={removeImage}
          />

          {/* –ë—Ä–µ–Ω–¥ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            {/* –ë—Ä–µ–Ω–¥ —Å–µ–∫—Ü–∏—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ë—Ä–µ–Ω–¥
              </label>
              <select
                value={brandId}
                onChange={(e) => setBrandId(e.target.value ? Number(e.target.value) : '')}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥</option>
                {brands.map(brand => (
                  <option key={brand.id} value={brand.id}>
                    {brand.name}
                  </option>
                ))}
              </select>
              
              <div className="mt-2">
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newBrand}
                    onChange={(e) => setNewBrand(e.target.value)}
                    placeholder="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥"
                    className={`flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 ${
                      errors.newBrand 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                  <button
                    type="button"
                    onClick={handleCreateBrand}
                    disabled={creatingBrand || !newBrand.trim()}
                    className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {creatingBrand ? '...' : '+'}
                  </button>
                </div>
                {errors.newBrand && (
                  <p className="text-red-500 text-sm mt-1">{errors.newBrand}</p>
                )}
              </div>
            </div>

            {/* –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–µ–∫—Ü–∏—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ—Å—Ç–∞–≤—â–∏–∫
              </label>
              <select
                value={supplierId}
                onChange={(e) => setSupplierId(e.target.value ? Number(e.target.value) : '')}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</option>
                {suppliers.map(supplier => (
                  <option key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </option>
                ))}
              </select>
              
              <div className="mt-2">
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newSupplier}
                    onChange={(e) => setNewSupplier(e.target.value)}
                    placeholder="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                    className={`flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 ${
                      errors.newSupplier 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                  <button
                    type="button"
                    onClick={handleCreateSupplier}
                    disabled={creatingSupplier || !newSupplier.trim()}
                    className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {creatingSupplier ? '...' : '+'}
                  </button>
                </div>
                {errors.newSupplier && (
                  <p className="text-red-500 text-sm mt-1">{errors.newSupplier}</p>
                )}
              </div>
            </div>
          </div>

          <div className="flex gap-3 justify-end">
            <button
              type="button"
              onClick={onClose}
              disabled={loading}
              className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors disabled:opacity-50"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50"
            >
              {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}