// app/super-add/components/ProductModal/index.tsx
'use client';

import { useState } from 'react';
import { ModalProps } from '../../types';
import { useBrandsSuppliers } from './hooks/useBrandsSuppliers';
import { useCreateEntities } from './hooks/useCreateEntities';
import { useImageUpload } from './hooks/useImageUpload';
import { ProductForm } from './components/ProductForm';
import { ImageUpload } from './components/ImageUpload';

interface ProductModalProps extends ModalProps {
  selectedPath?: string;
}

export default function ProductModal({ onClose, onSubmit, selectedPath }: ProductModalProps) {
  console.log('üîç ProductModal: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  const [code, setCode] = useState('');
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [brandId, setBrandId] = useState<number | ''>('');
  const [supplierId, setSupplierId] = useState<number | ''>('');
  const [newBrand, setNewBrand] = useState('');
  const [newSupplier, setNewSupplier] = useState('');
  const [loading, setLoading] = useState(false);
  const [creatingBrand, setCreatingBrand] = useState(false);
  const [creatingSupplier, setCreatingSupplier] = useState(false);
  const [errors, setErrors] = useState<{ 
    code?: string; 
    name?: string;
    newBrand?: string;
    newSupplier?: string;
  }>({});

  const { brands, suppliers, reload } = useBrandsSuppliers();
  const { createBrand, createSupplier } = useCreateEntities(reload);
  const { 
    images: uploadedImages, 
    previewUrls: imagePreviews, 
    handleImageSelect, 
    removeImage, 
    clearImages 
  } = useImageUpload();

  const handleImagesChange = (files: File[]) => {
    console.log('üì∏ ProductModal: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã', files.length);
    handleImageSelect(files);
  };

  const handleRemoveImage = (index: number) => {
    console.log('üóëÔ∏è ProductModal: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', index);
    removeImage(index);
  };

  const handleCreateBrand = async () => {
    console.log('üîÑ ProductModal: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞');
    if (!newBrand.trim()) {
      setErrors(prev => ({ ...prev, newBrand: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞' }));
      return;
    }

    if (newBrand.trim().length < 2) {
      setErrors(prev => ({ ...prev, newBrand: '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' }));
      return;
    }

    setCreatingBrand(true);
    try {
      const createdBrandId = await createBrand(newBrand.trim());
      await reload();
      setBrandId(createdBrandId);
      setNewBrand('');
      setErrors(prev => ({ ...prev, newBrand: undefined }));
      console.log('‚úÖ ProductModal: –ë—Ä–µ–Ω–¥ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω');
    } catch (error) {
      console.error('‚ùå ProductModal: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞: ${error.message}`);
    } finally {
      setCreatingBrand(false);
    }
  };

  const handleCreateSupplier = async () => {
    console.log('üîÑ ProductModal: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
    if (!newSupplier.trim()) {
      setErrors(prev => ({ ...prev, newSupplier: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' }));
      return;
    }

    if (newSupplier.trim().length < 2) {
      setErrors(prev => ({ ...prev, newSupplier: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' }));
      return;
    }

    setCreatingSupplier(true);
    try {
      const createdSupplierId = await createSupplier(newSupplier.trim());
      await reload();
      setSupplierId(createdSupplierId);
      setNewSupplier('');
      setErrors(prev => ({ ...prev, newSupplier: undefined }));
      console.log('‚úÖ ProductModal: –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω');
    } catch (error) {
      console.error('‚ùå ProductModal: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${error.message}`);
    } finally {
      setCreatingSupplier(false);
    }
  };

  const validateForm = (): boolean => {
    console.log('üîÑ ProductModal: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã');
    const newErrors: typeof errors = {};
    
    if (!code.trim()) {
      newErrors.code = '–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (code.trim().length < 2) {
      newErrors.code = '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (name.trim().length < 2) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üîÑ ProductModal: –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã', {
        selectedPath, imagesCount: uploadedImages.length
    });
    
    if (!validateForm()) return;

    if (!selectedPath) {
        alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ spine –≤ –¥–µ—Ä–µ–≤–µ!');
        return;
    }

    setLoading(true);
    try {
      console.log('üì§ ProductModal: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞', {
        code, name, description, brandId, supplierId, imagesCount: uploadedImages.length
      });
      
      await onSubmit(
        code.trim(), 
        name.trim(), 
        description.trim(), 
        brandId || undefined, 
        supplierId || undefined,
        uploadedImages
      );
      
      console.log('‚úÖ ProductModal: –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
        <h3 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–¥—É–∫—Ç</h3>
        
        <ImageUpload
          previewUrls={imagePreviews}
          onImagesChange={handleImagesChange}
          onRemoveImage={handleRemoveImage}
        />
        
        <ProductForm
          code={code}
          name={name}
          description={description}
          brandId={brandId}
          supplierId={supplierId}
          newBrand={newBrand}
          newSupplier={newSupplier}
          brands={brands}
          suppliers={suppliers}
          loading={loading}
          creatingBrand={creatingBrand}
          creatingSupplier={creatingSupplier}
          errors={errors}
          onCodeChange={setCode}
          onNameChange={setName}
          onDescriptionChange={setDescription}
          onBrandChange={setBrandId}
          onSupplierChange={setSupplierId}
          onNewBrandChange={setNewBrand}
          onNewSupplierChange={setNewSupplier}
          onCreateBrand={handleCreateBrand}
          onCreateSupplier={handleCreateSupplier}
          onSubmit={handleSubmit}
          onClose={onClose}
        />
      </div>
    </div>
  );
}