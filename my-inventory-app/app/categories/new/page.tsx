// app/categories/new/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

interface Category {
  id: number;
  name: string;
  path: string;
  children?: Category[];
}

interface FlatCategory {
  id: number;
  name: string;
  path: string;
}

export default function CategoriesAndSpinesPage() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [flatCategories, setFlatCategories] = useState<FlatCategory[]>([]);

  // === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
  const [categoryName, setCategoryName] = useState("");
  const [parentId, setParentId] = useState<number | "">("");
  const [loadingCategory, setLoadingCategory] = useState(false);

  // === –°–ø–∞–π–Ω—ã ===
  const [spineName, setSpineName] = useState("");
  const [spineCategoryId, setSpineCategoryId] = useState<number | "">("");
  const [loadingSpine, setLoadingSpine] = useState(false);

  // === –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedCategories, setExpandedCategories] = useState<Set<number>>(new Set());

  // === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è === - –ü–ï–†–ï–ú–ï–©–ê–ï–ú –í –ù–ê–ß–ê–õ–û
  const [notification, setNotification] = useState<string | null>(null);

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const [treeRes, flatRes] = await Promise.all([
        fetch("/api/categories/tree"),
        fetch("/api/categories")
      ]);
      
      const treeData = await treeRes.json();
      const flatData = await flatRes.json();
      
      if (treeData.ok) setCategories(treeData.data || []);
      if (flatData.ok) setFlatCategories(flatData.data || []);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    }
  };

  /** –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
  const showNotification = (message: string) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 3000);
  };

  /** –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  const toggleCategory = (categoryId: number) => {
    setExpandedCategories(prev => {
      const newSet = new Set(prev);
      if (newSet.has(categoryId)) {
        newSet.delete(categoryId);
      } else {
        newSet.add(categoryId);
      }
      return newSet;
    });
  };

  /** –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  const selectCategory = (categoryId: number | "") => {
    setParentId(categoryId);
    setShowCategoryModal(false);
    setSearchTerm("");
  };

  /** –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  const renderCategoryTree = (categories: Category[], level = 0) => {
    return categories.map(category => {
      const hasChildren = category.children && category.children.length > 0;
      const isExpanded = expandedCategories.has(category.id);
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
      const filteredChildren = category.children?.filter(child => 
        child.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        child.path.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const showCategory = searchTerm === "" || 
        category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        category.path.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (filteredChildren && filteredChildren.length > 0);

      if (!showCategory) return null;

      return (
        <div key={category.id} className="select-none">
          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div 
            className={`flex items-center py-2 px-3 hover:bg-gray-100 rounded cursor-pointer ${
              parentId === category.id ? 'bg-blue-50 border border-blue-200' : ''
            }`}
            style={{ paddingLeft: `${level * 20 + 12}px` }}
          >
            {/* –ò–∫–æ–Ω–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è */}
            {hasChildren && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  toggleCategory(category.id);
                }}
                className="w-6 h-6 flex items-center justify-center mr-1 text-gray-500 hover:bg-gray-200 rounded"
              >
                {isExpanded ? '‚ñº' : '‚ñ∂'}
              </button>
            )}
            
            {/* –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –¥–µ—Ç–µ–π */}
            {!hasChildren && <div className="w-6 h-6 mr-1"></div>}

            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div 
              className="flex-1 flex items-center"
              onClick={() => selectCategory(category.id)}
            >
              <span className="text-lg mr-2">üìÅ</span>
              <span className="flex-1">{category.name}</span>
              
              {/* Badge –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              {level === 0 && (
                <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded ml-2">
                  –∫–æ—Ä–µ–Ω—å
                </span>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ */}
            <button
              onClick={() => selectCategory(category.id)}
              className="ml-2 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition-colors"
            >
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>

          {/* –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {hasChildren && isExpanded && (
            <div className="border-l-2 border-gray-200 ml-3">
              {renderCategoryTree(category.children || [], level + 1)}
            </div>
          )}
        </div>
      );
    }).filter(Boolean);
  };

  /** –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ */
  const filteredCategories = searchTerm === "" 
    ? categories 
    : categories.filter(category => 
        category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        category.path.toLowerCase().includes(searchTerm.toLowerCase()) ||
        category.children?.some(child => 
          child.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          child.path.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );

  /** –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  const getSelectedCategoryName = () => {
    if (!parentId) return "–ù–µ –≤—ã–±—Ä–∞–Ω–∞";
    
    const findCategory = (cats: Category[]): Category | null => {
      for (const cat of cats) {
        if (cat.id === parentId) return cat;
        if (cat.children) {
          const found = findCategory(cat.children);
          if (found) return found;
        }
      }
      return null;
    };
    
    const category = findCategory(categories);
    return category ? category.name : "–ù–µ –≤—ã–±—Ä–∞–Ω–∞";
  };

  /** –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  const handleCreateCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoadingCategory(true);

    try {
      const res = await fetch("/api/categories", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: categoryName.trim(),
          parentId: parentId || null,
        }),
      });

      const data = await res.json();
      if (data.ok) {
        setCategoryName("");
        setParentId("");
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await loadCategories();
        showNotification("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
      } else {
        showNotification("–û—à–∏–±–∫–∞: " + data.error);
      }
    } catch (err) {
      console.error(err);
      showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    } finally {
      setLoadingCategory(false);
    }
  };

  /** –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∞–π–Ω–∞ */
  const handleCreateSpine = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoadingSpine(true);

    try {
      const res = await fetch("/api/spines", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: spineName.trim(),
          categoryId: spineCategoryId || null,
        }),
      });

      const data = await res.json();
      if (data.ok) {
        setSpineName("");
        setSpineCategoryId("");
        showNotification("–°–ø–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
      } else {
        showNotification("–û—à–∏–±–∫–∞: " + data.error);
      }
    } catch (err) {
      console.error(err);
      showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∞–π–Ω–∞");
    } finally {
      setLoadingSpine(false);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-8 max-w-4xl">
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è notification */}
      {notification && (
        <div className="fixed top-4 right-4 bg-gray-800 text-white px-4 py-2 rounded shadow-lg animate-fade-in z-50">
          {notification}
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ø–∞–π–Ω–æ–≤</h1>
        
        {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <Link
          href="/categories"
          className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center space-x-2"
        >
          <span>‚úèÔ∏è</span>
          <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
        </Link>
      </div>

      {/* === –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ === */}
      <section className="p-6 bg-white rounded-lg shadow-md">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
          <div className="text-sm text-gray-500">
            –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {countAllCategories(categories)}
          </div>
        </div>
        
        <form onSubmit={handleCreateCategory} className="space-y-4">
          <div>
            <label className="block font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
            <input
              type="text"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={categoryName}
              onChange={(e) => setCategoryName(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-2">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <div className="flex space-x-2">
              <button
                type="button"
                onClick={() => setShowCategoryModal(true)}
                className="flex-1 border border-gray-300 rounded px-3 py-2 text-left bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <div className="flex justify-between items-center">
                  <span className={parentId ? "text-gray-900" : "text-gray-500"}>
                    {getSelectedCategoryName()}
                  </span>
                  <span className="text-gray-400">‚ñº</span>
                </div>
              </button>
              
              {parentId && (
                <button
                  type="button"
                  onClick={() => selectCategory("")}
                  className="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                >
                  √ó
                </button>
              )}
            </div>

            <p className="text-sm text-gray-600 mt-1">
              {parentId ? `–í—ã–±—Ä–∞–Ω–∞: ${getSelectedCategoryName()}` : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ—Ä–Ω–µ"}
            </p>
          </div>

          <div className="flex space-x-3">
            <button
              type="submit"
              className="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 disabled:opacity-50 transition-colors"
              disabled={loadingCategory}
            >
              {loadingCategory ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"}
            </button>

            <Link
              href="/categories"
              className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors flex items-center space-x-2"
            >
              <span>üìã</span>
              <span>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
            </Link>
          </div>
        </form>
      </section>

      {/* === –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∞–π–Ω–∞ === */}
      <section className="p-6 bg-white rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å —Å–ø–∞–π–Ω</h2>
        <form onSubmit={handleCreateSpine} className="space-y-4">
          <div>
            <label className="block font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∞–π–Ω–∞</label>
            <input
              type="text"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={spineName}
              onChange={(e) => setSpineName(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∞–π–Ω–∞"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–ø–∞–π–Ω–∞</label>
            <select
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={spineCategoryId}
              onChange={(e) => setSpineCategoryId(Number(e.target.value) || "")}
              required
            >
              <option value="">-- –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é --</option>
              {flatCategories.map((c) => (
                <option key={c.id} value={c.id}>
                  {c.name}
                </option>
              ))}
            </select>
          </div>

          <button
            type="submit"
            className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 disabled:opacity-50 transition-colors"
            disabled={loadingSpine}
          >
            {loadingSpine ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å —Å–ø–∞–π–Ω"}
          </button>
        </form>
      </section>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {showCategoryModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="p-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
                <button
                  onClick={() => {
                    setShowCategoryModal(false);
                    setSearchTerm("");
                  }}
                  className="text-gray-500 hover:text-gray-700 text-2xl"
                >
                  √ó
                </button>
              </div>
              
              {/* –ü–æ–∏—Å–∫ */}
              <div className="mt-3">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."
                  className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
            <div className="flex-1 overflow-y-auto p-4">
              {/* –ö–Ω–æ–ø–∫–∞ "–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" */}
              <div 
                className={`flex items-center py-3 px-3 hover:bg-gray-100 rounded cursor-pointer mb-2 ${
                  !parentId ? 'bg-blue-50 border border-blue-200' : ''
                }`}
                onClick={() => selectCategory("")}
              >
                <span className="text-lg mr-2">üè†</span>
                <span className="flex-1 font-medium">–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</span>
                <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                  –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                </span>
              </div>

              {/* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              {renderCategoryTree(filteredCategories)}
              
              {filteredCategories.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </div>
              )}
            </div>

            {/* –§—É—Ç–µ—Ä */}
            <div className="p-4 border-t border-gray-200 bg-gray-50">
              <button
                onClick={() => {
                  setShowCategoryModal(false);
                  setSearchTerm("");
                }}
                className="w-full bg-gray-500 text-white py-2 rounded hover:bg-gray-600 transition-colors"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function countAllCategories(categories: Category[]): number {
  let count = 0;
  
  function countRecursive(cats: Category[]) {
    cats.forEach(cat => {
      count++;
      if (cat.children && cat.children.length > 0) {
        countRecursive(cat.children);
      }
    });
  }
  
  countRecursive(categories);
  return count;
}