// app/categories/new/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import CategoryCreationForm from "./components/CategoryCreationForm";
import SpineCreationForm from "./components/SpineCreationForm";
import Notification from "./components/Notification";
import { CategoryNode as SuperAddCategoryNode } from "@/app/types/super-add";

export interface FlatCategory {
  id: number;
  name: string;
  slug: string;
  path: string;
  node_index?: string;
  human_path?: string;
  parent_id?: number | null;
}

export interface CategoryNode extends FlatCategory {
  children?: CategoryNode[];
  spines?: any[]; // –î–æ–±–∞–≤–ª—è–µ–º spines –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SUPER_ADD
}

export default function CategoriesAndSpinesPage() {
  const [flatCategories, setFlatCategories] = useState<FlatCategory[]>([]);
  const [categoriesTree, setCategoriesTree] = useState<CategoryNode[]>([]);
  const [notification, setNotification] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      setLoading(true);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Å node_index
      const res = await fetch("/api/categories/tree");
      const data = await res.json();
      
      if (data.ok && Array.isArray(data.data)) {
        const treeData: CategoryNode[] = data.data;
        setCategoriesTree(treeData);
        
        // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const flatRes = await fetch("/api/categories");
        const flatData = await flatRes.json();
        if (flatData.ok) {
          setFlatCategories(flatData.data || []);
        }
      } else {
        console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç /api/categories/tree:", data);
        // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π API
        await loadFlatCategoriesFallback();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
      await loadFlatCategoriesFallback();
    } finally {
      setLoading(false);
    }
  };

  const loadFlatCategoriesFallback = async () => {
    try {
      const res = await fetch("/api/categories");
      const data = await res.json();
      if (data.ok && Array.isArray(data.data)) {
        const flats: FlatCategory[] = data.data;
        setFlatCategories(flats);
        setCategoriesTree(buildCategoryTree(flats));
      }
    } catch (error) {
      console.error("Fallback loading failed:", error);
    }
  };

  const showNotification = (message: string) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 3000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç SUPER_ADD
  const convertToSuperAddFormat = (tree: CategoryNode[]): SuperAddCategoryNode[] => {
    return tree.map(node => ({
      id: node.id,
      name: node.name,
      slug: node.slug,
      path: node.path,
      node_index: node.node_index,
      human_path: node.human_path,
      parent_id: node.parent_id,
      children: node.children ? convertToSuperAddFormat(node.children) : undefined,
      spines: node.spines || []
    }));
  };

  if (loading) {
    return (
      <div className="container mx-auto p-6 max-w-4xl">
        <div className="flex justify-center items-center py-12">
          <div className="text-lg text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-8 max-w-4xl">
      <Notification message={notification} />

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ø–∞–π–Ω–æ–≤</h1>
          <p className="text-gray-600 mt-1">
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ Node Index –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
          </p>
        </div>

        <div className="flex items-center space-x-3">
          <Link
            href="/super-add"
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2"
          >
            <span>üöÄ</span>
            <span>SUPER ADD</span>
          </Link>
          
          <Link
            href="/categories"
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center space-x-2"
          >
            <span>‚úèÔ∏è</span>
            <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
          </Link>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ node_index */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-semibold text-blue-800 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <span className="text-blue-600">–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</span>
            <span className="ml-2 font-medium">{flatCategories.length}</span>
          </div>
          <div>
            <span className="text-blue-600">–° node_index:</span>
            <span className="ml-2 font-medium">
              {flatCategories.filter(c => c.node_index).length}
            </span>
          </div>
          <div>
            <span className="text-blue-600">–ö–æ—Ä–Ω–µ–≤—ã—Ö:</span>
            <span className="ml-2 font-medium">
              {categoriesTree.length}
            </span>
          </div>
          <div>
            <span className="text-blue-600">–ì–ª—É–±–∏–Ω–∞:</span>
            <span className="ml-2 font-medium">
              {Math.max(...flatCategories.map(c => (c.node_index || '').split('_').length - 1), 0)}
            </span>
          </div>
        </div>
      </div>

      <CategoryCreationForm
        categoriesTree={convertToSuperAddFormat(categoriesTree)}
        flatCategories={flatCategories}
        onCategoryCreated={loadCategories}
        onNotification={showNotification}
      />

      <SpineCreationForm
        flatCategories={flatCategories}
        onNotification={showNotification}
        onSpineCreated={loadCategories}
      />

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ production) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="bg-gray-100 border border-gray-300 rounded-lg p-4">
          <h3 className="font-semibold text-gray-800 mb-2">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          <details>
            <summary className="cursor-pointer text-sm text-gray-600">
              –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({categoriesTree.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö)
            </summary>
            <pre className="text-xs mt-2 p-2 bg-white rounded border max-h-60 overflow-auto">
              {JSON.stringify(categoriesTree, null, 2)}
            </pre>
          </details>
        </div>
      )}
    </div>
  );
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ materialized path (path = "/a/b/c")
 * Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function buildCategoryTree(flat: FlatCategory[]): CategoryNode[] {
  if (!Array.isArray(flat)) return [];

  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –ø–æ path –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const map = new Map<string, CategoryNode>();
  const roots: CategoryNode[] = [];

  // –ö–æ–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º children
  for (const c of flat) {
    map.set(c.path, { ...c, children: [] });
  }

  // –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ –ø—É—Ç–∏ ‚Äî —á—Ç–æ–±—ã —Ä–æ–¥–∏—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Ä–∞–Ω—å—à–µ –¥–µ—Ç–µ–π
  const sorted = [...flat].sort((a, b) => {
    const da = a.path.split("/").filter(Boolean).length;
    const db = b.path.split("/").filter(Boolean).length;
    return da - db;
  });

  for (const c of sorted) {
    const node = map.get(c.path)!;
    // –≤—ã—á–∏—Å–ª–∏–º parentPath: –≤—Å—ë –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const segments = c.path.split("/").filter(Boolean);
    if (segments.length <= 1) {
      // –∫–æ—Ä–µ–Ω—å
      roots.push(node);
    } else {
      const parentSegments = segments.slice(0, -1);
      const parentPath = "/" + parentSegments.join("/");
      const parentNode = map.get(parentPath);
      if (parentNode) {
        parentNode.children = parentNode.children || [];
        parentNode.children.push(node);
      } else {
        // –∑–∞—â–∏—Ç–Ω—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –ø–æ–º–µ—Å—Ç–∏–º –≤ –∫–æ—Ä–Ω–∏
        roots.push(node);
      }
    }
  }

  return roots;
}