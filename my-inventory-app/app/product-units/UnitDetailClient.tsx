// app/product-units/UnitDetailClient.tsx
// app/product-units/UnitDetailClient.tsx
"use client";

import { ProductUnit } from "@/types/product-unit";
import ProductUnitActions from "@/app/components/ProductUnitActions";
import { useState } from "react";

interface ProductUnitLog {
  id: number;
  type: string;
  message: string;
  meta: any;
  createdAt: string;
}

interface UnitDetailClientProps {
  unit: ProductUnit & {
    product?: {
      category?: { name: string };
      spine?: { name: string };
      brand?: { name: string };
      images?: Array<{ id: number; path: string; isMain: boolean }>;
    };
    // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –í –ü–†–û–ü–°
    logs?: ProductUnitLog[];
  };
}

export default function UnitDetailClient({ unit }: UnitDetailClientProps) {
  const [showLogs, setShowLogs] = useState(false);

  // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î
  console.log("üîç UnitDetailClient –ø–æ–ª—É—á–∏–ª unit:", {
    unitId: unit.id,
    serialNumber: unit.serialNumber,
    logsCount: unit.logs?.length || 0,
    hasLogs: !!unit.logs,
    logs: unit.logs
  });

  const formatDate = (dateString?: string) => {
    if (!dateString) return "-";
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleUpdate = (updatedUnit: ProductUnit) => {
    console.log("Unit updated:", updatedUnit);
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ SWR mutate –∏–ª–∏ setState
  };

  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const mainImage = unit.product?.images?.find(img => img.isMain) || unit.product?.images?.[0];

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="lg:col-span-2 space-y-6">
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <span className="text-sm text-gray-600 block mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
              <p className="font-medium">{unit.productName || unit.product?.name || "‚Äî"}</p>
            </div>
            <div>
              <span className="text-sm text-gray-600 block mb-1">–ö–æ–¥:</span>
              <p className="font-mono bg-gray-50 px-2 py-1 rounded text-sm">
                {unit.product?.code || "‚Äî"}
              </p>
            </div>
            <div>
              <span className="text-sm text-gray-600 block mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
              <p className="font-medium">{unit.product?.category?.name || "‚Äî"}</p>
            </div>
            <div>
              <span className="text-sm text-gray-600 block mb-1">Spine:</span>
              <p className="font-medium">{unit.product?.spine?.name || unit.spine?.name || "‚Äî"}</p>
            </div>
            <div>
              <span className="text-sm text-gray-600 block mb-1">–ë—Ä–µ–Ω–¥:</span>
              <p className="font-medium">{unit.product?.brand?.name || "‚Äî"}</p>
            </div>
            <div>
              <span className="text-sm text-gray-600 block mb-1">–¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏:</span>
              <p className="font-medium">{unit.purchasePrice ? `${unit.purchasePrice} ‚ÇΩ` : "‚Äî"}</p>
            </div>
          </div>
          
          {unit.product?.description && (
            <div className="mt-4">
              <span className="text-sm text-gray-600 block mb-1">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
              <p className="text-gray-800">{unit.product.description}</p>
            </div>
          )}
        </div>

        {/* üî• –ë–õ–û–ö –õ–û–ì–û–í - –î–û–ë–ê–í–õ–Ø–ï–ú */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</h2>
            <button
              onClick={() => setShowLogs(!showLogs)}
              className="inline-flex items-center text-purple-600 text-sm hover:text-purple-800 font-medium transition-colors"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              {showLogs ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ª–æ–≥–∏ ({unit.logs?.length || 0})
            </button>
          </div>

          {showLogs && (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {unit.logs && unit.logs.length > 0 ? (
                unit.logs.map((log) => (
                  <div key={log.id} className="border-l-4 border-blue-500 pl-4 py-2 bg-gray-50 rounded">
                    <div className="flex justify-between items-start">
                      <span className="font-medium text-gray-800 text-sm">{log.type}</span>
                      <span className="text-xs text-gray-500">
                        {new Date(log.createdAt).toLocaleDateString('ru-RU')}
                      </span>
                    </div>
                    <p className="text-gray-600 text-sm mt-1">{log.message}</p>
                    {log.meta && Object.keys(log.meta).length > 0 && (
                      <div className="mt-1 text-xs text-gray-500">
                        {JSON.stringify(log.meta)}
                      </div>
                    )}
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-gray-500">
                  <svg className="w-8 h-8 mx-auto mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ü—Ä–æ–¥–∞–∂–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900">–ü—Ä–æ–¥–∞–∂–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          
          {unit.statusProduct === "SOLD" && !unit.isCredit && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <span className="text-sm text-gray-600 block mb-1">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span>
                <p className="font-medium">{unit.buyerName} {unit.buyerPhone}</p>
              </div>
              <div>
                <span className="text-sm text-gray-600 block mb-1">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</span>
                <p className="font-medium text-green-600">{unit.salePrice} ‚ÇΩ</p>
              </div>
              <div>
                <span className="text-sm text-gray-600 block mb-1">–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:</span>
                <p className="font-medium">{formatDate(unit.soldAt)}</p>
              </div>
            </div>
          )}

          {unit.isCredit && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <span className="text-sm text-gray-600 block mb-1">–ü—Ä–æ–¥–∞–Ω–æ –≤ –∫—Ä–µ–¥–∏—Ç:</span>
                <p className="font-medium">{unit.buyerName} {unit.buyerPhone}</p>
              </div>
              <div>
                <span className="text-sm text-gray-600 block mb-1">–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:</span>
                <p className="font-medium">{formatDate(unit.soldAt)}</p>
              </div>
              {unit.creditPaidAt && (
                <div className="md:col-span-2">
                  <span className="text-sm text-green-600 block mb-1">–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω:</span>
                  <p className="font-medium">{formatDate(unit.creditPaidAt)}</p>
                </div>
              )}
            </div>
          )}

          <ProductUnitActions unit={unit} onUpdate={handleUpdate} />
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="space-y-6">
        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        {mainImage && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <h3 className="text-lg font-semibold mb-3 text-gray-900">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h3>
            <img
              src={mainImage.path}
              alt={unit.productName || unit.product?.name}
              className="w-full h-48 object-cover rounded-lg"
            />
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å—ã –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold mb-4 text-gray-900">–°—Ç–∞—Ç—É—Å—ã</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏:</span>
              <span className="font-medium capitalize">{unit.statusCard?.toLowerCase() || "‚Äî"}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:</span>
              <span className="font-medium capitalize">{unit.statusProduct?.toLowerCase() || "‚Äî"}</span>
            </div>
            {unit.isReturned && (
              <div className="flex justify-between text-red-600">
                <span className="text-sm">–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω:</span>
                <span className="font-medium">{formatDate(unit.returnedAt)}</span>
              </div>
            )}
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold mb-4 text-gray-900">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω:</span>
              <span className="font-medium">{formatDate(unit.createdAt)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">–û–±–Ω–æ–≤–ª–µ–Ω:</span>
              <span className="font-medium">{formatDate(unit.updatedAt)}</span>
            </div>
            {unit.notes && (
              <div>
                <span className="text-sm text-gray-600 block mb-2">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</span>
                <p className="text-gray-800 bg-gray-50 p-3 rounded border text-sm">{unit.notes}</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}