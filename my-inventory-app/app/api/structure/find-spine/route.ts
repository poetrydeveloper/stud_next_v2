// app/api/structure/find-spine/route.ts
import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/app/lib/prisma';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const path = searchParams.get('path');

  console.log('üîç FIND SPINE API: –ü–æ–∏—Å–∫ spine –ø–æ –ø—É—Ç–∏:', path);

  if (!path) {
    return NextResponse.json({ 
      ok: false, 
      error: 'Path parameter required' 
    }, { status: 400 });
  }

  try {
    // –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú –ü–£–¢–¨
    const normalizedPath = path
      .replace(/\\/g, '/') // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
      .replace(/^structure\//, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å structure/ –µ—Å–ª–∏ –µ—Å—Ç—å
      .replace(/^\//, ''); // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å

    console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:', normalizedPath);

    // –ò—â–µ–º spine –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –ø—É—Ç–∏
    const spine = await prisma.spine.findFirst({
      where: {
        OR: [
          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å node_index (–±–µ–∑ structure/)
          { node_index: `structure/${normalizedPath}` },
          // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          { node_index: { contains: normalizedPath } },
          { human_path: { contains: normalizedPath } },
        ]
      },
      select: {
        id: true,
        name: true,
        node_index: true,
        human_path: true,
        categoryId: true
      }
    });

    console.log('üìä FIND SPINE API: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', {
      normalizedPath,
      found: !!spine,
      spine: spine ? { id: spine.id, name: spine.name, node_index: spine.node_index } : null
    });

    if (!spine) {
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ spines
      const allSpines = await prisma.spine.findMany({
        select: { id: true, name: true, node_index: true }
      });
      console.log('üìã –í—Å–µ spines –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', allSpines);
    }

    return NextResponse.json({ 
      ok: true, 
      data: spine 
    });
  } catch (error: any) {
    console.error('‚ùå FIND SPINE API: –û—à–∏–±–∫–∞:', error);
    return NextResponse.json({ 
      ok: false, 
      error: error.message 
    }, { status: 500 });
  }
}