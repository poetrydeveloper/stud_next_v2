// app/api/structure/product/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { StructureSyncService } from '@/lib/services/StructureSyncService';
import { FileStorageAdapter } from '@/lib/file-storage-adapter';
import { PrismaClient } from '@prisma/client';

import { prisma } from '@/app/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API Product: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    
    // –ü–û–õ–£–ß–ê–ï–ú FORMDATA
    const formData = await request.formData();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    const code = formData.get('code') as string;
    const name = formData.get('name') as string;
    const description = formData.get('description') as string || '';
    const parentPath = formData.get('parentPath') as string || '';
    
    // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const brandId = formData.get('brandId') ? Number(formData.get('brandId')) : undefined;
    const supplierId = formData.get('supplierId') ? Number(formData.get('supplierId')) : undefined;
    const spineId = formData.get('spineId') ? Number(formData.get('spineId')) : undefined;
    const categoryId = formData.get('categoryId') ? Number(formData.get('categoryId')) : undefined;

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageFiles = formData.getAll('images') as File[];
    
    console.log('üì• API Product: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', {
      code, name, parentPath, brandId, supplierId, imagesCount: imageFiles.length
    });

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô
    if (!code || !name) {
      return NextResponse.json({ 
        success: false, 
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: code –∏ name' 
      }, { status: 400 });
    }

    const syncService = new StructureSyncService();
    const fileStorage = new FileStorageAdapter();

    // –°–û–ó–î–ê–ï–ú –ü–†–û–î–£–ö–¢ –í –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    const result = await prisma.$transaction(async (tx) => {
      // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ StructureSyncService
      const { node_index, dbRecord } = await syncService.syncProduct(
        code, name, parentPath, spineId, brandId, categoryId, description, supplierId, []
      );

      console.log('‚úÖ API Product: –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î', dbRecord.id);

      // 2. –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –µ—Å–ª–∏ –µ—Å—Ç—å
      const savedImages = [];
      if (imageFiles.length > 0) {
        console.log(`üñºÔ∏è API Product: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        
        for (let i = 0; i < imageFiles.length; i++) {
          const imageFile = imageFiles[i];
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (!fileStorage.isImageFormatSupported(imageFile)) {
            console.warn(`‚ö†Ô∏è API Product: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${imageFile.type}`);
            continue;
          }

          if (!fileStorage.validateFileSize(imageFile)) {
            console.warn(`‚ö†Ô∏è API Product: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${imageFile.size} bytes`);
            continue;
          }

          try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResult = await fileStorage.uploadProductImage(
              imageFile, 
              dbRecord.id, 
              code
            );

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î ProductImage
            const productImage = await tx.productImage.create({
              data: {
                productId: dbRecord.id,
                filename: imageResult.filename,
                path: imageResult.localPath,
                isMain: i === 0, // –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –≥–ª–∞–≤–Ω–æ–µ
                localPath: imageResult.localPath,
                githubUrl: imageResult.githubUrl,
                storageType: imageResult.githubUrl ? 'github' : 'local'
              }
            });

            savedImages.push(productImage);
            console.log(`‚úÖ API Product: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${imageResult.filename}`);

          } catch (error) {
            console.error(`‚ùå API Product: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i}:`, error);
          }
        }
      }

      return { node_index, dbRecord, savedImages };
    });

    console.log('üéâ API Product: –ü—Ä–æ–¥—É–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω', {
      productId: result.dbRecord.id,
      imagesCount: result.savedImages.length
    });

    return NextResponse.json({ 
      success: true, 
      node_index: result.node_index,
      dbRecord: result.dbRecord,
      savedImages: result.savedImages,
      path: `/${result.node_index}`
    });
    
  } catch (error) {
    console.error('‚ùå API Product: –û—à–∏–±–∫–∞:', error);
    return NextResponse.json({ 
      success: false, 
      error: error.message 
    }, { status: 400 });
  }
}