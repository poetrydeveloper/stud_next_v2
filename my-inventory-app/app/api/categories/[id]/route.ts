// app/api/categories/[id]/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { generateSlug } from "@/app/lib/translit";

/**
 * GET /api/categories/[id] - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
 */
export async function GET(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = Number(params.id);
    
    console.log("üîç –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:", categoryId);

    const category = await prisma.category.findUnique({
      where: { id: categoryId }
      // –£–±–∏—Ä–∞–µ–º include —Ç–∞–∫ –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è children –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
    });

    console.log("üìä –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:", category);

    if (!category) {
      return NextResponse.json(
        { ok: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      ok: true,
      data: category
    });

  } catch (error) {
    console.error("GET /api/categories/[id] error:", error);
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/categories/[id] - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
export async function PATCH(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = Number(params.id);
    const { name, parentId } = await req.json();

    console.log("üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:", categoryId, { name, parentId });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || typeof name !== "string" || name.trim().length === 0) {
      return NextResponse.json(
        { ok: false, error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const existingCategory = await prisma.category.findUnique({
      where: { id: categoryId }
    });

    if (!existingCategory) {
      return NextResponse.json(
        { ok: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
        { status: 404 }
      );
    }

    const trimmedName = name.trim();

    // –ï—Å–ª–∏ –∏–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π slug
    let slug = existingCategory.slug;
    if (trimmedName !== existingCategory.name) {
      slug = generateSlug(trimmedName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ slug
      const existingSlug = await prisma.category.findUnique({
        where: { slug }
      });

      if (existingSlug && existingSlug.id !== categoryId) {
        let counter = 1;
        let newSlug = slug;
        while (await prisma.category.findUnique({ where: { slug: newSlug } })) {
          newSlug = `${slug}-${counter}`;
          counter++;
        }
        slug = newSlug;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π path
    let newPath = `/${slug}`;
    
    if (parentId) {
      const parent = await prisma.category.findUnique({
        where: { id: parentId },
        select: { path: true }
      });

      if (!parent) {
        return NextResponse.json(
          { ok: false, error: "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
          { status: 404 }
        );
      }
      newPath = `${parent.path}/${slug}`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ path
    const existingPath = await prisma.category.findUnique({
      where: { path: newPath }
    });

    if (existingPath && existingPath.id !== categoryId) {
      return NextResponse.json(
        { ok: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –ø—É—Ç–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const updatedCategory = await prisma.category.update({
      where: { id: categoryId },
      data: {
        name: trimmedName,
        slug,
        path: newPath
      }
    });

    console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", updatedCategory);

    return NextResponse.json({
      ok: true,
      data: updatedCategory,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    });

  } catch (error: any) {
    console.error("PATCH /api/categories/[id] error:", error);
    
    if (error?.code === "P2002") {
      return NextResponse.json(
        { ok: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –ø—É—Ç–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }

    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/categories/[id] - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
export async function DELETE(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = Number(params.id);

    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:", categoryId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—â–µ–º –ø–æ path)
    const children = await prisma.category.findMany({
      where: { 
        path: { 
          startsWith: `/${categoryId}/` 
        } 
      }
    });

    if (children.length > 0) {
      return NextResponse.json(
        { ok: false, error: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await prisma.product.findMany({
      where: { categoryId }
    });

    if (products.length > 0) {
      return NextResponse.json(
        { ok: false, error: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏" },
        { status: 400 }
      );
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await prisma.category.delete({
      where: { id: categoryId }
    });

    console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ ID:", categoryId);

    return NextResponse.json({
      ok: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
    });

  } catch (error: any) {
    console.error("DELETE /api/categories/[id] error:", error);
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}