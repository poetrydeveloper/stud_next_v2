// app/api/disassembly/scenario/route.ts (–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô - –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { DisassemblyService } from "@/app/lib/disassemblyService";

/**
 * POST /api/disassembly/scenario
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–∑–±–æ—Ä–∫–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
 * body: { name: string, parentProductCode: string, childProductCodes: string[] }
 */
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { name, parentProductCode, childProductCodes } = body;

    console.log("üîç POST /api/disassembly/scenario:", { name, parentProductCode, childProductCodes });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !parentProductCode || !childProductCodes) {
      return NextResponse.json(
        { ok: false, error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: name, parentProductCode, childProductCodes" },
        { status: 400 }
      );
    }

    if (!Array.isArray(childProductCodes) || childProductCodes.length === 0) {
      return NextResponse.json(
        { ok: false, error: "childProductCodes –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º" },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    const scenario = await DisassemblyService.createScenario({
      name,
      parentProductCode,
      childProductCodes
    });

    console.log("‚úÖ POST /api/disassembly/scenario —É—Å–ø–µ—à–Ω–æ:", {
      scenarioId: scenario.id,
      parentProductCode: scenario.parentProductCode,
      partsCount: scenario.partsCount
    });

    return NextResponse.json({ ok: true, data: scenario });
  } catch (err: any) {
    console.error("‚ùå POST /api/disassembly/scenario –æ—à–∏–±–∫–∞:", err);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
    const status = err.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                   err.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ? 409 : 400;
    
    return NextResponse.json(
      { ok: false, error: err.message },
      { status }
    );
  }
}

/**
 * GET /api/disassembly/scenario
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const productCode = searchParams.get('productCode');
    const includeInactive = searchParams.get('includeInactive') === 'true';

    console.log("üîç GET /api/disassembly/scenario:", { productCode, includeInactive });

    let scenarios;
    
    if (productCode) {
      // –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      scenarios = await DisassemblyService.getScenariosByProductCode(productCode);
    } else {
      // –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      scenarios = await DisassemblyService.getAllScenarios(includeInactive);
    }

    console.log("‚úÖ GET /api/disassembly/scenario —É—Å–ø–µ—à–Ω–æ:", {
      scenariosCount: scenarios.length,
      productCode,
      includeInactive
    });

    return NextResponse.json({ ok: true, data: scenarios });
  } catch (err: any) {
    console.error("‚ùå GET /api/disassembly/scenario –æ—à–∏–±–∫–∞:", err);
    
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}