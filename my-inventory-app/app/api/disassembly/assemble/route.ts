// app/api/disassembly/assemble/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { DisassemblyService } from "@/app/lib/disassemblyService";

/**
 * POST /api/disassembly/assemble
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
 * body: { parentUnitId: number, childUnitIds: number[] }
 */
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { parentUnitId, childUnitIds } = body;

    console.log("üîç POST /api/disassembly/assemble:", { parentUnitId, childUnitIds });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!parentUnitId || !childUnitIds) {
      return NextResponse.json(
        { ok: false, error: "parentUnitId –∏ childUnitIds –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    if (!Array.isArray(childUnitIds) || childUnitIds.length === 0) {
      return NextResponse.json(
        { ok: false, error: "childUnitIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º" },
        { status: 400 }
      );
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    const result = await DisassemblyService.executeAssembly({
      parentUnitId,
      childUnitIds
    });

    console.log("‚úÖ POST /api/disassembly/assemble —É—Å–ø–µ—à–Ω–æ:", {
      parentUnitId: result.parentUnit.id,
      childUnitsCount: result.childUnits.length
    });

    return NextResponse.json({ ok: true, data: result });
  } catch (err: any) {
    console.error("‚ùå POST /api/disassembly/assemble –æ—à–∏–±–∫–∞:", err);
    
    return NextResponse.json(
      { ok: false, error: err.message },
      { status: 400 }
    );
  }
}