// app/api/disassembly/execute/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { DisassemblyService } from "@/app/lib/disassemblyService";

/**
 * POST /api/disassembly/execute
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∫–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
 * body: { scenarioId: number }
 */
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { scenarioId } = body;

    console.log("üîç POST /api/disassembly/execute:", { scenarioId });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!scenarioId) {
      return NextResponse.json(
        { ok: false, error: "scenarioId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∫–∏
    const result = await DisassemblyService.executeDisassembly({
      scenarioId
    });

    console.log("‚úÖ POST /api/disassembly/execute —É—Å–ø–µ—à–Ω–æ:", {
      scenarioId: result.scenario.id,
      parentUnitId: result.parentUnit.id,
      childUnitsCount: result.childUnits.length
    });

    return NextResponse.json({ ok: true, data: result });
  } catch (err: any) {
    console.error("‚ùå POST /api/disassembly/execute –æ—à–∏–±–∫–∞:", err);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
    const status = err.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 400;
    
    return NextResponse.json(
      { ok: false, error: err.message },
      { status }
    );
  }
}