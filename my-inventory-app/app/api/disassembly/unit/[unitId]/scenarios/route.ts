// app/api/disassembly/unit/[unitId]/scenarios/route.ts (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { DisassemblyService } from "@/app/lib/disassemblyService";

/**
 * GET /api/disassembly/unit/[unitId]/scenarios
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è unit (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
 */
export async function GET(
  req: Request,
  { params }: { params: Promise<{ unitId: string }> } // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û Promise
) {
  try {
    const { unitId } = await params; // ‚Üê –î–û–ë–ê–í–õ–ï–ù await
    const unitIdNumber = Number(unitId);

    console.log("üîç GET /api/disassembly/unit/[unitId]/scenarios:", { unitId: unitIdNumber });

    if (isNaN(unitIdNumber)) {
      return NextResponse.json(
        { ok: false, error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID unit" },
        { status: 400 }
      );
    }

    const scenarios = await DisassemblyService.getUnitScenarios(unitIdNumber);

    console.log("‚úÖ GET /api/disassembly/unit/[unitId]/scenarios —É—Å–ø–µ—à–Ω–æ:", {
      unitId: unitIdNumber,
      scenariosCount: scenarios.length
    });

    return NextResponse.json({ ok: true, data: scenarios });
  } catch (err: any) {
    console.error("‚ùå GET /api/disassembly/unit/[unitId]/scenarios –æ—à–∏–±–∫–∞:", err);
    
    return NextResponse.json(
      { ok: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}