//app/api/disassembly/unit/[unitId]/children/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";

export async function GET(
  request: Request,
  { params }: { params: Promise<{ unitId: string }> }
) {
  try {
    const { unitId } = await params;
    
    console.log("üîç GET /api/disassembly/unit/[unitId]/children:", { unitId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ parent unit —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω
    const parentUnit = await prisma.productUnit.findUnique({
      where: { id: parseInt(unitId) },
      select: {
        id: true,
        statusProduct: true,
        disassemblyStatus: true
      }
    });

    if (!parentUnit) {
      return NextResponse.json(
        { ok: false, error: "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }

    if (parentUnit.statusProduct !== "IN_DISASSEMBLED") {
      return NextResponse.json(
        { ok: false, error: "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω" },
        { status: 400 }
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö units –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    const children = await prisma.productUnit.findMany({
      where: {
        disassembledParentId: parseInt(unitId),
        statusProduct: 'IN_STORE', // –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏
        disassemblyStatus: {
          in: ['PARTIAL', 'MONOLITH'] // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ MONOLITH
        }
      },
      select: {
        id: true,
        serialNumber: true,
        statusProduct: true,
        disassemblyStatus: true,
        productName: true,
        productCode: true,
        product: {
          select: {
            name: true,
            code: true
          }
        },
        createdAt: true
      },
      orderBy: { createdAt: 'asc' }
    });

    console.log("‚úÖ GET /api/disassembly/unit/[unitId]/children —É—Å–ø–µ—à–Ω–æ:", {
      unitId,
      childrenCount: children.length
    });

    return NextResponse.json({ 
      ok: true, 
      data: children 
    });
  } catch (err: any) {
    console.error("‚ùå GET /api/disassembly/unit/[unitId]/children –æ—à–∏–±–∫–∞:", err);
    return NextResponse.json(
      { ok: false, error: err.message },
      { status: 500 }
    );
  }
}