import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import slugify from "slugify";

export async function POST(req: Request) {
  try {
    const { name } = await req.json();

    if (!name) {
      return NextResponse.json(
        { error: "–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±—Ä–µ–Ω–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingBrand = await prisma.brand.findFirst({
      where: {
        name: {
          equals: name,
          mode: 'insensitive'
        }
      }
    });

    if (existingBrand) {
      return NextResponse.json(
        { error: `–ë—Ä–µ–Ω–¥ "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` },
        { status: 409 }
      );
    }

    const slug = slugify(name, {
      lower: true,
      strict: true,
      locale: "ru"
    }).replace(/[^\w-]+/g, "");

    const brand = await prisma.brand.create({
      data: {
        name,
        slug,
      },
    });

    return NextResponse.json({ 
      ok: true, 
      data: brand 
    }, { status: 201 });
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞:", error);
    
    if (error.code === 'P2002') {
      return NextResponse.json(
        { error: "–ë—Ä–µ–Ω–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }
    
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

// –î–û–ë–ê–í–õ–Ø–ï–ú GET –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–†–ï–ù–î–û–í
export async function GET() {
  try {
    console.log("üîç GET /api/brands - fetching brands");
    
    const brands = await prisma.brand.findMany({
      orderBy: {
        name: 'asc',
      }
    });

    console.log("‚úÖ Found brands:", brands.length);
    
    return NextResponse.json({ 
      ok: true, 
      data: brands 
    });
  } catch (error: any) {
    console.error("‚ùå Error fetching brands:", error);
    return NextResponse.json(
      { ok: false, error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}