// // app/api/products/route.ts
// import { NextResponse } from "next/server";
// import prisma from "@/app/lib/prisma";
// import { writeFile, mkdir } from "fs/promises";
// import path from "path";

// export async function POST(req: Request) {
//   try {
//     const formData = await req.formData();

//     const name = formData.get("name") as string;
//     const code = formData.get("code") as string;
//     const description = formData.get("description") as string | null;
//     const categoryId = formData.get("categoryId") ? Number(formData.get("categoryId")) : null;
//     const brandId = formData.get("brandId") ? Number(formData.get("brandId")) : null;
//     const spineId = formData.get("spineId") ? Number(formData.get("spineId")) : null;

//     if (!name || !code) {
//       return NextResponse.json({ ok: false, error: "Name and code are required" }, { status: 400 });
//     }

//     console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", { name, code, description, categoryId, brandId, spineId });

//     // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
//     const product = await prisma.product.create({
//       data: { name, code, description, categoryId, brandId, spineId },
//     });

//     console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î:", product.id);

//     // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
//     const files = formData.getAll("images") as File[];
//     if (files.length > 0 && files[0].size > 0) {
//       console.log("üñºÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", files.length);
//       await handleImageUpload(formData, code, product.id);
//     }

//     // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
//     const productWithImages = await prisma.product.findUnique({
//       where: { id: product.id },
//       include: { images: true, category: true, brand: true, spine: true },
//     });

//     return NextResponse.json({ ok: true, data: productWithImages }, { status: 201 });
//   } catch (err: any) {
//     console.error("‚ùå POST /api/products error:", err);
//     return NextResponse.json({ ok: false, error: err.message }, { status: 500 });
//   }
// }

// // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// async function handleImageUpload(formData: FormData, code: string, productId: number) {
//   try {
//     const uploadDir = path.join(process.cwd(), "public", "img", "products", code);
//     await mkdir(uploadDir, { recursive: true });

//     const files = formData.getAll("images") as File[];
    
//     let mainImageExists = await prisma.productImage.findFirst({ 
//       where: { productId, isMain: true } 
//     });

//     const promises: Promise<any>[] = [];

//     for (let i = 0; i < files.length; i++) {
//       const file = files[i];
//       if (file.size === 0) continue;

//       const buffer = Buffer.from(await file.arrayBuffer());
//       const filename = `${code}_${Date.now()}_${i + 1}.jpg`;
//       const filepath = path.join(uploadDir, filename);
//       const webPath = `/img/products/${code}/${filename}`;
      
//       await writeFile(filepath, buffer);

//       const isMain = !mainImageExists && i === 0;

//       promises.push(
//         prisma.productImage.create({
//           data: { productId, filename, path: webPath, isMain },
//         })
//       );

//       if (isMain) mainImageExists = true;
//     }

//     await Promise.all(promises);
//     console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
//   } catch (error) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
//     throw error;
//   }
// }
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { writeFile, mkdir } from "fs/promises";
import path from "path";
import { nodeIndexService } from "@/app/lib/node-index/NodeIndexService";

export async function POST(req: Request) {
  try {
    const formData = await req.formData();
    
    const name = formData.get("name") as string;
    const code = formData.get("code") as string;
    const description = formData.get("description") as string | null;
    const categoryId = formData.get("categoryId") ? Number(formData.get("categoryId")) : null;
    const brandId = formData.get("brandId") ? Number(formData.get("brandId")) : null;
    const spineId = formData.get("spineId") ? Number(formData.get("spineId")) : null;

    if (!name || !code) {
      return NextResponse.json(
        { ok: false, error: "Name and code are required" }, 
        { status: 400 }
      );
    }

    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", { name, code, description, categoryId, brandId, spineId });

    // === –ü–†–û–í–ï–†–ö–ê SPINE (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Product) ===
    if (!spineId) {
      return NextResponse.json(
        { ok: false, error: "spineId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Product" },
        { status: 400 }
      );
    }

    const spine = await prisma.spine.findUnique({
      where: { id: spineId },
      include: { category: true }
    });

    if (!spine) {
      return NextResponse.json(
        { ok: false, error: "Spine –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ spine –∏–º–µ–µ—Ç node_index
    if (!spine.node_index) {
      return NextResponse.json(
        { ok: false, error: "Spine –Ω–µ –∏–º–µ–µ—Ç node_index" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ì–õ–û–ë–ê–õ–¨–ù–û)
    const existingProduct = await prisma.product.findUnique({
      where: { code }
    });

    if (existingProduct) {
      return NextResponse.json(
        { ok: false, error: "–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }

    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø NODE INDEX –ò HUMAN PATH ===
    const indexes = await nodeIndexService.generateProductIndex(spine, code, name);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å node_index
    const existingNodeIndex = await prisma.product.findUnique({
      where: { node_index: indexes.node_index }
    });

    if (existingNodeIndex) {
      return NextResponse.json(
        { ok: false, error: "–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º node_index —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }

    // === –°–û–ó–î–ê–ï–ú –ü–†–û–î–£–ö–¢ ===
    const product = await prisma.product.create({
      data: {
        name,
        code,
        description,
        categoryId,
        brandId,
        spineId,
        node_index: indexes.node_index,
        human_path: indexes.human_path,
      },
    });

    console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î:", { 
      id: product.id, 
      name: product.name,
      code: product.code,
      node_index: product.node_index,
      human_path: product.human_path
    });

    // === –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
    const files = formData.getAll("images") as File[];
    if (files.length > 0 && files[0].size > 0) {
      console.log("üñºÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", files.length);
      await handleImageUpload(formData, code, product.id);
    }

    // === –ü–û–õ–£–ß–ê–ï–ú –ü–†–û–î–£–ö–¢ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ===
    const productWithImages = await prisma.product.findUnique({
      where: { id: product.id },
      include: {
        images: true,
        category: true,
        brand: true,
        spine: true,
      },
    });

    return NextResponse.json(
      { 
        ok: true, 
        data: productWithImages,
        message: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å Node Index —Å–∏—Å—Ç–µ–º–æ–π"
      }, 
      { status: 201 }
    );

  } catch (err: any) {
    console.error("‚ùå POST /api/products error:", err);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (err?.code === "P2002") {
      const target = err.meta?.target;
      if (target?.includes('code')) {
        return NextResponse.json(
          { ok: false, error: "–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
          { status: 409 }
        );
      }
      if (target?.includes('node_index')) {
        return NextResponse.json(
          { ok: false, error: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç node_index" },
          { status: 409 }
        );
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑ NodeIndexService
    if (err.message.includes('node_index') || err.message.includes('Spine')) {
      return NextResponse.json(
        { ok: false, error: err.message },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { ok: false, error: err.message }, 
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function handleImageUpload(formData: FormData, code: string, productId: number) {
  try {
    const uploadDir = path.join(process.cwd(), "public", "img", "products", code);
    await mkdir(uploadDir, { recursive: true });

    const files = formData.getAll("images") as File[];
    let mainImageExists = await prisma.productImage.findFirst({
      where: { productId, isMain: true }
    });

    const promises: Promise<any>[] = [];

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if (file.size === 0) continue;

      const buffer = Buffer.from(await file.arrayBuffer());
      const filename = `${code}_${Date.now()}_${i + 1}.jpg`;
      const filepath = path.join(uploadDir, filename);
      const webPath = `/img/products/${code}/${filename}`;

      await writeFile(filepath, buffer);

      const isMain = !mainImageExists && i === 0;
      
      promises.push(
        prisma.productImage.create({
          data: {
            productId,
            filename,
            path: webPath,
            isMain,
          },
        })
      );

      if (isMain) mainImageExists = true;
    }

    await Promise.all(promises);
    console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
    throw error;
  }
}