import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { generateSlug } from "@/app/lib/translit";
import { ProductUnitPhysicalStatus } from "@prisma/client";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const statusFilter = searchParams.get('status');
    const categoryId = searchParams.get('categoryId');
    const includeEmpty = searchParams.get('includeEmpty') !== 'false'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ)
    const activeStatuses: ProductUnitPhysicalStatus[] = [
      'IN_STORE', 
      'CLEAR', 
      'IN_REQUEST', 
      'IN_DELIVERY', 
      'ARRIVED', 
      'IN_DISASSEMBLED',
      'IN_COLLECTED'
    ];

    // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
    let statusWhereCondition = {};
    if (statusFilter) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é - —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–æ–≤
      if (statusFilter.includes(',')) {
        const statuses = statusFilter.split(',').filter(s => s.trim() !== '') as ProductUnitPhysicalStatus[];
        statusWhereCondition = {
          statusProduct: { in: statuses }
        };
      } else {
        // –û–¥–∏–Ω —Å—Ç–∞—Ç—É—Å
        statusWhereCondition = {
          statusProduct: statusFilter as ProductUnitPhysicalStatus
        };
      }
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      statusWhereCondition = {
        statusProduct: { in: activeStatuses }
      };
    }

    const spines = await prisma.spine.findMany({
      include: {
        category: true,
        productUnits: {
          where: statusWhereCondition,
          include: {
            product: {
              select: {
                name: true,
                code: true,
                brand: { 
                  select: { 
                    id: true,
                    name: true 
                  } 
                },
                images: { 
                  where: { isMain: true },
                  take: 1 
                }
              },
            },
            customer: {
              select: {
                name: true,
                phone: true
              }
            },
            logs: { 
              take: 5, 
              orderBy: { createdAt: 'desc' } 
            },
          },
          orderBy: { createdAt: 'desc' }
        },
        _count: {
          select: { productUnits: true },
        },
      },
      where: {
        ...(categoryId && { categoryId: parseInt(categoryId) }),
        ...(!includeEmpty && {
          productUnits: {
            some: statusWhereCondition
          }
        })
      },
      orderBy: { name: "asc" },
    });

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ brandData –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const enrichedSpines = spines.map(spine => {
      const brandData: Record<string, any> = {};
      
      spine.productUnits.forEach(unit => {
        const brandName = unit.product?.brand?.name || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞';
        if (!brandData[brandName]) {
          brandData[brandName] = {
            count: 0,
            units: []
          };
        }
        brandData[brandName].count++;
        brandData[brandName].units.push(unit);
      });

      return {
        ...spine,
        brandData
      };
    });

    return NextResponse.json({ 
      ok: true, 
      spines: enrichedSpines,
      filters: {
        status: statusFilter,
        categoryId: categoryId ? parseInt(categoryId) : null
      }
    });
  } catch (err: any) {
    console.error("üí• –û—à–∏–±–∫–∞ API /spines:", err);
    return NextResponse.json({ ok: false, error: err.message }, { status: 500 });
  }
}

/**
 * POST /api/spines ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Spine
 * body: { name: string, categoryId?: number, imagePath?: string }
 */
export async function POST(req: Request) {
  try {
    const { name, categoryId, imagePath } = await req.json();

    if (!name || typeof name !== "string") {
      return NextResponse.json(
        { ok: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ Spine –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug
    let slug = generateSlug(name.trim());
    const originalSlug = slug;
    let counter = 1;

    while (await prisma.spine.findUnique({ where: { slug } })) {
      slug = `${originalSlug}-${counter}`;
      counter++;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (categoryId) {
      const categoryExists = await prisma.category.findUnique({
        where: { id: categoryId },
      });
      if (!categoryExists) {
        return NextResponse.json(
          { ok: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
          { status: 404 }
        );
      }
    }

    const spine = await prisma.spine.create({
      data: {
        name: name.trim(),
        slug,
        categoryId: categoryId || null,
        imagePath: imagePath || null,
      },
    });

    return NextResponse.json({
      ok: true,
      message: "Spine —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      data: spine,
    });
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Spine:", error);

    if (error.code === "P2002") {
      return NextResponse.json(
        { ok: false, error: "Spine —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { ok: false, error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Spine" },
      { status: 500 }
    );
  }
}