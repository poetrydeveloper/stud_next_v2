// app/api/product-units/request/route.ts
import { NextResponse } from "next/server";
import { RequestService } from "@/app/lib/requestService";
import { UnitCloneHelper } from "@/app/lib/unitCloneHelper";

export async function POST(req: Request) {
  console.log("=== API: CREATE REQUEST FROM CANDIDATE ===");
  
  try {
    const body = await req.json();
    const { unitId, quantity, pricePerUnit } = body;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { unitId, quantity, pricePerUnit });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!unitId || !quantity) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: unitId –∏–ª–∏ quantity");
      return NextResponse.json({ 
        ok: false, 
        error: "unitId and quantity required" 
      }, { status: 400 });
    }

    if (!pricePerUnit || pricePerUnit <= 0) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:", pricePerUnit);
      return NextResponse.json({ 
        ok: false, 
        error: "pricePerUnit required and must be > 0" 
      }, { status: 400 });
    }

    if (quantity < 1) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", quantity);
      return NextResponse.json({ 
        ok: false, 
        error: "quantity must be >= 1" 
      }, { status: 400 });
    }

    console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞");

    // 1. –°–æ–∑–¥–∞–µ–º CLEAR replacement unit
    console.log("üîÑ [1] –°–æ–∑–¥–∞–µ–º CLEAR replacement unit...");
    const clearReplacement = await UnitCloneHelper.createClearClone(unitId);
    console.log("‚úÖ [1] CLEAR replacement unit —Å–æ–∑–¥–∞–Ω:", clearReplacement.serialNumber);

    // 2. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É (–æ–¥–∏–Ω–æ—á–Ω—É—é –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é) —Å —Ü–µ–Ω–æ–π
    console.log("üîÑ [2] –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...");
    const result = await RequestService.createRequest(unitId, quantity, pricePerUnit);

    if (result.success) {
      console.log("‚úÖ [2] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      
      return NextResponse.json({ 
        ok: true, 
        data: {
          ...result.data,
          clearReplacementUnit: clearReplacement
        },
        message: quantity === 1 
          ? "–û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞" 
          : `–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ${quantity} –µ–¥–∏–Ω–∏—Ü —Å–æ–∑–¥–∞–Ω–∞`
      });
    } else {
      console.error("‚ùå [2] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", result.error);
      return NextResponse.json({ 
        ok: false, 
        error: result.error 
      }, { status: 400 });
    }
  } catch (err: any) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /request:", err);
    return NextResponse.json({ 
      ok: false, 
      error: err.message 
    }, { status: 500 });
  }
}