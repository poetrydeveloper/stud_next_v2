// app/api/product-units/[id]/sprout/route.ts
import prisma from "@/app/lib/prisma";
import { NextResponse } from "next/server";
import { copyParentUnitData, generateSerialNumber } from "@/app/api/product-units/helpers";
import { ProductUnitCardStatus } from "@prisma/client";

export async function POST(req: Request, { params }: { params: { id: string } }) {
  console.log("=== API: CREATE SPROUTED REQUEST ===");
  
  const id = Number(params.id);
  console.log("üì• Sprout –¥–ª—è unit ID:", id);

  try {
    const body = await req.json();
    const { requests } = body;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ requests:", requests);

    if (!requests || !Array.isArray(requests) || requests.length === 0) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç requests");
      return NextResponse.json({ 
        ok: false, 
        error: "requests array required with at least one item" 
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ request
    for (const r of requests) {
      if (!r.quantity || r.quantity < 1) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ quantity –≤ request:", r);
        return NextResponse.json({ 
          ok: false, 
          error: "Each request must have quantity >= 1" 
        }, { status: 400 });
      }
      if (!r.pricePerUnit || r.pricePerUnit <= 0) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è pricePerUnit –≤ request:", r);
        return NextResponse.json({ 
          ok: false, 
          error: "Each request must have pricePerUnit > 0" 
        }, { status: 400 });
      }
    }

    console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è requests –ø—Ä–æ–π–¥–µ–Ω–∞");

    return await prisma.$transaction(async (tx) => {
      console.log("üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit
      const parent = await tx.productUnit.findUnique({ 
        where: { id },
        include: {
          product: {
            include: {
              brand: true,
              images: true,
              category: true
            }
          }
        }
      });
      
      if (!parent) {
        console.error("‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–µ –Ω–∞–π–¥–µ–Ω:", id);
        return NextResponse.json({ 
          ok: false, 
          error: "Parent unit not found" 
        }, { status: 404 });
      }

      console.log("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–∞–π–¥–µ–Ω:", parent.serialNumber);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
      if (parent.statusCard !== ProductUnitCardStatus.CANDIDATE) {
        console.error("‚ùå –†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ CANDIDATE:", parent.statusCard);
        return NextResponse.json({ 
          ok: false, 
          error: "Parent unit must be in CANDIDATE status" 
        }, { status: 400 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED...");
      const updatedParent = await tx.productUnit.update({
        where: { id },
        data: { 
          statusCard: "SPROUTED",
          logs: {
            create: {
              type: "SPROUTED",
              message: `Unit –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SPROUTED –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ${requests.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫`,
              meta: {
                childrenCount: requests.length,
                totalQuantity: requests.reduce((sum, r) => sum + r.quantity, 0)
              }
            }
          }
        },
      });

      console.log("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ SPROUTED");

      const createdChildren = [];
      let totalQuantity = 0;

      // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units
      console.log(`üîÑ –°–æ–∑–¥–∞–µ–º ${requests.length} –¥–æ—á–µ—Ä–Ω–∏—Ö units...`);
      
      for (const r of requests) {
        totalQuantity += r.quantity;
        
        console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π unit ${r.quantity} —à—Ç. –ø–æ —Ü–µ–Ω–µ ${r.pricePerUnit}...`);

        const childData = copyParentUnitData(parent, {
          quantityInRequest: r.quantity,
          requestPricePerUnit: r.pricePerUnit,
          serialNumber: await generateSerialNumber(prisma, parent.productId, parent.id),
          parentProductUnitId: parent.id,
          statusCard: "IN_REQUEST",
          createdAtRequest: new Date(),
        });

        const childUnit = await tx.productUnit.create({
          data: childData,
        });

        console.log(`‚úÖ –î–æ—á–µ—Ä–Ω–∏–π unit —Å–æ–∑–¥–∞–Ω: ${childUnit.serialNumber}`);

        createdChildren.push(childUnit);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
        await tx.productUnitLog.create({
          data: {
            productUnitId: childUnit.id,
            type: "CHILD_CREATED",
            message: `–î–æ—á–µ—Ä–Ω–∏–π unit —Å–æ–∑–¥–∞–Ω –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è ${parent.serialNumber}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${r.quantity}, —Ü–µ–Ω–∞: ${r.pricePerUnit}`,
            meta: {
              parentUnitId: parent.id,
              parentSerialNumber: parent.serialNumber,
              quantity: r.quantity,
              pricePerUnit: r.pricePerUnit
            }
          },
        });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é sprout —É —Ä–æ–¥–∏—Ç–µ–ª—è
      await tx.productUnitLog.create({
        data: {
          productUnitId: id,
          type: "SPROUT_COMPLETED",
          message: `–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Å–æ–∑–¥–∞–Ω–æ ${requests.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalQuantity}`,
          meta: {
            childrenCount: requests.length,
            totalQuantity: totalQuantity,
            children: createdChildren.map(c => ({
              id: c.id,
              serialNumber: c.serialNumber,
              quantity: requests.find(r => r.quantity === c.quantityInRequest)?.quantity
            }))
          }
        },
      });

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

      return NextResponse.json({ 
        ok: true, 
        data: {
          parent: updatedParent,
          children: createdChildren,
          childrenCount: requests.length,
          totalQuantity: totalQuantity
        },
        message: `–°–æ–∑–¥–∞–Ω–æ ${requests.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${totalQuantity} –µ–¥–∏–Ω–∏—Ü`
      });
    });

  } catch (err: any) {
    console.error("üí• –û—à–∏–±–∫–∞ –≤ sprout endpoint:", err);
    return NextResponse.json({ 
      ok: false, 
      error: err.message 
    }, { status: 500 });
  }
}