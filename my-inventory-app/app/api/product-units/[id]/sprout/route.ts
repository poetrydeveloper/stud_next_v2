// app/api/product-units/[id]/sprout/route.ts
import prisma from "@/app/lib/prisma";
import { NextResponse } from "next/server";
import { copyParentUnitData, generateSerialNumber, copyProductDataToUnit } from "@/app/api/product-units/helpers";
import { ProductUnitCardStatus } from "@prisma/client";

export async function POST(req: Request, { params }: { params: { id: string } }) {
  console.log("=== API: CREATE SPROUTED REQUEST ===");
  
  const { id } = await params;
  const unitId = Number(id);
  console.log("üì• Sprout –¥–ª—è unit ID:", unitId);

  try {
    const body = await req.json();
    const { requests } = body;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ requests:", requests);
    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ requests –î–ï–¢–ê–õ–¨–ù–û:", JSON.stringify(requests, null, 2));

    if (!requests || !Array.isArray(requests) || requests.length === 0) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç requests");
      return NextResponse.json({ 
        ok: false, 
        error: "requests array required with at least one item" 
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ request - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
    for (const r of requests) {
      if (!r.quantity || r.quantity < 1) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ quantity –≤ request:", r);
        return NextResponse.json({ 
          ok: false, 
          error: "Each request must have quantity >= 1" 
        }, { status: 400 });
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–ù–´
      if (r.pricePerUnit === undefined || r.pricePerUnit === null || r.pricePerUnit <= 0) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è pricePerUnit –≤ request:", r);
        return NextResponse.json({ 
          ok: false, 
          error: `Each request must have pricePerUnit > 0 (received: ${r.pricePerUnit})` 
        }, { status: 400 });
      }
    }

    console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è requests –ø—Ä–æ–π–¥–µ–Ω–∞");

    return await prisma.$transaction(async (tx) => {
      console.log("üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit
      const parent = await tx.productUnit.findUnique({ 
        where: { id: unitId },
        include: {
          product: {
            include: {
              brand: true,
              images: true,
              category: true
            }
          }
        }
      });
      
      if (!parent) {
        console.error("‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–µ –Ω–∞–π–¥–µ–Ω:", unitId);
        return NextResponse.json({ 
          ok: false, 
          error: "Parent unit not found" 
        }, { status: 404 });
      }

      console.log("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –Ω–∞–π–¥–µ–Ω:", parent.serialNumber);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
      if (parent.statusCard !== ProductUnitCardStatus.CANDIDATE) {
        console.error("‚ùå –†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ CANDIDATE:", parent.statusCard);
        return NextResponse.json({ 
          ok: false, 
          error: "Parent unit must be in CANDIDATE status" 
        }, { status: 400 });
      }

      // –°–æ–∑–¥–∞–µ–º CLEAR replacement unit (–î–û–ë–ê–í–õ–ï–ù–û)
      console.log("üîÑ –°–æ–∑–¥–∞–µ–º CLEAR replacement unit...");
      const clearReplacement = await tx.productUnit.create({
        data: {
          productId: parent.productId,
          spineId: parent.spineId,
          supplierId: parent.supplierId,
          ...copyProductDataToUnit(parent.product),
          serialNumber: await generateSerialNumber(prisma, parent.productId, undefined),
          statusCard: ProductUnitCardStatus.CLEAR,
          statusProduct: null,
          requestPricePerUnit: parent.requestPricePerUnit,
          logs: {
            create: {
              type: "CLEAR_REPLACEMENT",
              message: `CLEAR unit —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ –∑–∞–º–µ–Ω–∞ –¥–ª—è SPROUTED —Ä–æ–¥–∏—Ç–µ–ª—è`,
              meta: {
                parentUnitId: parent.id,
                parentSerialNumber: parent.serialNumber,
                purpose: "replacement_for_sprouted"
              }
            }
          }
        }
      });
      console.log("‚úÖ CLEAR replacement —Å–æ–∑–¥–∞–Ω:", clearReplacement.serialNumber);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED...");
      const updatedParent = await tx.productUnit.update({
        where: { id: unitId },
        data: { 
          statusCard: "SPROUTED",
          logs: {
            create: {
              type: "SPROUTED",
              message: `Unit –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SPROUTED –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫`,
              meta: {
                requestsCount: requests.length,
                totalQuantity: requests.reduce((sum, r) => sum + r.quantity, 0),
                prices: requests.map(r => r.pricePerUnit),
                clearReplacementUnitId: clearReplacement.id // –î–û–ë–ê–í–õ–ï–ù–û
              }
            }
          }
        },
      });

      console.log("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ SPROUTED");

      const createdChildren = [];
      let totalQuantity = 0;
      let childSequence = 0;

      // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units
      console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units...`);
      
      for (const r of requests) {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º request: ${r.quantity} —à—Ç. –ø–æ —Ü–µ–Ω–µ ${r.pricePerUnit}...`);
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π unit –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
        for (let i = 0; i < r.quantity; i++) {
          childSequence++;
          totalQuantity++;
          
          console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π unit ${childSequence}/${totalQuantity}...`);

          const childData = copyParentUnitData(parent, {
            quantityInRequest: 1, // ‚úÖ –ö–ê–ñ–î–´–ô unit = 1 —à—Ç—É–∫–∞
            requestPricePerUnit: r.pricePerUnit, // ‚úÖ –¶–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            serialNumber: `${parent.serialNumber}/child-${childSequence}`, // ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            parentProductUnitId: parent.id,
            statusCard: "IN_REQUEST",
            createdAtRequest: new Date(),
          });

          const childUnit = await tx.productUnit.create({
            data: childData,
          });

          console.log(`‚úÖ –î–æ—á–µ—Ä–Ω–∏–π unit —Å–æ–∑–¥–∞–Ω: ${childUnit.serialNumber}`);

          createdChildren.push(childUnit);

          // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
          await tx.productUnitLog.create({
            data: {
              productUnitId: childUnit.id,
              type: "CHILD_CREATED",
              message: `–î–æ—á–µ—Ä–Ω–∏–π unit —Å–æ–∑–¥–∞–Ω –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è ${parent.serialNumber}, —Ü–µ–Ω–∞: ${r.pricePerUnit} ‚ÇΩ`,
              meta: {
                parentUnitId: parent.id,
                parentSerialNumber: parent.serialNumber,
                sequence: childSequence,
                totalQuantity: totalQuantity,
                pricePerUnit: r.pricePerUnit,
                requestIndex: requests.indexOf(r) + 1
              }
            },
          });
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é sprout —É —Ä–æ–¥–∏—Ç–µ–ª—è
      await tx.productUnitLog.create({
        data: {
          productUnitId: unitId,
          type: "SPROUT_COMPLETED",
          message: `–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Å–æ–∑–¥–∞–Ω–æ ${createdChildren.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∏ CLEAR –∑–∞–º–µ–Ω–∞`,
          meta: {
            childrenCount: createdChildren.length,
            totalQuantity: totalQuantity,
            clearReplacementUnitId: clearReplacement.id, // –î–û–ë–ê–í–õ–ï–ù–û
            clearReplacementSerialNumber: clearReplacement.serialNumber, // –î–û–ë–ê–í–õ–ï–ù–û
            requests: requests.map(r => ({
              quantity: r.quantity,
              pricePerUnit: r.pricePerUnit
            })),
            children: createdChildren.map(c => ({
              id: c.id,
              serialNumber: c.serialNumber,
              pricePerUnit: c.requestPricePerUnit
            }))
          }
        },
      });

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdChildren.length} –¥–æ—á–µ—Ä–Ω–∏—Ö units –∏ 1 CLEAR replacement`);

      return NextResponse.json({ 
        ok: true, 
        data: {
          parent: updatedParent,
          children: createdChildren,
          clearReplacementUnit: clearReplacement, // –î–û–ë–ê–í–õ–ï–ù–û
          childrenCount: createdChildren.length,
          totalQuantity: totalQuantity,
          requests: requests
        },
        message: `–°–æ–∑–¥–∞–Ω–æ ${createdChildren.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∏ CLEAR –∑–∞–º–µ–Ω–∞`
      });
    });

  } catch (err: any) {
    console.error("üí• –û—à–∏–±–∫–∞ –≤ sprout endpoint:", err);
    return NextResponse.json({ 
      ok: false, 
      error: err.message 
    }, { status: 500 });
  }
}