// app/api/product-unit/create-from-product/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { ProductUnitCardStatus } from "@prisma/client";
import { generateSerialNumber, appendLog, recalcProductUnitStats } from "../helpers";

/**
 * POST /api/product-unit/create-from-product
 * body: { productId: number }
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ProductUnit –Ω–∞ –æ—Å–Ω–æ–≤–µ Product
 */
export async function POST(req: Request) {
  console.log("=== API: CREATE PRODUCT UNIT FROM PRODUCT ===");
  console.log("üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ ProductUnit");
  
  try {
    const body = await req.json();
    const { productId } = body;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { productId });

    if (!productId) {
      console.error("‚ùå –û—à–∏–±–∫–∞: productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
      return NextResponse.json({ ok: false, error: "productId required" }, { status: 400 });
    }

    console.log("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ...");
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: { category: true, spine: true, images: true },
    });

    console.log("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:", {
      id: product?.id,
      name: product?.name,
      code: product?.code,
      spineId: product?.spineId,
      spineName: product?.spine?.name,
      categoryId: product?.categoryId,
      categoryName: product?.category?.name
    });

    if (!product) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return NextResponse.json({ ok: false, error: "Product not found" }, { status: 404 });
    }

    if (!product.spineId) {
      console.error("‚ùå –û—à–∏–±–∫–∞: —É –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Spine");
      console.log("üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ:", {
        productId: product.id,
        productName: product.name,
        hasSpine: !!product.spineId,
        spine: product.spine
      });
      return NextResponse.json({
        ok: false,
        error: "–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Spine. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç.",
      }, { status: 400 });
    }

    console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≤–∞–ª–∏–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä...");
    const serialNumber = await generateSerialNumber(prisma, productId, null);
    console.log("üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", serialNumber);

    console.log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ ProductUnit –≤ –±–∞–∑–µ...");
    const newUnit = await prisma.productUnit.create({
      data: {
        productId: product.id,
        spineId: product.spineId,
        productCode: product.code,
        productName: product.name,
        productDescription: product.description,
        productCategoryId: product.categoryId,
        productCategoryName: product.category?.name,
        serialNumber,
        statusCard: ProductUnitCardStatus.CLEAR,
        logs: appendLog([], {
          event: "AUTO_CREATED_FROM_PRODUCT",
          at: new Date().toISOString(),
          spineId: product.spineId,
        }),
      },
    });

    console.log("‚úÖ ProductUnit —Å–æ–∑–¥–∞–Ω:", {
      id: newUnit.id,
      serialNumber: newUnit.serialNumber,
      spineId: newUnit.spineId,
      productId: newUnit.productId
    });

    console.log("üìä –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞...");
    await recalcProductUnitStats(productId);

    console.log("üéâ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É.");
    return NextResponse.json({ 
      ok: true, 
      data: newUnit 
    });

  } catch (err: any) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:", {
      error: err.message,
      stack: err.stack,
      name: err.name
    });
    return NextResponse.json({ 
      ok: false, 
      error: err.message 
    }, { status: 500 });
  }
}