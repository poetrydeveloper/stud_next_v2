// app/api/product-units/create/route.ts
import { NextResponse } from "next/server";
import prisma from "@/app/lib/prisma";
import { ProductUnitCardStatus } from "@prisma/client";
import { generateSerialNumber, recalcProductUnitStats, copyProductDataToUnit } from "@/app/api/product-units/helpers";

export async function POST(req: Request) {
  console.log("=== API: CREATE PRODUCT UNIT FROM PRODUCT ===");
  
  try {
    const body = await req.json();
    const { productId, supplierId, requestPricePerUnit } = body; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û supplierId

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { productId, supplierId, requestPricePerUnit });

    if (!productId) {
      return NextResponse.json({ ok: false, error: "productId required" }, { status: 400 });
    }

    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: { category: true, spine: true, images: true, brand: true },
    });

    if (!product) {
      return NextResponse.json({ ok: false, error: "Product not found" }, { status: 404 });
    }

    if (!product.spineId) {
      return NextResponse.json({
        ok: false,
        error: "–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Spine. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç.",
      }, { status: 400 });
    }

    const serialNumber = await generateSerialNumber(prisma, productId, null);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–æ–ø–∏—Ä—É–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
    const unitData = {
      productId: product.id,
      spineId: product.spineId,
      supplierId: supplierId || null, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
      ...copyProductDataToUnit(product), // –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      serialNumber,
      statusCard: ProductUnitCardStatus.CLEAR,
      requestPricePerUnit: requestPricePerUnit || null, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
      logs: {
        create: {
          type: "SYSTEM",
          message: `Unit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.name}`,
        },
      },
    };

    const newUnit = await prisma.productUnit.create({
      data: unitData,
      include: { logs: true, supplier: true, spine: true },
    });

    await recalcProductUnitStats(productId);

    return NextResponse.json({ 
      ok: true, 
      data: newUnit 
    });

  } catch (err: any) {
    console.error("üí• –û—à–∏–±–∫–∞ –≤ API:", err);
    return NextResponse.json({ ok: false, error: err.message }, { status: 500 });
  }
}