// app/api/product-units/create-request/route.ts
import { NextResponse } from "next/server";
import { RequestService } from "@/app/lib/requestService";

export async function POST(req: Request) {
  console.log("=== API: CREATE PRODUCT UNIT REQUEST ===");
  
  try {
    const body = await req.json();
    const { unitId, quantity } = body;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { unitId, quantity });

    if (!unitId || !quantity) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
      return NextResponse.json({ 
        ok: false, 
        error: "unitId and quantity required" 
      }, { status: 400 });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const result = await RequestService.createRequest(unitId, quantity);

    if (result.success) {
      console.log("üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", result.data);
      return NextResponse.json({ 
        ok: true, 
        data: result.data 
      });
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", result.error);
      return NextResponse.json({ 
        ok: false, 
        error: result.error 
      }, { status: 400 });
    }

  } catch (err: any) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:", {
      error: err.message,
      stack: err.stack
    });
    return NextResponse.json({ 
      ok: false, 
      error: err.message 
    }, { status: 500 });
  }
}