import { ProductUnitPhysicalStatus, UnitDisassemblyStatus } from "@prisma/client";
import prisma from "./prisma";

interface CreateScenarioData {
  name: string;
  parentProductCode: string;
  childProductCodes: string[];
}

interface ExecuteDisassemblyData {
  unitId: number;
  scenarioId: number;
}

interface ExecuteAssemblyData {
  parentUnitId: number;
  childUnitIds: number[];
  scenarioId?: number;
}

export class DisassemblyService {
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–∑–±–æ—Ä–∫–∏
  static async createScenario(data: CreateScenarioData) {
    const parentProduct = await prisma.product.findUnique({
      where: { code: data.parentProductCode }
    });

    if (!parentProduct) {
      throw new Error(`–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å –∫–æ–¥–æ–º "${data.parentProductCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const childProducts = await prisma.product.findMany({
      where: { code: { in: data.childProductCodes } }
    });

    if (childProducts.length !== data.childProductCodes.length) {
      const foundCodes = childProducts.map(p => p.code);
      const missingCodes = data.childProductCodes.filter(code => !foundCodes.includes(code));
      throw new Error(`–î–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${missingCodes.join(', ')}`);
    }

    const existingScenario = await prisma.disassemblyScenario.findFirst({
      where: { 
        parentProductCode: data.parentProductCode,
        name: data.name 
      }
    });

    if (existingScenario) {
      throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    return prisma.disassemblyScenario.create({
      data: {
        name: data.name,
        parentProductCode: data.parentProductCode,
        childProductCodes: data.childProductCodes,
        partsCount: data.childProductCodes.length,
        isActive: true
      }
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∫–∏
  static async executeDisassembly(data: ExecuteDisassemblyData) {
    return prisma.$transaction(async (tx) => {
      console.log('üîç DisassemblyService.executeDisassembly:', data);

      const scenario = await tx.disassemblyScenario.findUnique({
        where: { id: data.scenarioId }
      });

      if (!scenario) {
        throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (!scenario.isActive) {
        throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      }

      const parentUnit = await tx.productUnit.findUnique({
        where: { id: data.unitId },
        include: { product: true }
      });

      if (!parentUnit) {
        throw new Error('Unit –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const unitProductCode = parentUnit.productCode || parentUnit.product?.code;
      if (unitProductCode !== scenario.parentProductCode) {
        throw new Error(`–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ unit. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç: ${scenario.parentProductCode}, –ø–æ–ª—É—á–µ–Ω: ${unitProductCode}`);
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º RESTORED –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∫–∏
      const allowedDisassemblyStatuses = [
        UnitDisassemblyStatus.MONOLITH,
        UnitDisassemblyStatus.RESTORED
      ];

      if (parentUnit.statusProduct !== ProductUnitPhysicalStatus.IN_STORE ||
          !allowedDisassemblyStatuses.includes(parentUnit.disassemblyStatus)) {
        throw new Error('Unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IN_STORE –∏ MONOLITH –∏–ª–∏ RESTORED –¥–ª—è —Ä–∞–∑–±–æ—Ä–∫–∏');
      }

      const childProducts = await tx.product.findMany({
        where: { code: { in: scenario.childProductCodes as string[] } }
      });

      if (childProducts.length !== scenario.partsCount) {
        throw new Error('–ù–µ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ');
      }

      // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units
      const childUnits = [];
      for (const product of childProducts) {
        const childUnit = await tx.productUnit.create({
          data: {
            serialNumber: `${parentUnit.serialNumber}_PART_${Date.now()}_${product.id}`,
            productId: product.id,
            spineId: parentUnit.spineId,
            productCode: product.code,
            productName: product.name,
            productDescription: product.description,
            productCategoryId: product.categoryId,
            statusCard: 'ARRIVED',
            statusProduct: ProductUnitPhysicalStatus.IN_STORE,
            disassemblyStatus: UnitDisassemblyStatus.PARTIAL,
            disassembledParentId: parentUnit.id,
            isParsingAlgorithm: false,
            supplierId: parentUnit.supplierId,
            customerId: null
          }
        });
        childUnits.push(childUnit);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Unit
      const updatedParent = await tx.productUnit.update({
        where: { id: parentUnit.id },
        data: {
          statusProduct: ProductUnitPhysicalStatus.IN_DISASSEMBLED,
          disassemblyStatus: UnitDisassemblyStatus.DISASSEMBLED,
          isParsingAlgorithm: false,
          disassemblyScenarioId: scenario.id
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      for (const unit of [updatedParent, ...childUnits]) {
        await tx.productUnitLog.create({
          data: {
            productUnitId: unit.id,
            type: 'DISASSEMBLY_OPERATION',
            message: `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∞. –†–æ–¥–∏—Ç–µ–ª—å: ${parentUnit.id}, –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.id}`,
            meta: {
              operation: 'disassembly',
              parentUnitId: parentUnit.id,
              scenarioId: scenario.id,
              parentProductCode: scenario.parentProductCode,
              childProductCodes: scenario.childProductCodes,
              timestamp: new Date()
            }
          }
        });
      }

      console.log('‚úÖ DisassemblyService.executeDisassembly —É—Å–ø–µ—à–Ω–æ:', {
        parentUnitId: updatedParent.id,
        childUnitsCount: childUnits.length,
        scenarioId: scenario.id
      });

      return {
        parentUnit: updatedParent,
        childUnits,
        scenario
      };
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
  static async executeAssembly(data: ExecuteAssemblyData) {
    return prisma.$transaction(async (tx) => {
      console.log('üîç DisassemblyService.executeAssembly:', data);

      const parentUnit = await tx.productUnit.findUnique({
        where: { id: data.parentUnitId }
      });

      if (!parentUnit) {
        throw new Error('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Unit –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (parentUnit.statusProduct !== ProductUnitPhysicalStatus.IN_DISASSEMBLED) {
        throw new Error('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Unit –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_DISASSEMBLED');
      }

      // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      const childUnits = await tx.productUnit.findMany({
        where: { 
          id: { in: data.childUnitIds },
          statusProduct: ProductUnitPhysicalStatus.IN_STORE,
          disassemblyStatus: {
            in: [UnitDisassemblyStatus.PARTIAL, UnitDisassemblyStatus.MONOLITH]
          }
        }
      });

      console.log('üîç Available child units for assembly:', {
        requestedIds: data.childUnitIds,
        foundIds: childUnits.map(u => u.id),
        foundCount: childUnits.length,
        requestedCount: data.childUnitIds.length
      });

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      if (childUnits.length !== data.childUnitIds.length) {
        const foundIds = childUnits.map(u => u.id);
        const missingIds = data.childUnitIds.filter(id => !foundIds.includes(id));
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö units –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const unavailableUnits = await tx.productUnit.findMany({
          where: { id: { in: missingIds } },
          select: {
            id: true,
            statusProduct: true,
            disassemblyStatus: true,
            serialNumber: true
          }
        });

        console.error('‚ùå Unavailable units for assembly:', unavailableUnits);
        
        throw new Error(
          `–ù–µ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ Unit –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–±–æ—Ä–∫–∏. ` +
          `–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${missingIds.join(', ')}. ` +
          `–ü—Ä–∏—á–∏–Ω–∞: ${unavailableUnits.map(u => 
            `ID ${u.id} (${u.serialNumber}): status=${u.statusProduct}, disassembly=${u.disassemblyStatus}`
          ).join('; ')}`
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–µ—Ç–µ–π
      await tx.productUnit.updateMany({
        where: { id: { in: data.childUnitIds } },
        data: {
          statusProduct: ProductUnitPhysicalStatus.IN_COLLECTED,
          disassemblyStatus: UnitDisassemblyStatus.COLLECTED,
          disassembledParentId: null
        }
      });

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
      const restoredParent = await tx.productUnit.update({
        where: { id: data.parentUnitId },
        data: {
          statusProduct: ProductUnitPhysicalStatus.IN_STORE,
          disassemblyStatus: UnitDisassemblyStatus.RESTORED,
          disassemblyScenarioId: data.scenarioId || null
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      for (const unit of [restoredParent, ...childUnits]) {
        await tx.productUnitLog.create({
          data: {
            productUnitId: unit.id,
            type: 'ASSEMBLY_OPERATION',
            message: `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞. –†–æ–¥–∏—Ç–µ–ª—å: ${parentUnit.id}, –î–µ—Ç–∏: ${data.childUnitIds.join(', ')}`,
            meta: {
              operation: 'assembly', 
              parentUnitId: parentUnit.id,
              childUnitIds: data.childUnitIds,
              scenarioId: data.scenarioId,
              timestamp: new Date()
            }
          }
        });
      }

      console.log('‚úÖ DisassemblyService.executeAssembly —É—Å–ø–µ—à–Ω–æ:', {
        parentUnitId: restoredParent.id,
        childUnitsCount: childUnits.length,
        newParentStatus: restoredParent.statusProduct,
        newParentDisassemblyStatus: restoredParent.disassemblyStatus
      });

      return {
        parentUnit: restoredParent,
        childUnits
      };
    });
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
  static async validateScenario(scenarioId: number) {
    const scenario = await prisma.disassemblyScenario.findUnique({
      where: { id: scenarioId }
    });

    if (!scenario) {
      throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const products = await prisma.product.findMany({
      where: { code: { in: scenario.childProductCodes as string[] } }
    });

    const isValid = products.length === scenario.partsCount;
    const missingProducts = scenario.partsCount - products.length;

    return {
      isValid,
      scenario,
      productsFound: products.length,
      productsRequired: scenario.partsCount,
      missingProducts,
      canExecute: isValid
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ ID
  static async getScenario(id: number) {
    return prisma.disassemblyScenario.findUnique({
      where: { id }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è unit - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î
  static async getUnitScenarios(unitId: number) {
    const unit = await prisma.productUnit.findUnique({
      where: { id: unitId },
      include: { product: true }
    });

    if (!unit) {
      return [];
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∫–∏
    const allowedDisassemblyStatuses = [
      UnitDisassemblyStatus.MONOLITH,
      UnitDisassemblyStatus.RESTORED  // –î–û–ë–ê–í–õ–ï–ù–û RESTORED
    ];

    if (!allowedDisassemblyStatuses.includes(unit.disassemblyStatus) || 
        unit.statusProduct !== ProductUnitPhysicalStatus.IN_STORE) {
      return [];
    }

    const unitProductCode = unit.productCode || unit.product?.code;
    
    return prisma.disassemblyScenario.findMany({
      where: { 
        parentProductCode: unitProductCode,
        isActive: true 
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  static async getAllScenarios(includeInactive: boolean = false) {
    return prisma.disassemblyScenario.findMany({
      where: includeInactive ? {} : { isActive: true },
      orderBy: { createdAt: 'desc' }
    });
  }

  // –ü–æ–∏—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ –∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞
  static async getScenariosByProductCode(productCode: string) {
    return prisma.disassemblyScenario.findMany({
      where: { 
        parentProductCode: productCode,
        isActive: true 
      }
    });
  }
}