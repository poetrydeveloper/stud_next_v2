import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import { Octokit } from 'octokit';

export class ImageSyncService {
  private octokit: Octokit;

  constructor() {
    this.octokit = new Octokit({ 
      auth: process.env.GITHUB_MEDIA_TOKEN
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
   */
  async getImageUrl(imagePath: string): Promise<string> {
    console.log('üîÑ ImageSyncService: –ø–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è', imagePath);
    
    const localPath = join(process.cwd(), 'public', imagePath);
    
    // 1. –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (existsSync(localPath)) {
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω:', imagePath);
      return imagePath;
    }

    console.log('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º GitHub...');

    // 2. –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ - –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ GitHub
    try {
      await this.syncImageFromGitHub(imagePath);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ GitHub:', imagePath);
      return imagePath;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ GitHub:', {
        imagePath,
        error: error.message
      });
      
      // 3. –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å githubUrl - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
      const imageRecord = await this.findImageInDatabase(imagePath);
      if (imageRecord?.githubUrl) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub URL –∏–∑ –ë–î:', imageRecord.githubUrl);
        return imageRecord.githubUrl;
      }

      console.log('‚ö†Ô∏è  –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä');
      
      // 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return '/images/placeholder.svg';
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ GitHub
   */
  private async syncImageFromGitHub(imagePath: string): Promise<void> {
    const owner = process.env.GITHUB_MEDIA_OWNER || 'poetrydeveloper';
    const repo = process.env.GITHUB_MEDIA_REPO || 'my-inventory-app_media';
    const branch = process.env.GITHUB_MEDIA_BRANCH || 'main';

    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª—ç—à –ò –ø–∞–ø–∫—É media/ –¥–ª—è GitHub –ø—É—Ç–∏
    let githubPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'media/' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (githubPath.startsWith('media/')) {
      githubPath = githubPath.slice(6); // —É–±–∏—Ä–∞–µ–º 'media/'
    }

    console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ GitHub API:', {
      owner,
      repo,
      branch,
      githubPath,
      originalPath: imagePath
    });

    try {
      const response = await this.octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
        owner,
        repo,
        path: githubPath,
        branch,
      });

      console.log('üìä –û—Ç–≤–µ—Ç GitHub API:', {
        status: response.status,
        type: response.data.type,
        size: response.data.size,
        name: response.data.name
      });

      if (response.data.type === 'file') {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∫–æ–Ω—Ç–µ–Ω—Ç
        const content = Buffer.from(response.data.content, 'base64');
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º –≤–∫–ª—é—á–∞—è media/)
        const localDir = join(process.cwd(), 'public', ...imagePath.split('/').slice(0, -1));
        console.log('üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', localDir);
        mkdirSync(localDir, { recursive: true });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        const localPath = join(process.cwd(), 'public', imagePath);
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:', localPath);
        writeFileSync(localPath, content);
        
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ GitHub:', imagePath);
      } else {
        throw new Error(`GitHub path is not a file: ${response.data.type}`);
      }
    } catch (error: any) {
      console.error('üí• –û—à–∏–±–∫–∞ GitHub API:', {
        githubPath,
        originalPath: imagePath,
        status: error.status,
        message: error.message,
        response: error.response?.data
      });
      throw new Error(`Image not found in GitHub: ${githubPath} - ${error.message}`);
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î –ø–æ –ø—É—Ç–∏
   */
  private async findImageInDatabase(imagePath: string) {
    console.log('üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î –ø–æ –ø—É—Ç–∏:', imagePath);
    // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Prisma –∑–∞–ø—Ä–æ—Å
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    return null;
  }
}