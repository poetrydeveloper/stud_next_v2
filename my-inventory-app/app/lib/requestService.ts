// app/lib/requestService.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { RequestValidator } from '@/app/lib/requestValidator';
import prisma from '@/app/lib/prisma'

export class RequestService {
  static async createRequest(unitId: number, quantity: number, requestPricePerUnit?: number): Promise<CreateRequestResult> {
    const validator = new RequestValidator(`create-request-${unitId}-${Date.now()}`);

    try {
      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await validator.validateStep('input_validation', 
        async () => unitId > 0 && quantity > 0, 
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
      );

      const parentUnit = await prisma.productUnit.findUnique({
        where: { id: unitId },
        include: { product: true },
      });

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è unit
      await validator.validateStep('unit_exists',
        async () => !!parentUnit,
        'Unit —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ'
      );

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CANDIDATE
      await validator.validateStep('unit_is_candidate',
        async () => parentUnit!.statusCard === ProductUnitCardStatus.CANDIDATE,
        'Unit –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å CANDIDATE'
      );

      if (quantity === 1) {
        return await this.createSingleRequest(parentUnit!, requestPricePerUnit, validator);
      } else {
        return await this.createMultipleRequests(parentUnit!, quantity, requestPricePerUnit, validator);
      }
    } catch (err: any) {
      validator.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
      const report = validator.printFinalReport();
      return { success: false, error: err.message, validationReport: report };
    }
  }

  private static async createMultipleRequests(parentUnit: any, quantity: number, requestPricePerUnit?: number, validator?: RequestValidator): Promise<CreateRequestResult> {
    return await prisma.$transaction(async (tx) => {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ CLEAR –∫–ª–æ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      validator?.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ CLEAR –∫–ª–æ–Ω–∞...');
      const newClearUnit = await UnitCloneHelper.createClearClone(parentUnit.id);
      
      await validator?.validateStep('clear_clone_created',
        async () => {
          const unit = await tx.productUnit.findUnique({ where: { id: newClearUnit.id } });
          return unit?.statusCard === 'CLEAR';
        },
        'CLEAR –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
      );

      // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED
      validator?.log('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ SPROUTED...');
      const sproutedUnit = await tx.productUnit.update({
        where: { id: parentUnit.id },
        data: { statusCard: ProductUnitCardStatus.SPROUTED }
      });

      await validator?.validateStep('parent_sprouted',
        async () => sproutedUnit.statusCard === 'SPROUTED',
        '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π unit –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ SPROUTED'
      );

      // 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö units —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      validator?.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ ${quantity} –¥–æ—á–µ—Ä–Ω–∏—Ö units...`);
      const childUnits = [];
      
      for (let i = 1; i <= quantity; i++) {
        const childUnit = await tx.productUnit.create({
          data: { /* ... –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞ ... */ }
        });
        childUnits.push(childUnit);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
        await validator?.validateStep(`child_${i}_created`,
          async () => {
            const unit = await tx.productUnit.findUnique({ where: { id: childUnit.id } });
            return unit?.statusCard === 'IN_REQUEST' && unit.parentProductUnitId === parentUnit.id;
          },
          `–î–æ—á–µ—Ä–Ω–∏–π unit ${i}/${quantity} —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω`
        );
      }

      // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
      await validator?.validateStep('final_integrity_check',
        async () => {
          const childrenCount = await tx.productUnit.count({
            where: { parentProductUnitId: parentUnit.id, statusCard: 'IN_REQUEST' }
          });
          return childrenCount === quantity;
        },
        `–í—Å–µ ${quantity} –¥–æ—á–µ—Ä–Ω–∏—Ö units —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã`
      );

      const result = { 
        success: true, 
        data: { /* ... –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ... */ } 
      };

      // –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      if (validator) {
        const report = validator.printFinalReport();
        result.validationReport = report;
      }

      return result;
    });
  }
}