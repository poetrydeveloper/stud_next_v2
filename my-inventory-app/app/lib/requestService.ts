// app/lib/requestService.ts
import { PrismaClient, ProductUnitCardStatus } from '@prisma/client';
import { generateSerialNumber, appendLog, recalcProductUnitStats } from '@/app/api/product-units/helpers';

const prisma = new PrismaClient();

export interface CreateRequestResult {
  success: boolean;
  data?: any;
  error?: string;
}

export class RequestService {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è product unit
   */
  static async createRequest(unitId: number, quantity: number): Promise<CreateRequestResult> {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", { unitId, quantity });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é unit
      console.log("üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π unit:", unitId);
      const parentUnit = await prisma.productUnit.findUnique({
        where: { id: unitId },
        include: { product: true }
      });

      if (!parentUnit) {
        console.error("‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è unit –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return { success: false, error: "ProductUnit not found" };
      }

      console.log("üìã –î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π unit:", {
        id: parentUnit.id,
        statusCard: parentUnit.statusCard,
        productId: parentUnit.productId,
        productName: parentUnit.productName
      });

      if (parentUnit.statusCard !== ProductUnitCardStatus.CANDIDATE) {
        console.error("‚ùå Unit –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º:", parentUnit.statusCard);
        return { success: false, error: "Unit is not a candidate" };
      }

      if (quantity === 1) {
        console.log("üî∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è 1 –µ–¥–∏–Ω–∏—Ü—ã");
        return await this.createSingleRequest(parentUnit);
      } else {
        console.log("üî∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü:", quantity);
        return await this.createMultipleRequests(parentUnit, quantity);
      }

    } catch (error: any) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ createRequest:", {
        error: error.message,
        stack: error.stack
      });
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
   */
  private static async createSingleRequest(parentUnit: any): Promise<CreateRequestResult> {
    try {
      console.log("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ unit –Ω–∞ IN_REQUEST");
      
      const updatedUnit = await prisma.productUnit.update({
        where: { id: parentUnit.id },
        data: {
          statusCard: ProductUnitCardStatus.IN_REQUEST,
          quantityInRequest: 1,
          createdAtRequest: new Date(),
          logs: appendLog(parentUnit.logs || [], {
            event: "MOVED_TO_REQUEST",
            at: new Date().toISOString(),
            quantity: 1,
            type: "SINGLE"
          }),
        },
      });

      console.log("‚úÖ Unit –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", updatedUnit.id);

      await recalcProductUnitStats(parentUnit.productId);
      console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞");

      return { 
        success: true, 
        data: { 
          type: "single",
          unit: updatedUnit 
        } 
      };

    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏:", error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü (sprouted logic)
   */
  private static async createMultipleRequests(parentUnit: any, quantity: number): Promise<CreateRequestResult> {
    console.log("üå± –ó–∞–ø—É—Å–∫ sprouted –ª–æ–≥–∏–∫–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", quantity);
    
    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é unit –≤ —Å—Ç–∞—Ç—É—Å SPROUTED
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π unit –≤ SPROUTED");
      const sproutedUnit = await prisma.productUnit.update({
        where: { id: parentUnit.id },
        data: {
          statusCard: ProductUnitCardStatus.SPROUTED,
          logs: appendLog(parentUnit.logs || [], {
            event: "SPROUTED",
            at: new Date().toISOString(),
            quantity: quantity,
            childrenCount: quantity,
            type: "MULTIPLE"
          }),
        },
      });

      console.log("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è unit –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", sproutedUnit.id);

      // 2. –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ units
      console.log("üë∂ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö units...");
      const childUnits = [];

      for (let i = 1; i <= quantity; i++) {
        console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–π unit ${i}/${quantity}`);
        
        const serialNumber = await generateSerialNumber(prisma, parentUnit.productId, parentUnit.id, i, quantity);
        
        console.log("üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", serialNumber);

        const childUnit = await prisma.productUnit.create({
          data: {
            productId: parentUnit.productId,
            spineId: parentUnit.spineId,
            parentProductUnitId: parentUnit.id,
            productCode: parentUnit.productCode,
            productName: parentUnit.productName,
            productDescription: parentUnit.productDescription,
            productCategoryId: parentUnit.productCategoryId,
            productCategoryName: parentUnit.productCategoryName,
            serialNumber,
            statusCard: ProductUnitCardStatus.IN_REQUEST,
            quantityInRequest: 1,
            createdAtRequest: new Date(),
            requestPricePerUnit: parentUnit.requestPricePerUnit,
            logs: appendLog([], {
              event: "CREATED_FROM_SPROUTED",
              at: new Date().toISOString(),
              parentUnitId: parentUnit.id,
              index: i,
              total: quantity,
              sproutedFrom: parentUnit.serialNumber
            }),
          },
        });

        console.log("‚úÖ –î–æ—á–µ—Ä–Ω—è—è unit —Å–æ–∑–¥–∞–Ω–∞:", childUnit.id);
        childUnits.push(childUnit);
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è...");
      const createdCount = childUnits.length;
      if (createdCount !== quantity) {
        console.error("‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö units:", {
          expected: quantity,
          created: createdCount
        });
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–¥–µ—Å—å
      } else {
        console.log("‚úÖ –í—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ units —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await recalcProductUnitStats(parentUnit.productId);
      console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞");

      return { 
        success: true, 
        data: { 
          type: "multiple",
          sprouted: sproutedUnit,
          children: childUnits,
          childrenCount: childUnits.length
        } 
      };

    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏:", error);
      throw error;
    }
  }
}