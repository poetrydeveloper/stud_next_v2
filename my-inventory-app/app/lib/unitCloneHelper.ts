// app/lib/unitCloneHelper.ts
import { PrismaClient, ProductUnitCardStatus } from '@prisma/client';
import { generateSerialNumber, copyProductDataToUnit } from '@/app/api/product-units/helpers';

const prisma = new PrismaClient();

export class UnitCloneHelper {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é CLEAR unit –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞)
   */
  static async createClearClone(sourceUnitId: number): Promise<any> {
    console.log("üîÑ UnitCloneHelper: —Å–æ–∑–¥–∞–µ–º CLEAR –∫–ª–æ–Ω –∏–∑ unit:", sourceUnitId);

    const sourceUnit = await prisma.productUnit.findUnique({
      where: { id: sourceUnitId },
      include: { 
        product: {
          include: {
            brand: true,
            images: true,
            category: true
          }
        } 
      }
    });

    if (!sourceUnit) {
      throw new Error('Source unit not found');
    }

    const newSerialNumber = await generateSerialNumber(prisma, sourceUnit.productId, undefined);

    const newUnit = await prisma.productUnit.create({
      data: {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        productId: sourceUnit.productId,
        spineId: sourceUnit.spineId,
        supplierId: sourceUnit.supplierId,
        
        // –î—É–±–ª–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Product (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        ...copyProductDataToUnit(sourceUnit.product),
        
        // –°—Ç–∞—Ç—É—Å CLEAR –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        statusCard: ProductUnitCardStatus.CLEAR,
        statusProduct: null,
        serialNumber: newSerialNumber,
        requestPricePerUnit: sourceUnit.requestPricePerUnit,
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        logs: {
          create: {
            type: "CLONE_CREATED",
            message: `CLEAR unit —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ –∑–∞–º–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞`,
            meta: {
              sourceUnitId: sourceUnit.id,
              sourceSerialNumber: sourceUnit.serialNumber,
              purpose: "replacement_for_candidate"
            }
          }
        }
      },
      include: {
        product: {
          include: {
            brand: true,
            images: true
          }
        }
      }
    });

    console.log("‚úÖ UnitCloneHelper: CLEAR –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω:", newUnit.serialNumber);
    return newUnit;
  }
}