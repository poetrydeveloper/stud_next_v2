// app/lib/unitCloneHelper.ts
import { PrismaClient, ProductUnitCardStatus } from '@prisma/client';
import { generateSerialNumber, copyProductDataToUnit } from '@/app/api/product-units/helpers';

import { prisma } from '@/app/lib/prisma';

export class UnitCloneHelper {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é CLEAR unit –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞)
   */
  static async createClearClone(sourceUnitId: number): Promise<any> {
    console.log("üîÑ UnitCloneHelper: —Å–æ–∑–¥–∞–µ–º CLEAR –∫–ª–æ–Ω –∏–∑ unit:", sourceUnitId);

    const sourceUnit = await prisma.productUnit.findUnique({
      where: { id: sourceUnitId },
      include: { 
        product: {
          include: {
            brand: true,
            images: true,
            category: true
          }
        },
        logs: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    if (!sourceUnit) {
      throw new Error('Source unit not found');
    }

    const newSerialNumber = await generateSerialNumber(prisma, sourceUnit.productId, undefined);

    console.log("üìù –°–æ–∑–¥–∞–µ–º CLEAR –∫–ª–æ–Ω —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º:", newSerialNumber);

    const newUnit = await prisma.productUnit.create({
      data: {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        productId: sourceUnit.productId,
        spineId: sourceUnit.spineId,
        supplierId: sourceUnit.supplierId,
        
        // –î—É–±–ª–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Product
        ...copyProductDataToUnit(sourceUnit.product),
        
        // –°—Ç–∞—Ç—É—Å CLEAR –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        statusCard: ProductUnitCardStatus.CLEAR,
        statusProduct: null,
        serialNumber: newSerialNumber,
        requestPricePerUnit: sourceUnit.requestPricePerUnit,
        
        // üî• –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –õ–û–ì–ê
        logs: {
          create: {
            type: "SYSTEM",
            message: `CLEAR unit —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∑–∞–º–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ #${sourceUnit.serialNumber}`,
            meta: {
              sourceUnitId: sourceUnit.id,
              sourceSerialNumber: sourceUnit.serialNumber,
              sourceLastLog: sourceUnit.logs[0]?.message,
              purpose: "replacement_for_candidate"
            }
          }
        }
      },
      include: {
        logs: {
          orderBy: { createdAt: 'desc' }
        },
        product: {
          include: {
            brand: true,
            images: true
          }
        }
      }
    });

    console.log("‚úÖ UnitCloneHelper: CLEAR –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω:", {
      newUnitId: newUnit.id,
      newSerialNumber: newUnit.serialNumber,
      logsCreated: newUnit.logs.length,
      logMessage: newUnit.logs[0]?.message
    });

    return newUnit;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —é–Ω–∏—Ç—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
   */
  static async createChildUnitsForRequest(
    parentUnitId: number, 
    quantity: number, 
    pricePerUnit: number
  ): Promise<any[]> {
    console.log("üîÑ –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —é–Ω–∏—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏:", {
      parentUnitId,
      quantity,
      pricePerUnit
    });

    const parentUnit = await prisma.productUnit.findUnique({
      where: { id: parentUnitId },
      include: { 
        product: true,
        logs: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    if (!parentUnit) {
      throw new Error('Parent unit not found');
    }

    const childUnits = [];

    for (let i = 0; i < quantity; i++) {
      const childSerialNumber = `${parentUnit.serialNumber}/${i + 1}`;
      
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —é–Ω–∏—Ç ${i + 1}/${quantity}:`, childSerialNumber);

      const childUnit = await prisma.productUnit.create({
        data: {
          productId: parentUnit.productId,
          spineId: parentUnit.spineId,
          supplierId: parentUnit.supplierId,
          parentProductUnitId: parentUnitId,
          
          // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
          productCode: parentUnit.productCode,
          productName: parentUnit.productName,
          productDescription: parentUnit.productDescription,
          productCategoryId: parentUnit.productCategoryId,
          productCategoryName: parentUnit.productCategoryName,
          productTags: parentUnit.productTags,
          
          // –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
          serialNumber: childSerialNumber,
          statusCard: "IN_REQUEST",
          requestPricePerUnit: pricePerUnit,
          quantityInRequest: 1,
          createdAtRequest: new Date(),
          
          // üî• –°–û–ó–î–ê–ï–ú –õ–û–ì –î–õ–Ø –ö–ê–ñ–î–û–ì–û –î–û–ß–ï–†–ù–ï–ì–û –Æ–ù–ò–¢–ê
          logs: {
            create: {
              type: "REQUEST_CREATED",
              message: `–î–æ—á–µ—Ä–Ω–∏–π —é–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è #${parentUnit.serialNumber}`,
              meta: {
                parentUnitId: parentUnit.id,
                parentSerialNumber: parentUnit.serialNumber,
                requestPrice: pricePerUnit,
                childIndex: i + 1,
                totalChildren: quantity
              }
            }
          }
        },
        include: {
          logs: {
            orderBy: { createdAt: 'desc' }
          }
        }
      });

      childUnits.push(childUnit);
      
      console.log(`‚úÖ –î–æ—á–µ—Ä–Ω–∏–π —é–Ω–∏—Ç ${i + 1} —Å–æ–∑–¥–∞–Ω:`, {
        childId: childUnit.id,
        serialNumber: childUnit.serialNumber,
        hasLogs: childUnit.logs.length > 0
      });
    }

    // üî• –°–û–ó–î–ê–ï–ú –õ–û–ì –í –†–û–î–ò–¢–ï–õ–¨–°–ö–û–ú –Æ–ù–ò–¢–ï –û –°–û–ó–î–ê–ù–ò–ò –î–ï–¢–ï–ô
    await prisma.productUnitLog.create({
      data: {
        productUnitId: parentUnitId,
        type: "CHILDREN_CREATED", 
        message: `–°–æ–∑–¥–∞–Ω–æ ${quantity} –¥–æ—á–µ—Ä–Ω–∏—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ –ø–æ —Ü–µ–Ω–µ ${pricePerUnit} —Ä—É–±.`,
        meta: {
          childrenCount: quantity,
          pricePerUnit: pricePerUnit,
          childrenSerialNumbers: childUnits.map(unit => unit.serialNumber)
        }
      }
    });

    console.log("‚úÖ –í—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —é–Ω–∏—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:", {
      parentUnitId,
      childrenCount: childUnits.length,
      firstChild: childUnits[0]?.serialNumber,
      lastChild: childUnits[childUnits.length - 1]?.serialNumber
    });

    return childUnits;
  }
}