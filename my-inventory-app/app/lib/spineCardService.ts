// app/lib/spineCardService.ts
import { ProductUnitCardStatus } from "@prisma/client";

export interface ApiResult {
  success: boolean;
  error?: string;
  data?: any;
}

export class SpineCardService {
  /**
   * –î–æ–±–∞–≤–∏—Ç—å unit –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (—Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ CLEAR unit)
   */
  static async addToCandidate(unitId: number): Promise<ApiResult> {
    try {
      console.log("üîÑ [1] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ unit –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã...", unitId);

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CLEAR unit
      console.log("üîÑ [2] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CLEAR unit...");
      const unitRes = await fetch(`/api/product-units/${unitId}`);
      console.log("üì° [2a] Response status:", unitRes.status);
      
      const unitData = await unitRes.json();
      console.log("üì¶ [2b] Response data:", unitData);
      
      if (!unitData.ok) {
        console.error("‚ùå [2c] Unit –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return { success: false, error: "Unit –Ω–µ –Ω–∞–π–¥–µ–Ω" };
      }

      const clearUnit = unitData.data;
      console.log("‚úÖ [2d] –ù–∞–π–¥–µ–Ω CLEAR unit:", clearUnit.serialNumber);

      // 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô CLEAR unit –¥–ª—è –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      console.log("üîÑ [3] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π CLEAR unit —á–µ—Ä–µ–∑ /api/product-units/create...");
      
      const clonePayload = {
        cloneFromUnitId: clearUnit.id
      };
      console.log("üì¶ [3a] Payload –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", clonePayload);

      const newClearRes = await fetch("/api/product-units/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(clonePayload),
      });

      console.log("üì° [3b] Response status:", newClearRes.status);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ response –Ω–µ OK
      if (!newClearRes.ok) {
        const errorText = await newClearRes.text();
        console.error("‚ùå [3c] HTTP Error:", newClearRes.status, errorText);
        return { success: false, error: `HTTP ${newClearRes.status}: ${errorText}` };
      }

      const newClearData = await newClearRes.json();
      console.log("üì¶ [3d] Response data:", newClearData);
      
      if (!newClearData.ok) {
        console.error("‚ùå [3e] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ CLEAR unit:", newClearData.error);
        return { success: false, error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π CLEAR unit: " + newClearData.error };
      }

      console.log("‚úÖ [3f] –ù–æ–≤—ã–π CLEAR unit —Å–æ–∑–¥–∞–Ω:", newClearData.data.serialNumber);

      // 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ä—ã–π unit –≤ CANDIDATE
      console.log("üîÑ [4] –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ä—ã–π unit –≤ CANDIDATE...");
      
      const candidatePayload = { 
        unitId, 
        quantity: 1,
        action: "to_candidate" 
      };
      console.log("üì¶ [4a] Payload –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", candidatePayload);

      const candidateRes = await fetch("/api/product-units", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(candidatePayload),
      });

      console.log("üì° [4b] Response status:", candidateRes.status);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ response –Ω–µ OK
      if (!candidateRes.ok) {
        const errorText = await candidateRes.text();
        console.error("‚ùå [4c] HTTP Error:", candidateRes.status, errorText);
        return { success: false, error: `HTTP ${candidateRes.status}: ${errorText}` };
      }

      const candidateData = await candidateRes.json();
      console.log("üì¶ [4d] Response data:", candidateData);
      
      if (candidateData.ok) {
        console.log("‚úÖ [4e] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ CANDIDATE");
        return { 
          success: true, 
          data: {
            candidateUnit: candidateData.data,
            newClearUnit: newClearData.data
          }
        };
      } else {
        console.error("‚ùå [4f] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:", candidateData.error);
        return { success: false, error: candidateData.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã" };
      }
    } catch (error: any) {
      console.error("üí• [5] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ addToCandidate:", error);
      console.error("üí• [5a] Stack trace:", error.stack);
      return { success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è unit (—Å —Ü–µ–Ω–æ–π –∑–∞ –µ–¥–∏–Ω–∏—Ü—É)
   */
  static async createRequest(unitId: number, quantity: number, pricePerUnit: number): Promise<ApiResult> {
    try {
      console.log("üìã [SERVICE] === –ù–ê–ß–ê–õ–û createRequest ===");
      console.log("üìã [SERVICE] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", { unitId, quantity, pricePerUnit, type: typeof pricePerUnit });
      
      // ‚úÖ –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–´ –í –°–ï–†–í–ò–°–ï
      if (!pricePerUnit || pricePerUnit <= 0) {
        console.error("‚ùå [SERVICE] –¶–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞:", pricePerUnit);
        return { success: false, error: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0" };
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
      if (quantity === 1) {
        console.log("üîÑ [SERVICE] –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞");
        
        const res = await fetch("/api/product-units/request", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ unitId, quantity, pricePerUnit }), // ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –¶–ï–ù–£
        });

        console.log("üì° [SERVICE] Response status:", res.status);
        
        if (!res.ok) {
          const errorText = await res.text();
          console.error("‚ùå [SERVICE] HTTP Error:", res.status, errorText);
          return { success: false, error: `HTTP ${res.status}: ${errorText}` };
        }

        const data = await res.json();
        console.log("üì¶ [SERVICE] Response data:", data);
        
        if (data.ok) {
          console.log("‚úÖ [SERVICE] –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
          return { success: true, data };
        } else {
          console.error("‚ùå [SERVICE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏:", data.error);
          return { success: false, error: data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
        }
      } else {
        console.log("üîÑ [SERVICE] –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ (SPROUTED)");
        
        // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ requests
        const requests = [{ quantity, pricePerUnit }];
        
        const res = await fetch(`/api/product-units/${unitId}/sprout`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ requests }),
        });

        console.log("üì° [SERVICE] Response status:", res.status);
        
        if (!res.ok) {
          const errorText = await res.text();
          console.error("‚ùå [SERVICE] HTTP Error:", res.status, errorText);
          return { success: false, error: `HTTP ${res.status}: ${errorText}` };
        }

        const data = await res.json();
        console.log("üì¶ [SERVICE] Response data:", data);
        
        if (data.ok) {
          console.log("‚úÖ [SERVICE] –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
          return { success: true, data };
        } else {
          console.error("‚ùå [SERVICE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏:", data.error);
          return { success: false, error: data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
        }
      }
    } catch (error: any) {
      console.error("üí• [SERVICE] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
      return { success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + error.message };
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  static async deleteCandidate(unitId: number): Promise<ApiResult> {
    try {
      console.log("üóëÔ∏è [1] –£–¥–∞–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", unitId);
      
      const res = await fetch(`/api/product-units/${unitId}/candidate`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
      });

      console.log("üì° [2] Response status:", res.status);
      
      if (!res.ok) {
        const errorText = await res.text();
        console.error("‚ùå [3] HTTP Error:", res.status, errorText);
        return { success: false, error: `HTTP ${res.status}: ${errorText}` };
      }

      const data = await res.json();
      console.log("üì¶ [4] Response data:", data);
      
      if (data.ok) {
        console.log("‚úÖ [5] –ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω");
        return { success: true, data };
      } else {
        console.error("‚ùå [6] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", data.error);
        return { success: false, error: data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
      }
    } catch (error: any) {
      console.error("üí• [7] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", error);
      return { success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + error.message };
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  static showNotification(message: string, isError: boolean = false) {
    if (isError) {
      console.error("‚ùå –û—à–∏–±–∫–∞:", message);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${message}`);
    } else {
      console.log("‚úÖ –£—Å–ø–µ—Ö:", message);
      alert(`‚úÖ ${message}`);
    }
  }
}