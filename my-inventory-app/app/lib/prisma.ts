// @/app/lib/prisma.ts
import { PrismaClient } from "@prisma/client";

interface ExtendedPrismaClient extends PrismaClient {
  _connectionManager?: {
    getStats: () => Promise<ConnectionStats>;
    manualCleanup: (opts?: { aggressive?: boolean }) => Promise<CleanupResult>;
    getActiveOperations: () => number;
  };
}

interface ConnectionStats {
  total: number;
  idle: number;
  active: number;
  idleOld: number;
  idleInTransaction: number;
  activeTransactions: number;
}

interface CleanupResult {
  checked: number;
  closed: number;
  skippedActive: number;
  terminated?: number; // —Ç–æ–ª—å–∫–æ –¥–ª—è aggressive
}

const globalForPrisma = global as unknown as {
  prisma?: ExtendedPrismaClient;
  connectionManager?: ConnectionManager;
};

class ConnectionManager {
  private static instance: ConnectionManager;
  private prisma: ExtendedPrismaClient;
  private cleanupTimer: NodeJS.Timeout | null = null;
  private activeOperations = new Set<string>();
  private operationId = 0;
  private isMiddlewareSetup = false;
  private cleanupInProgress = false;
  private shutdownHandlersRegistered = false;

  private constructor() {
    this.prisma = this.createPrismaClient();
    this.setupConnectionTracking();
    this.startBackgroundCleanup();
  }

  public static getInstance(): ConnectionManager {
    if (!ConnectionManager.instance) {
      ConnectionManager.instance = new ConnectionManager();
    }
    return ConnectionManager.instance;
  }

  private createPrismaClient(): ExtendedPrismaClient {
    // –í dev –º—ã —Ö–æ—Ç–∏–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–∂–¥—É HMR –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
    if (process.env.NODE_ENV !== "production" && globalForPrisma.prisma) {
      return globalForPrisma.prisma;
    }

    const prisma = new PrismaClient({
      log: process.env.NODE_ENV === "development" ? ["error", "warn"] : ["error"],
    }) as ExtendedPrismaClient;

    if (process.env.NODE_ENV !== "production") {
      globalForPrisma.prisma = prisma;
    }

    return prisma;
  }

  /**
   * Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * –û—Ç–º–µ—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ id, –∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º BEGIN/COMMIT/ROLLBACK –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.
   */
  private setupConnectionTracking(): void {
    if (this.isMiddlewareSetup) return;

    if (typeof this.prisma.$use !== "function") {
      if (process.env.NODE_ENV === "development") {
        console.warn("‚ÑπÔ∏è Prisma middleware ($use) not available in this environment");
      }
      return;
    }

    try {
      this.prisma.$use(async (params, next) => {
        const opId = `op_${++this.operationId}_${params.model || "raw"}_${params.action}`;
        this.activeOperations.add(opId);

        // –ü–æ–º–µ—Ç–∫–∞, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —è–≤–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ heuristic ‚Äî –ø–æ–ª–µ–∑–Ω–æ)
        const queryText = (params.args && (params.args as any).query) || "";
        const isBegin = typeof queryText === "string" && queryText.trim().toUpperCase().startsWith("BEGIN");

        try {
          return await next(params);
        } finally {
          // –Ω–µ–±–æ–ª—å—à–æ–π debounce ‚Äî –Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          this.activeOperations.delete(opId);
        }
      });

      this.isMiddlewareSetup = true;
      if (process.env.NODE_ENV === "development") {
        console.log("‚úÖ Prisma connection tracking enabled");
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è Prisma middleware setup failed:", err);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏.
   * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ñ–ª–∞–≥—É –∏–ª–∏ –≤ production.
   */
  private startBackgroundCleanup(): void {
    const enable =
      process.env.NODE_ENV === "production" || process.env.ENABLE_CONNECTION_CLEANUP === "true";

    if (!enable) {
      if (process.env.NODE_ENV === "development") {
        console.log("‚ÑπÔ∏è Background connection cleanup disabled");
      }
      return;
    }

    // –ü–µ—Ä–∏–æ–¥ 5 –º–∏–Ω—É—Ç (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–ª–∞–≥–æ–º)
    const intervalMs = Number(process.env.CONNECTION_CLEANUP_INTERVAL_MS) || 5 * 60 * 1000;

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤
    if (this.cleanupTimer) return;

    this.cleanupTimer = setInterval(() => {
      // fire-and-forget, –Ω–æ –∑–∞—â–∏—â–µ–Ω–æ mutex-–æ–º –≤–Ω—É—Ç—Ä–∏ safeCleanup
      this.safeCleanup().catch((e) => {
        if (process.env.NODE_ENV === "development") {
          console.error("‚ùå Background safeCleanup failed:", e);
        }
      });
    }, intervalMs);

    // registation of shutdown handlers only once
    if (!this.shutdownHandlersRegistered) {
      const cleanupHandler = async () => {
        await this.cleanup();
      };
      process.once("beforeExit", cleanupHandler);
      process.once("SIGINT", cleanupHandler);
      process.once("SIGTERM", cleanupHandler);
      this.shutdownHandlersRegistered = true;
    }

    if (process.env.NODE_ENV === "development") {
      console.log(`‚úÖ Background connection cleanup enabled (every ${intervalMs} ms)`);
    }
  }

  /**
   * –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * aggressive=true -> –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–ª–∞–≥–µ ENV).
   */
  public async safeCleanup(opts?: { aggressive?: boolean }): Promise<CleanupResult> {
    if (this.cleanupInProgress) {
      if (process.env.NODE_ENV === "development") {
        console.log("‚ÑπÔ∏è Cleanup already in progress, skipping concurrent run");
      }
      return { checked: 0, closed: 0, skippedActive: 0 };
    }

    this.cleanupInProgress = true;
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –ù–ï –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
      if (this.isMiddlewareSetup && this.activeOperations.size > 0) {
        if (process.env.NODE_ENV === "development") {
          console.log(`‚è∏Ô∏è Skip cleanup - ${this.activeOperations.size} active operations`);
        }
        return { checked: 0, closed: 0, skippedActive: this.activeOperations.size };
      }

      const stats = await this.getConnectionStats();

      if (stats.idleOld <= 0) {
        return { checked: stats.total, closed: 0, skippedActive: 0 };
      }

      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º stats.idleOld –∫–∞–∫ "–∑–∞–∫—Ä—ã—Ç—ã–µ",
      // –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —É–±–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–º–æ—Ç–∏–≤: –Ω–µ —Ä–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏).
      // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ ENV-—Ñ–ª–∞–≥–∞ ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º backend.
      if (opts?.aggressive && process.env.ENABLE_CONNECTION_TERMINATION === "true") {
        const terminated = await this.terminateOldIdleConnections();
        return {
          checked: stats.total,
          closed: stats.idleOld,
          skippedActive: stats.active + stats.activeTransactions,
          terminated
        };
      }

      // "–ú—è–≥–∫–∞—è" –ø–æ–º–æ—â—å ‚Äî –¥–µ—Ä–Ω—É—Ç—å –ª–µ–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—É–ª –æ–±–Ω–æ–≤–∏–ª—Å—è (hot connection).
      try {
        await this.executeSilentQuery<number>("SELECT 1");
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç—ë–ø–ª–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      }

      if (process.env.NODE_ENV === "development") {
        console.log(`üîÑ Safe cleanup: ${stats.idleOld} old idle connections (not terminated)`);
      }

      return { checked: stats.total, closed: 0, skippedActive: stats.active + stats.activeTransactions };
    } catch (error) {
      if (process.env.NODE_ENV === "development") {
        console.error("‚ùå Safe cleanup failed:", error);
      }
      return { checked: 0, closed: 0, skippedActive: 0 };
    } finally {
      this.cleanupInProgress = false;
    }
  }

  /**
   * –¢–µ—Ä–º–∏–Ω–∏—Ä—É–µ—Ç –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ idle-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–û–ü–ê–°–ù–û).
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö backend'–æ–≤.
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ENABLE_CONNECTION_TERMINATION='true'.
   */
  private async terminateOldIdleConnections(): Promise<number> {
    // –ó–∞—â–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (process.env.ENABLE_CONNECTION_TERMINATION !== "true") {
      if (process.env.NODE_ENV === "development") {
        console.log("‚ÑπÔ∏è Aggressive termination is disabled by env");
      }
      return 0;
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º pid-—ã, –∫–æ—Ç–æ—Ä—ã–µ idle > threshold (–Ω–∞–ø—Ä–∏–º–µ—Ä 30 –º–∏–Ω—É—Ç)
      // –∏ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã.
      const rows = await this.executeSilentQuery<
        Array<{ pid: number; state: string; query: string; age_seconds: number }>
      >(
        `
        SELECT pid,
               state,
               query,
               EXTRACT(EPOCH FROM (now() - backend_start))::int as age_seconds
        FROM pg_stat_activity
        WHERE datname = current_database()
          AND application_name IS NOT NULL
          AND application_name != ''
          AND state = 'idle'
          AND now() - backend_start > interval '30 minutes'
        `
      );

      if (!rows || rows.length === 0) {
        return 0;
      }

      let terminated = 0;
      for (const r of rows) {
        try {
          // pg_terminate_backend —Ç—Ä–µ–±—É–µ—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–±–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π.
          await this.executeSilentQuery<number>(`SELECT pg_terminate_backend($1)`, r.pid);
          terminated++;
        } catch (e) {
          // ignore per-pid failure
          if (process.env.NODE_ENV === "development") {
            console.warn(`‚ö†Ô∏è Failed to terminate pid ${r.pid}:`, e);
          }
        }
      }

      if (process.env.NODE_ENV === "development") {
        console.log(`üî® Aggressive cleanup terminated ${terminated} connections`);
      }

      return terminated;
    } catch (err) {
      if (process.env.NODE_ENV === "development") {
        console.error("‚ùå terminateOldIdleConnections failed:", err);
      }
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pg_stat_activity).
   */
  private async getConnectionStats(): Promise<ConnectionStats> {
    try {
      const result = await this.executeSilentQuery<
        Array<{
          total: bigint;
          idle: bigint;
          active: bigint;
          idle_old: bigint;
          idle_in_transaction: bigint;
          active_transactions: bigint;
        }>
      >(
        `
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE state = 'idle' AND query = '') as idle,
          COUNT(*) FILTER (WHERE state = 'active') as active,
          COUNT(*) FILTER (
            WHERE state = 'idle' 
            AND query = ''
            AND now() - backend_start > interval '30 minutes'
          ) as idle_old,
          COUNT(*) FILTER (WHERE state = 'idle in transaction') as idle_in_transaction,
          COUNT(*) FILTER (
            WHERE state = 'active' 
            AND query LIKE 'BEGIN%'
          ) as active_transactions
        FROM pg_stat_activity 
        WHERE datname = current_database()
          AND application_name IS NOT NULL
          AND application_name != ''
        `
      );

      const stats = result[0] || ({} as any);

      return {
        total: Number(stats.total || 0),
        idle: Number(stats.idle || 0),
        active: Number(stats.active || 0),
        idleOld: Number(stats.idle_old || 0),
        idleInTransaction: Number(stats.idle_in_transaction || 0),
        activeTransactions: Number(stats.active_transactions || 0)
      };
    } catch (error) {
      if (process.env.NODE_ENV === "development") {
        console.error("‚ùå Failed to get connection stats:", error);
      }
      return { total: 0, idle: 0, active: 0, idleOld: 0, idleInTransaction: 0, activeTransactions: 0 };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ "–º–æ–ª—á–∞—â–µ–≥–æ" –∑–∞–ø—Ä–æ—Å–∞ - –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤.
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º $queryRaw —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏. –í —Å–ª—É—á–∞–µ –¥–∏–Ω–∞–º–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º $queryRawUnsafe –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.
   */
  private async executeSilentQuery<T>(query: string, ...params: any[]): Promise<any> {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º prisma.$queryRawUnsafe
    if (params && params.length > 0) {
      return this.prisma.$queryRawUnsafe<T>(query, ...params);
    }
    // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ –ª–∏—Ç–µ—Ä–∞–ª (–≤ —Ä–∞–º–∫–∞—Ö SQL, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º)
    return this.prisma.$queryRaw<T>(query);
  }

  /**
   * –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
   */
  public async manualCleanup(opts?: { aggressive?: boolean }): Promise<CleanupResult> {
    return this.safeCleanup(opts);
  }

  public async getStats(): Promise<ConnectionStats> {
    return this.getConnectionStats();
  }

  public getActiveOperations(): number {
    return this.isMiddlewareSetup ? this.activeOperations.size : 0;
  }

  /**
   * –ì—Ä–µ–π—Å—Ñ—É–ª-—à—É—Ç–¥–∞—É–Ω: –∂–¥—ë–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ timeout, –∑–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å Prisma.
   */
  private async cleanup(): Promise<void> {
    // clear interval
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
    }

    // wait up to MAX ms for active operations to finish
    const maxWait = Number(process.env.CONNECTION_SHUTDOWN_WAIT_MS) || 10000;
    const start = Date.now();
    while (this.activeOperations.size > 0 && Date.now() - start < maxWait) {
      await new Promise((r) => setTimeout(r, 100));
    }

    if (this.activeOperations.size > 0) {
      if (process.env.NODE_ENV === "development") {
        console.warn(`‚ö†Ô∏è Force disconnect with ${this.activeOperations.size} active operations`);
      }
    }

    try {
      await this.prisma.$disconnect();
      if (process.env.NODE_ENV === "development") {
        console.log("‚úÖ Prisma disconnected successfully");
      }
    } catch (err) {
      if (process.env.NODE_ENV === "development") {
        console.error("‚ùå Error disconnecting Prisma:", err);
      }
    }
  }

  public getClient(): ExtendedPrismaClient {
    return this.prisma;
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–≤ dev ‚Äî –≤ global, —á—Ç–æ–±—ã HMR –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª)
let connectionManager: ConnectionManager;
if (globalForPrisma.connectionManager) {
  connectionManager = globalForPrisma.connectionManager;
} else {
  connectionManager = ConnectionManager.getInstance();
  if (process.env.NODE_ENV !== "production") {
    globalForPrisma.connectionManager = connectionManager;
  }
}

const prisma = connectionManager.getClient();
prisma._connectionManager = {
  getStats: () => connectionManager.getStats(),
  manualCleanup: (opts?: { aggressive?: boolean }) => connectionManager.manualCleanup(opts),
  getActiveOperations: () => connectionManager.getActiveOperations()
};

export { prisma };
export default prisma;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞/—Ä—É—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
export const connectionUtils = {
  getStats: async (): Promise<ConnectionStats> => {
    if (prisma._connectionManager) {
      return prisma._connectionManager.getStats();
    }
    return { total: 0, idle: 0, active: 0, idleOld: 0, idleInTransaction: 0, activeTransactions: 0 };
  },

  manualCleanup: async (opts?: { aggressive?: boolean }): Promise<CleanupResult> => {
    if (prisma._connectionManager) {
      return prisma._connectionManager.manualCleanup(opts);
    }
    return { checked: 0, closed: 0, skippedActive: 0 };
  },

  getActiveOperations: (): number => {
    if (prisma._connectionManager) {
      return prisma._connectionManager.getActiveOperations();
    }
    return 0;
  }
};
