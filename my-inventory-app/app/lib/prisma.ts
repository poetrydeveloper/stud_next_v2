// @/app/lib/prisma.ts
import { PrismaClient } from "@prisma/client";
import { createLogMiddleware } from './prismaLogMiddleware';

interface ExtendedPrismaClient extends PrismaClient {
  $cleanupIdleConnections?: () => Promise<{ checked: number; closed: number }>;
  $getConnectionStats?: () => Promise<{
    total: number;
    idle: number;
    active: number;
    idle_old: number;
    active_transactions: number;
  }>;
}

const globalForPrisma = global as unknown as { prisma: ExtendedPrismaClient };

const PRISMA_CONFIG = {
  // –¢–æ–ª—å–∫–æ –¥–ª—è IDLE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–Ω–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö)
  maxIdleConnectionAge: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç –¥–ª—è idle
  // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ idle
  cleanupInterval: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
} as const;

class SafePrismaConnectionManager {
  private prisma: ExtendedPrismaClient;
  private cleanupTimer: NodeJS.Timeout | null = null;
  private isCleaningUp = false;
  private activeOperations = 0;

  constructor() {
    this.prisma = this.createPrismaClient();
    this.setupSafeMonitoring();
  }

  private createPrismaClient(): ExtendedPrismaClient {
    const prisma = new PrismaClient({
      log: process.env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
      // –í–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      datasources: {
        db: {
          url: process.env.DATABASE_URL
        }
      },
      // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      transactionOptions: {
        maxWait: 60000, // 60 —Å–µ–∫—É–Ω–¥
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
      }
    }) as ExtendedPrismaClient;

    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    prisma.$cleanupIdleConnections = async () => {
      return this.safeCleanupIdleConnections();
    };

    prisma.$getConnectionStats = async () => {
      return this.getSafeConnectionStats();
    };

    return prisma;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - —Ç–æ–ª—å–∫–æ IDLE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private setupSafeMonitoring(): void {
    this.cleanupTimer = setInterval(async () => {
      // –ù–µ –æ—á–∏—â–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (this.activeOperations > 0 || this.isCleaningUp) {
        return;
      }
      
      try {
        await this.safeCleanupIdleConnections();
      } catch (error) {
        console.error('‚ùå Safe connection cleanup failed:', error);
      }
    }, PRISMA_CONFIG.cleanupInterval);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.setupShutdownHandlers();
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¢–û–õ–¨–ö–û IDLE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private async safeCleanupIdleConnections(): Promise<{ checked: number; closed: number }> {
    if (this.isCleaningUp) {
      return { checked: 0, closed: 0 };
    }

    this.isCleaningUp = true;

    try {
      const stats = await this.getSafeConnectionStats();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞—Ä—ã–µ IDLE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö)
      if (stats.idle_old > 0) {
        console.log(`üîÑ Safely cleaning up ${stats.idle_old} old idle connections...`);
        
        // Prisma –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É–ª–æ–º, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å
        // –≤—ã–ø–æ–ª–Ω–∏–≤ –ª–µ–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–∞
        await this.prisma.$queryRaw`SELECT 1`;
        
        console.log(`‚úÖ Safely closed ${stats.idle_old} idle connections`);
        return { checked: stats.total, closed: stats.idle_old };
      }
      
      return { checked: stats.total, closed: 0 };

    } catch (error) {
      console.error('‚ùå Safe cleanup failed:', error);
      return { checked: 0, closed: 0 };
    } finally {
      this.isCleaningUp = false;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ IDLE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async getSafeConnectionStats(): Promise<{
    total: number;
    idle: number;
    active: number;
    idle_old: number;
    active_transactions: number;
  }> {
    try {
      // –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¢–û–õ–¨–ö–û idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      const result = await this.prisma.$queryRaw<Array<{
        total: bigint;
        idle: bigint;
        active: bigint;
        idle_old: bigint;
        active_transactions: bigint;
      }>>`
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE state = 'idle' AND query = '') as idle,
          COUNT(*) FILTER (WHERE state = 'active') as active,
          COUNT(*) FILTER (
            WHERE state = 'idle' 
            AND query = ''
            AND now() - backend_start > interval '${PRISMA_CONFIG.maxIdleConnectionAge / 1000} seconds'
          ) as idle_old,
          COUNT(*) FILTER (
            WHERE state = 'idle in transaction' 
            OR state = 'active'
          ) as active_transactions
        FROM pg_stat_activity 
        WHERE datname = current_database()
          AND application_name IS NOT NULL
          AND application_name != ''
      `;

      const stats = result[0];
      
      return {
        total: Number(stats.total),
        idle: Number(stats.idle),
        active: Number(stats.active),
        idle_old: Number(stats.idle_old),
        active_transactions: Number(stats.active_transactions)
      };

    } catch (error) {
      console.error('‚ùå Failed to get safe connection stats:', error);
      return { total: 0, idle: 0, active: 0, idle_old: 0, active_transactions: 0 };
    }
  }

  /**
   * Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  private setupOperationTracking(): void {
    this.prisma.$use(async (params, next) => {
      this.activeOperations++;
      
      try {
        const result = await next(params);
        return result;
      } finally {
        this.activeOperations--;
      }
    });
  }

  private setupShutdownHandlers(): void {
    const cleanup = async () => {
      if (this.cleanupTimer) {
        clearInterval(this.cleanupTimer);
        this.cleanupTimer = null;
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–º–∞–∫—Å 30 —Å–µ–∫—É–Ω–¥)
      const maxWait = 30000;
      const startTime = Date.now();
      
      while (this.activeOperations > 0 && (Date.now() - startTime) < maxWait) {
        console.log(`‚è≥ Waiting for ${this.activeOperations} active operations to complete...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      if (this.activeOperations > 0) {
        console.warn(`‚ö†Ô∏è Force disconnecting with ${this.activeOperations} active operations`);
      }

      if (this.prisma) {
        try {
          await this.prisma.$disconnect();
          console.log('‚úÖ Prisma disconnected safely');
        } catch (error) {
          console.error('‚ùå Error disconnecting Prisma:', error);
        }
      }
    };

    process.on('beforeExit', cleanup);
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
  }

  public getClient(): ExtendedPrismaClient {
    return this.prisma;
  }

  public async manualSafeCleanup(): Promise<{ checked: number; closed: number }> {
    return this.safeCleanupIdleConnections();
  }

  public getActiveOperationsCount(): number {
    return this.activeOperations;
  }
}

// –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
const prismaManager = new SafePrismaConnectionManager();
export const prisma = prismaManager.getClient();
export const prismaConnectionManager = prismaManager;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if (prisma && typeof prisma.$use === 'function') {
  try {
    createLogMiddleware(prisma);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    prisma.$use(async (params, next) => {
      prismaConnectionManager['activeOperations']++;
      try {
        const result = await next(params);
        return result;
      } finally {
        prismaConnectionManager['activeOperations']--;
      }
    });
    
    console.log('‚úÖ Prisma middleware initialized successfully');
  } catch (error) {
    console.warn('‚ö†Ô∏è Middleware initialization failed, continuing without it:', error);
  }
}

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prisma;
}

export default prisma;